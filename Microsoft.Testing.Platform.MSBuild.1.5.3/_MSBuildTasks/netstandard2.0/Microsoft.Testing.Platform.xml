<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Testing.Platform</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            Indicates that a parameter captures the expression passed for another parameter as a string.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">
            The name of the parameter whose expression should be captured as a string.
            </param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the name of the parameter whose expression should be captured as a string.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/>
            </summary>
            <param name="featureName">The name of the required compiler feature.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
            <summary>
            Disables the built-in runtime managed/unmanaged marshalling subsystem for
            P/Invokes, Delegate types, and unmanaged function pointer invocations.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata. This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
            <summary>
            Used to indicate to the compiler that a method should be called
            in its containing module's initializer.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized,
            lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method allows a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c>
            flag should not be set in method headers.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.OSPlatformAttribute.#ctor(System.String)">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
            <summary>
            Records the operating system (and minimum version) that supports an API. Multiple attributes can be
            applied to indicate support on multiple operating systems.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.SupportedOSPlatformAttribute.#ctor(System.String)">
            <summary>
            Records the operating system (and minimum version) that supports an API. Multiple attributes can be
            applied to indicate support on multiple operating systems.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
            <summary>
            Annotates a custom guard field, property or method with a supported platform name and optional version.
            Multiple attributes can be applied to indicate guard for multiple supported platforms.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute.#ctor(System.String)">
            <summary>
            Annotates a custom guard field, property or method with a supported platform name and optional version.
            Multiple attributes can be applied to indicate guard for multiple supported platforms.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.TargetPlatformAttribute.#ctor(System.String)">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
            <summary>
            Annotates the custom guard field, property or method with an unsupported platform name and optional version.
            Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute.#ctor(System.String)">
            <summary>
            Annotates the custom guard field, property or method with an unsupported platform name and optional version.
            Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute">
            <summary>
            An attribute used to indicate a GC transition should be skipped when making an unmanaged function call.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
            <summary>
            Any method marked with <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> can be directly called from
            native code. The function token can be loaded to a local variable using the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/pointer-related-operators#address-of-operator-">address-of</see> operator
            in C# and passed as a callback to a native method.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
            <summary>
            Optional. If omitted, the runtime will use the default platform calling convention.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
            <summary>
            Optional. If omitted, no named export is emitted during compilation.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that a parameter captures the expression passed for another parameter as a string.
            </summary>
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute">
            <summary>
            Indicates that the specified public static boolean get-only property
            guards access to the specified feature.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute"/> class
            with the specified feature type.
            </summary>
            <param name="featureType">
            The type that represents the feature guarded by the property.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute.FeatureType">
            <summary>
            The type that represents the feature guarded by the property.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute">
            <summary>
            [AttributeUsage(AttributeTargets.Property, Inherited = false)]
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute"/> class
            with the specified feature switch name.
            </summary>
            <param name="switchName">
            The name of the feature switch that provides the value for the specified property.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute.SwitchName">
            <summary>
            The name of the feature switch that provides the value for the specified property.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
              Specifies that <see langword="null"/> is allowed as an input even if the
              corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
              Specifies that <see langword="null"/> is disallowed as an input even if the
              corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
              Specifies that a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
              Specifies that the method will not return if the associated <see cref="T:System.Boolean"/>
              parameter is passed the specified value.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
              Gets the condition parameter value.
              Code after the method is considered unreachable by diagnostics if the argument
              to the associated parameter matches this value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/>
              class with the specified parameter value.
            </summary>
            <param name="parameterValue">
              The condition parameter value.
              Code after the method is considered unreachable by diagnostics if the argument
              to the associated parameter matches this value.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
              Specifies that an output may be <see langword="null"/> even if the
              corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
              Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
              the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
              If the method returns this value, the associated parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
               Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
              The return value condition.
              If the method returns this value, the associated parameter may be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
              Specifies that the method or property will ensure that the listed field and property members have
              not-<see langword="null"/> values.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
              Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
              Initializes the attribute with a field or property member.
            </summary>
            <param name="member">
              The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
              Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">
              The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
              Specifies that the method or property will ensure that the listed field and property members have
              non-<see langword="null"/> values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
              Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
              Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
              The return value condition. If the method returns this value,
              the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="member">
              The field or property member that is promised to be not-<see langword="null"/>.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
              Initializes the attribute with the specified return value condition and list
              of field and property members.
            </summary>
            <param name="returnValue">
              The return value condition. If the method returns this value,
              the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="members">
              The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
              Specifies that an output is not <see langword="null"/> even if the
              corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
              Gets the associated parameter name.
              The output will be non-<see langword="null"/> if the argument to the
              parameter specified is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
              Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">
              The associated parameter name.
              The output will be non-<see langword="null"/> if the argument to the
              parameter specified is non-<see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
              Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
              the parameter will not be <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
              If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
              Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
              The return value condition.
              If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type, and callers
            do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
            <summary>
            Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggerDisableUserUnhandledExceptionsAttribute">
            <summary>
            If a .NET Debugger is attached that supports the <see cref="!:Debugger.BreakForUserUnhandledException(System.Exception)" /> API, the debugger won't break on user-unhandled exceptions when the exception is caught by a method with this attribute, unless <see cref="!:Debugger.BreakForUserUnhandledException(System.Exception)" /> is called.
            </summary>
        </member>
        <member name="T:System.Diagnostics.StackTraceHiddenAttribute">
            <summary>
            Types and Methods attributed with StackTraceHidden will be omitted from the stack trace text shown in StackTrace.ToString()
            and Exception.StackTrace
            </summary>
        </member>
        <member name="T:System.Diagnostics.TaskCompletionSource">
            <summary>
            Represents the producer side of a <see cref="!:Tasks.Task"/> unbound to a
            delegate, providing access to the consumer side through the <see cref="!:Tasks.Task"/> property.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/>.</summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor(System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/> with the specified options.</summary>
            <param name="creationOptions">The options to use when creating the underlying <see cref="!:Tasks.Task"/>.</param>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor(System.Object)">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/> with the specified state.</summary>
            <param name="state">The state to use as the underlying
            <see cref="!:Tasks.Task"/>'s AsyncState.</param>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/> with the specified state and options.</summary>
            <param name="creationOptions">The options to use when creating the underlying <see cref="!:Tasks.Task"/>.</param>
            <param name="state">The state to use as the underlying <see cref="!:Tasks.Task"/>'s AsyncState.</param>
        </member>
        <member name="P:System.Diagnostics.TaskCompletionSource.Task">
            <summary>
            Gets the <see cref="!:Tasks.Task"/> created
            by this <see cref="T:System.Diagnostics.TaskCompletionSource"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetException(System.Exception)">
            <summary>Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.</summary>
            <param name="exception">The exception to bind to this <see cref="!:Tasks.Task"/>.</param>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.</summary>
            <param name="exceptions">The collection of exceptions to bind to this <see cref="!:Tasks.Task"/>.</param>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.
            </summary>
            <param name="exception">The exception to bind to this <see cref="!:Tasks.Task"/>.</param>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.
            </summary>
            <param name="exceptions">The collection of exceptions to bind to this <see cref="!:Tasks.Task"/>.</param>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetResult">
            <summary>
            Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetResult">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetCanceled">
            <summary>
            Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetCanceled(System.Threading.CancellationToken)">
            <summary>
            Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state
            using the specified token.
            </summary>
            <param name="cancellationToken">The cancellation token with which to cancel the <see cref="!:Tasks.Task"/>.</param>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetCanceled">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetCanceled(System.Threading.CancellationToken)">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
            <param name="cancellationToken">The cancellation token with which to cancel the <see cref="!:Tasks.Task"/>.</param>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="T:System.Diagnostics.UnreachableException">
            <summary>
            Exception thrown when the program executes an instruction that was thought to be unreachable.
            </summary>
            <seealso href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.unreachableexception"/>
            <seealso href="https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/UnreachableException.cs"/>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Represent a range has start and end indexes.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePair.Create``2(``0,``1)">
            <summary>
            Creates a new key/value pair instance using provided values.
            </summary>
            <param name="key">The key of the new <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to be created.</param>
            <param name="value">The value of the new <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to be created.</param>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns>A key/value pair containing the provided arguments as values.</returns>
        </member>
        <member name="T:System.Threading.Lock">
            <summary>
            Provides a way to get mutual exclusion in regions of code between different threads. A lock may be held by one thread at
            a time.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.Enter">
            <summary>
            Enters the lock. Once the method returns, the calling thread would be the only thread that holds the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.TryEnter">
            <summary>
            Tries to enter the lock without waiting. If the lock is entered, the calling thread would be the only thread that
            holds the lock.
            </summary>
            <returns>
            <code>true</code> if the lock was entered, <code>false</code> otherwise.
            </returns>
        </member>
        <member name="M:System.Threading.Lock.TryEnter(System.TimeSpan)">
            <summary>
            Tries to enter the lock, waiting for roughly the specified duration. If the lock is entered, the calling thread
            would be the only thread that holds the lock.
            </summary>
            <param name="timeout">
            The rough duration for which the method will wait if the lock is not available. The timeout is converted to a number
            of milliseconds by casting <see cref="P:System.TimeSpan.TotalMilliseconds"/> of the timeout to an integer value. A value
            representing <code>0</code> milliseconds specifies that the method should not wait, and a value representing
            <see cref="F:System.Threading.Timeout.Infinite"/> or <code>-1</code> milliseconds specifies that the method should wait indefinitely
            until the lock is entered.
            </param>
            <returns>
            <code>true</code> if the lock was entered, <code>false</code> otherwise.
            </returns>
        </member>
        <member name="M:System.Threading.Lock.TryEnter(System.Int32)">
            <summary>
            Tries to enter the lock, waiting for roughly the specified duration. If the lock is entered, the calling thread
            would be the only thread that holds the lock.
            </summary>
            <param name="millisecondsTimeout">
            The rough duration in milliseconds for which the method will wait if the lock is not available. A value of
            <code>0</code> specifies that the method should not wait, and a value of <see cref="F:System.Threading.Timeout.Infinite"/> or
            <code>-1</code> specifies that the method should wait indefinitely until the lock is entered.
            </param>
            <returns>
            <code>true</code> if the lock was entered, <code>false</code> otherwise.
            </returns>
        </member>
        <member name="M:System.Threading.Lock.Exit">
            <summary>
            Exits the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.EnterScope">
            <summary>
            Enters the lock and returns a <see cref="T:System.Threading.Lock.Scope"/> that may be disposed to exit the lock. Once the method returns,
            the calling thread would be the only thread that holds the lock. This method is intended to be used along with a
            language construct that would automatically dispose the <see cref="T:System.Threading.Lock.Scope"/>, such as with the C# <code>using</code>
            statement.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Lock.Scope"/> that may be disposed to exit the lock.
            </returns>
        </member>
        <member name="T:System.Threading.Lock.Scope">
            <summary>
            A disposable structure that is returned by <see cref="M:System.Threading.Lock.EnterScope"/>, which when disposed, exits the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.Scope.#ctor(System.Threading.Lock)">
            <summary>
            A disposable structure that is returned by <see cref="M:System.Threading.Lock.EnterScope"/>, which when disposed, exits the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.Scope.Dispose">
            <summary>
            Exits the lock.
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityInfo">
            <summary>
            A class that represents nullability info
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.Type">
            <summary>
            The <see cref="T:System.Type" /> of the member or generic parameter
            to which this NullabilityInfo belongs
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.ReadState">
            <summary>
            The nullability read state of the member
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.WriteState">
            <summary>
            The nullability write state of the member
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.ElementType">
            <summary>
            If the member type is an array, gives the <see cref="T:System.Reflection.NullabilityInfo" /> of the elements of the array, null otherwise
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.GenericTypeArguments">
            <summary>
            If the member type is a generic type, gives the array of <see cref="T:System.Reflection.NullabilityInfo" /> for each type parameter
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityState">
            <summary>
            An enum that represents nullability state
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.Unknown">
            <summary>
            Nullability context not enabled (oblivious)
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.NotNull">
            <summary>
            Non nullable value or reference type
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.Nullable">
            <summary>
            Nullable value or reference type
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityInfoContext">
            <summary>
            Provides APIs for populating nullability information/context from reflection members:
            <see cref="T:System.Reflection.ParameterInfo"/>, <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.EventInfo"/>.
            </summary>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.ParameterInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="parameterInfo">The parameter which nullability info gets populated</param>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.PropertyInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.PropertyInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="propertyInfo">The parameter which nullability info gets populated</param>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.EventInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.EventInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="eventInfo">The parameter which nullability info gets populated</param>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.FieldInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.FieldInfo" />
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="fieldInfo">The parameter which nullability info gets populated</param>
        </member>
        <member name="M:Polyfills.DateTimeOffsetPolyfill.TryParse(System.String,System.IFormatProvider,System.DateTimeOffset@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DateTimePolyfill.TryParse(System.String,System.IFormatProvider,System.DateTime@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DelegatePolyfill.EnumerateInvocationList``1(``0)">
            <summary>
            Gets an enumerator for the invocation targets of this delegate.
            </summary>
        </member>
        <member name="T:Polyfills.DelegatePolyfill.InvocationListEnumerator`1">
            <summary>
            Provides an enumerator for the invocation list of a delegate.
            </summary>
            <typeparam name="TDelegate">Delegate type being enumerated.</typeparam>
        </member>
        <member name="M:Polyfills.EnumPolyfill.GetValues``1">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration type.
            </summary>
            <returns>An array that contains the values of the constants in TEnum.</returns>
        </member>
        <member name="M:Polyfills.EnumPolyfill.IsDefined``1(``0)">
            <summary>Returns a <see cref="T:System.Boolean"/> telling whether a given integral value exists in a specified enumeration.</summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="value">The value in <typeparamref name="TEnum"/>.</param>
            <returns><see langword="true"/> if a given integral value exists in a specified enumeration; <see langword="false"/>, otherwise.</returns>
        </member>
        <member name="M:Polyfills.EnumPolyfill.GetNames``1">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration type.
            </summary>
            <returns>A string array of the names of the constants in TEnum.</returns>
        </member>
        <member name="M:Polyfills.EnumPolyfill.Parse``1(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.Parse``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.GuidPolyfill.TryParse(System.String,System.IFormatProvider,System.Guid@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.GuidPolyfill.CreateVersion7">
            <summary>Creates a new <see cref="T:System.Guid" /> according to RFC 9562, following the Version 7 format.</summary>
            <returns>A new <see cref="T:System.Guid" /> according to RFC 9562, following the Version 7 format.</returns>
        </member>
        <member name="M:Polyfills.GuidPolyfill.CreateVersion7(System.DateTimeOffset)">
            <summary>Creates a new <see cref="T:System.Guid" /> according to RFC 9562, following the Version 7 format.</summary>
            <param name="timestamp">The date time offset used to determine the Unix Epoch timestamp.</param>
            <returns>A new <see cref="T:System.Guid" /> according to RFC 9562, following the Version 7 format.</returns>
        </member>
        <member name="M:Polyfills.BytePolyfill.TryParse(System.String,System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DoublePolyfill.TryParse(System.String,System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.IntPolyfill.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.LongPolyfill.TryParse(System.String,System.IFormatProvider,System.Int64@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.SBytePolyfill.TryParse(System.String,System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ShortPolyfill.TryParse(System.String,System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UIntPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ULongPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UShortPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.PathPolyfill.EndsInDirectorySeparator(System.String)">
            <summary>
            Returns a value that indicates whether the specified path ends in a directory separator.
            </summary>
            <param name="path">The path to analyze.</param>
            <returns>true if the path ends in a directory separator; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.PathPolyfill.TrimEndingDirectorySeparator(System.String)">
            <summary>
            Trims one trailing directory separator beyond the root of the specified path.
            </summary>
            <param name="path">The path to trim.</param>
            <returns>The path without any trailing directory separators.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Polyfills.PathPolyfill.Exists(System.String)" -->
        <member name="M:Polyfills.Polyfill.UnsafeRegister(System.Threading.CancellationToken,System.Action{System.Object},System.Object)">
            <summary>
            Registers a delegate that will be called when this
            <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.
            </summary>
            <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</param>
            <param name="state">The state to pass to the <paramref name="callback"/> when the delegate is invoked.  This may be null.</param>
            <returns>The <see cref="T:System.Threading.CancellationTokenRegistration"/> instance that can
            be used to unregister the callback.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Register(System.Threading.CancellationToken,System.Action{System.Object,System.Threading.CancellationToken},System.Object)">
            <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</summary>
            <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</param>
            <param name="state">The state to pass to the <paramref name="callback"/> when the delegate is invoked.  This may be null.</param>
            <returns>The <see cref="T:System.Threading.CancellationTokenRegistration"/> instance that can be used to unregister the callback.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.UnsafeRegister(System.Threading.CancellationToken,System.Action{System.Object,System.Threading.CancellationToken},System.Object)">
            <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</summary>
            <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</param>
            <param name="state">The state to pass to the <paramref name="callback"/> when the delegate is invoked.  This may be null.</param>
            <returns>The <see cref="T:System.Threading.CancellationTokenRegistration"/> instance that can be used to unregister the callback.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.CancelAsync(System.Threading.CancellationTokenSource)">
            <summary>Communicates a request for cancellation asynchronously.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.Clear``1(System.Collections.Concurrent.ConcurrentBag{``0})">
            <summary>
            Removes all values from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetOrAdd``3(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``2,``1},``2)">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <param name="factoryArgument">An argument value to pass into <paramref name="valueFactory"/>.</param>
            <returns>The value for the key. This will be either the existing value for the key if the
            key is already in the dictionary, or the new value for the key as returned by valueFactory
            if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Clear``1(System.Collections.Concurrent.ConcurrentQueue{``0})">
            <summary>
            Removes all values from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.HasSingleTarget(System.Delegate)">
            <summary>
            Gets a value that indicates whether the Delegate has a single invocation target.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> wrapper for the current dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary to wrap.</param>
            <returns>An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Attempts to add the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. It can be <see langword="null"/>.</param>
            <returns><c>true</c> if the key/value pair was added to the dictionary successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Remove``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            Removes the value with the specified key from the <see cref="T:System.Collections.Generic.Dictionary`2"/>, and copies the element
            to the value parameter.
            </summary>
            <param name="target">A dictionary with keys of type TKey and values of type TValue.</param>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The removed element.</param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns><code>true</code> if the element is successfully found and removed; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.TryGetValue``1(System.Collections.Generic.HashSet{``0},``0,``0@)">
            <summary>
             Searches the set for a given value and returns the equal value it finds, if any.
            </summary>
            <param name="equalValue">The value to search for.</param>
            <param name="actualValue">The value from the set that the search found, or the default value of T when the search yielded no match.</param>
            <returns>A value indicating whether the search was successful.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetStreamAsync(System.Net.Http.HttpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetStreamAsync(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetByteArrayAsync(System.Net.Http.HttpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetByteArrayAsync(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetStringAsync(System.Net.Http.HttpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetStringAsync(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ReadAsStreamAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Serializes the HTTP content and returns a stream that represents the content.
            </summary>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ReadAsByteArrayAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Serializes the HTTP content to a byte array as an asynchronous operation.
            </summary>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ReadAsStringAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Serializes the HTTP content to a string as an asynchronous operation.
            </summary>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``2,System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split the elements of a sequence into chunks of size at most <paramref name="size"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to chunk.</param>
            <param name="size">Maximum size of each chunk.</param>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements the input sequence split into chunks of size <paramref name="size"/>.
            </returns>
        </member>
        <member name="M:Polyfills.Polyfill.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Returns distinct elements from a sequence according to a specified key selector function.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of key to distinguish elements by.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>Returns distinct elements from a sequence according to a specified key selector function.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of key to distinguish elements by.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Produces a set items excluding <paramref name="item"/> by using the default equality comparer to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces a set items excluding <paramref name="item"/> by using <paramref name="comparer"/> to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Produces the set difference of two sequences by <paramref name="comparer"/> to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1})">
            <summary>
            Produces the set difference of two sequences according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequence.</typeparam>
            <typeparam name="TKey">The type of key to identify elements by.</typeparam>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose keys that are not also in <paramref name="second"/> will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose keys that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set difference of two sequences according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequence.</typeparam>
            <typeparam name="TKey">The type of key to identify elements by.</typeparam>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose keys that are not also in <paramref name="second"/> will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose keys that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns><paramref name="defaultValue" /> if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns><paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns><paramref name="defaultValue" /> if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns><paramref name="defaultValue" /> if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Returns the maximum value in a generic sequence.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare values.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The value with the maximum key in the sequence.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>Returns the maximum value in a generic sequence according to a specified key selector function.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
            <returns>The value with the maximum key in the sequence.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Returns the minimum value in a generic sequence.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare values.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the minby value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The value with the minimum key in the sequence.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>Returns the minimum value in a generic sequence according to a specified key selector function.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
            <returns>The value with the minimum key in the sequence.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns>The single element of the input sequence that satisfies the condition, or <paramref name="defaultValue" /> if no such element is found.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns>The single element of the input sequence, or <paramref name="defaultValue" /> if the sequence contains no elements.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a new enumerable collection that contains the elements from source with the last count elements of the
            source collection omitted.
            </summary>
            <param name="source">An enumerable collection instance.</param>
            <param name="count">The number of elements to omit from the end of the collection.</param>
            <typeparam name="TSource">The type of the elements in the enumerable collection.</typeparam>
            <returns>A new enumerable collection that contains the elements from source minus count elements from the end
            of the collection.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Take``1(System.Collections.Generic.IEnumerable{``0},System.Range)">
            <summary>Returns a specified range of contiguous elements from a sequence.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="range">The range of elements to return, which has start and end indexes either from the start or the end.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified <paramref name="range" /> of elements from the <paramref name="source" /> sequence.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a new enumerable collection that contains the last count elements from source.
            </summary>
            <param name="source">An enumerable collection instance.</param>
            <param name="count">The number of elements to take from the end of the collection.</param>
            <typeparam name="TSource">The type of the elements in the enumerable collection.</typeparam>
            <returns>A new enumerable collection that contains the last count elements from source.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Polyfills.Polyfill.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" -->
        <member name="M:Polyfills.Polyfill.TryGetNonEnumeratedCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
              Attempts to determine the number of elements in a sequence without forcing an enumeration.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">A sequence that contains elements to be counted.</param>
            <param name="count">
                When this method returns, contains the count of <paramref name="source" /> if successful,
                or zero if the method failed to determine the count.</param>
            <returns>
              <see langword="true" /> if the count of <paramref name="source"/> can be determined without enumeration;
              otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Polyfills.Polyfill.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Produces a sequence of tuples with elements from the three specified sequences.
            </summary>
            <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
            <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
            <typeparam name="TThird">The type of the elements of the third input sequence.</typeparam>
            <param name="first">The first sequence to merge.</param>
            <param name="second">The second sequence to merge.</param>
            <param name="third">The third sequence to merge.</param>
            <returns>A sequence of tuples with elements taken from the first, second, and third sequences, in that order.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Produces a sequence of tuples with elements from the two specified sequences.
            </summary>
            <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
            <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
            <param name="first">The first sequence to merge.</param>
            <param name="second">The second sequence to merge.</param>
            <returns>A sequence of tuples with elements taken from the first, and second sequences, in that order.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Tries to get the value associated with the specified key in the dictionary.
            </summary>
            <param name="target">A dictionary with keys of type TKey and values of type TValue.</param>
            <param name="key">The key of the value to get.</param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns>
            A TValue instance. When the method is successful, the returned object is the value associated with
            the specified key. When the method fails, it returns the default value for TValue.
            </returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Tries to get the value associated with the specified key in the dictionary.
            </summary>
            <param name="target">A dictionary with keys of type TKey and values of type TValue.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">A dictionary with keys of type TKey and values of type TValue.</param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns>
            A TValue instance. When the method is successful, the returned object is the value associated with
            the specified key. When the method fails, it returns the default value for TValue.
            </returns>
        </member>
        <member name="M:Polyfills.Polyfill.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstructs the current <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
            <param name="key">The key of the current <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <param name="value">The value of the current <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
        </member>
        <member name="M:Polyfills.Polyfill.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</summary>
            <returns>An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.IList`1" />.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Nanoseconds(System.TimeSpan)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Nanosecond(System.DateTime)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Nanosecond(System.DateTimeOffset)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microseconds(System.TimeSpan)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microsecond(System.DateTime)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microsecond(System.DateTimeOffset)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AddMicroseconds(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AddMicroseconds(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)">
            <summary>
            Instructs the Process component to wait for the associated process to exit, or
            for the <paramref name="cancellationToken"/> to be canceled.
            </summary>
            <returns>
            A task that will complete when the process has exited, cancellation has been requested,
            or an error occurs.
            </returns>
        </member>
        <member name="M:Polyfills.Polyfill.Shuffle``1(System.Random,``0[])">
            <summary>
            Performs an in-place shuffle of an array.
            </summary>
            <param name="index">The array to shuffle.</param>
            <typeparam name="T">The type of array.</typeparam>
        </member>
        <member name="M:Polyfills.Polyfill.GetKeyAtIndex``2(System.Collections.Generic.SortedList{``0,``1},System.Int32)">
            <summary>
            Gets the key corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the key within the entire <see cref="T:System.Collections.Generic.SortedList`2"/>.</param>
            <returns>The key corresponding to the specified index.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetValueAtIndex``2(System.Collections.Generic.SortedList{``0,``1},System.Int32)">
            <summary>
            Gets the value corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the value within the entire <see cref="T:System.Collections.Generic.SortedList`2"/>.</param>
            <returns>The value corresponding to the specified index.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified
            cancellation token. Both streams positions are advanced by the number of bytes copied.
            </summary>
            <param name="destination">The stream to which the contents of the current stream will be copied.</param>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task that represents the asynchronous copy operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetHashCode(System.String,System.StringComparison)">
            <summary>
            Returns the hash code for this string using the specified rules.
            </summary>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Contains(System.String,System.Char,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified character occurs within this string, using the specified comparison rules.
            </summary>
            <param name="value">The character to seek.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>true if the value parameter occurs within this string; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.IndexOf(System.String,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character in this string. A parameter specifies the type of search to use for the specified character.
            </summary>
            <param name="value">The character to seek.</param>
            <param name="comparisonType">An enumeration value that specifies the rules for the search.</param>
            <returns>The zero-based index of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified string occurs within this string, using the specified comparison rules.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>true if the value parameter occurs within this string, or if value is the empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.StartsWith(System.String,System.Char)">
            <summary>
            Determines whether this string instance starts with the specified character.
            </summary>
            <param name="value">The character to compare.</param>
            <returns>true if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.EndsWith(System.String,System.Char)">
            <summary>
            Returns a value indicating whether a specified character occurs within this string.
            </summary>
            <param name="value">The character to seek.</param>
            <returns>true if the value parameter occurs within this string; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Split(System.String,System.Char,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on a specified delimiting character and, optionally,
            options. Splits a string into a maximum number of substrings based on the provided character separator,
            optionally omitting empty substrings from the result.
            </summary>
            <param name="separator">A character that delimits the substrings in this instance.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim substrings
            and include empty substrings.</param>
            <returns>An array that contains at most count substrings from this instance that are delimited by separator.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Split(System.String,System.Char,System.Int32,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on a specified delimiting character and, optionally,
            options. Splits a string into a maximum number of substrings based on the provided character separator,
            optionally omitting empty substrings from the result.
            </summary>
            <param name="separator">A character that delimits the substrings in this instance.</param>
            <param name="count">The maximum number of elements expected in the array.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim substrings
            and include empty substrings.</param>
            <returns>An array that contains at most count substrings from this instance that are delimited by separator.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Contains(System.String,System.Char)">
            <summary>
            Returns a value indicating whether a specified character occurs within this string.
            </summary>
            <returns>true if the value parameter occurs within this string; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ReplaceLineEndings(System.String,System.String)">
            <summary>
            Replaces all newline sequences in the current string with <paramref name="replacementText"/>.
            </summary>
            <returns>
            A string whose contents match the current string, but with all newline sequences replaced
            with <paramref name="replacementText"/>.
            </returns>
        </member>
        <member name="M:Polyfills.Polyfill.ReplaceLineEndings(System.String)">
            <summary>
            Replaces all newline sequences in the current string with <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <returns>
            A string whose contents match the current string, but with all newline sequences replaced
            with <see cref="P:System.Environment.NewLine"/>.
            </returns>
        </member>
        <member name="M:Polyfills.Polyfill.Append(System.Text.StringBuilder,System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Appends a copy of a substring within a specified string builder to this instance.
            </summary>
            <param name="value">The string builder that contains the substring to append.</param>
            <param name="startIndex">The starting position of the substring within value.</param>
            <param name="count">The number of characters in value to append.</param>
            <returns>A reference to this instance after the append operation is completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.String,System.String[])">
            <summary>Concatenates the strings of the provided array, using the specified separator between each string, then appends the result to the current instance of the string builder.</summary>
            <param name="separator">The string to use as a separator. separator is included in the joined strings only if values has more than one element.</param>
            <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>Concatenates the string representations of the elements in the provided array of objects, using the specified separator between each member, then appends the result to the current instance of the string builder.</summary>
            <param name="separator">The string to use as a separator. separator is included in the joined strings only if values has more than one element.</param>
            <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.Char,System.String[])">
            <summary>Concatenates the strings of the provided array, using the specified char separator between each string, then appends the result to the current instance of the string builder.</summary>
            <param name="separator">The character to use as a separator. separator is included in the joined strings only if values has more than one element.</param>
            <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.Char,System.Object[])">
            <summary>Concatenates the string representations of the elements in the provided array of objects, using the specified char separator between each member, then appends the result to the current instance of the string builder.</summary>
            <param name="separator">The character to use as a separator. separator is included in the joined strings only if values has more than one element.</param>
            <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin``1(System.Text.StringBuilder,System.Char,``0[])">
            <summary>Concatenates and appends the members of a collection, using the specified char separator between each member.</summary>
            <param name="separator">The character to use as a separator. separator is included in the joined strings only if values has more than one element.</param>
            <param name="values">A collection that contains the objects to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin``1(System.Text.StringBuilder,System.String,``0[])">
            <summary>Concatenates and appends the members of a collection, using the specified char separator between each member.</summary>
            <param name="separator">The string to use as a separator. separator is included in the concatenated and appended strings only if values has more than one element.</param>
            <param name="values">A collection that contains the objects to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.</summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes or when the specified timeout expires.</summary>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync(System.Threading.Tasks.Task,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, when the specified timeout expires, or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.</summary>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, or when the specified timeout expires.
            </summary>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, when the specified timeout expires, or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.
            </summary>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.SetCanceled``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.CancellationToken)">
            <summary>
            Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state
            using the specified token.
            </summary>
            <param name="cancellationToken">The cancellation token with which to cancel the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
        </member>
        <member name="M:Polyfills.Polyfill.ReadToEndAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <c>TResult</c> parameter contains
            a string with the characters from the current position to the end of the stream.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ReadLineAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads a line of characters asynchronously and returns the data as a string.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A value task that represents the asynchronous read operation. The value of the <c>TResult</c>
            parameter contains the next line from the text reader, or is <see langword="null" /> if all of the characters have been read.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.FlushAsync(System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Asynchronously clears all buffers for the current writer and causes any buffered data to
            be written to the underlying device.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous flush operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Write(System.IO.TextWriter,System.Text.StringBuilder)">
            <summary>
            Equivalent to Write(stringBuilder.ToString()) however it uses the
            StringBuilder.GetChunks() method to avoid creating the intermediate string
            </summary>
            <param name="value">The string (as a StringBuilder) to write to the stream</param>
        </member>
        <member name="M:Polyfills.Polyfill.WriteAsync(System.IO.TextWriter,System.Text.StringBuilder,System.Threading.CancellationToken)">
            <summary>
            Equivalent to WriteAsync(stringBuilder.ToString()) however it uses the
            StringBuilder.GetChunks() method to avoid creating the intermediate string
            </summary>
            <param name="value">The string (as a StringBuilder) to write to the stream</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        </member>
        <member name="M:Polyfills.Polyfill.IsGenericMethodParameter(System.Type)">
            <summary>
            Gets a value that indicates whether the current Type represents a type parameter in the definition of a generic method.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableTo``1(System.Type)">
            <summary>
            Generic version of Type.IsAssignableTo https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignableto.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableFrom``1(System.Type)">
            <summary>
            Generic version of Type.IsAssignableFrom https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignablefrom.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableTo(System.Type,System.Type)">
            <summary>
            Determines whether the current type can be assigned to a variable of the specified targetType.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetMemberWithSameMetadataDefinitionAs(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Searches for the MemberInfo on the current Type that matches the specified MemberInfo.
            </summary>
            <param name="type">The MemberInfo to find on the current Type.</param>
            <param name="member">The MemberInfo to find on the current Type.</param>
            <returns>An object representing the member on the current Type that matches the specified member.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XDocument,System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to output the XML to.
            </param>
            <param name="cancellationToken">
            A cancellation token.
            </param>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XDocument,System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XDocument,System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">
            The <see cref="T:System.IO.TextWriter"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="P:Polyfills.RandomPolyfill.Shared">
            <summary>
            Provides a thread-safe Random instance that may be used concurrently from any thread.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.String[])">
            <summary>
            Concatenates an array of strings, using the specified separator between each member.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.Object[])">
            <summary>
            Concatenates the string representations of an array of objects, using the specified separator between each member.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.String[],System.Int32,System.Int32)">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Builder.ConfigurationOptions">
            <summary>
            Represents the configuration options for the builder.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Builder.ConfigurationOptions.ConfigurationSources">
            <summary>
            Gets the configuration sources options.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Builder.ConfigurationSourcesOptions">
            <summary>
            Represents the options for configuration sources.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Builder.ConfigurationSourcesOptions.RegisterEnvironmentVariablesConfigurationSource">
            <summary>
            Gets or sets a value indicating whether to register the environment variables configuration source.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Builder.ITestApplication">
            <summary>
            Represents an interface for a test application.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Builder.ITestApplication.RunAsync">
            <summary>
            Runs the test application asynchronously.
            </summary>
            <returns>The exit code of the test application.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Builder.ITestApplicationBuilder">
            <summary>
            Represents an interface for building test applications.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.TestHost">
            <summary>
            Gets the test host manager.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.TestHostControllers">
            <summary>
            Gets the test host controllers manager.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.CommandLine">
            <summary>
            Gets the command line manager.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.RegisterTestFramework(System.Func{System.IServiceProvider,Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapabilities},System.Func{Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapabilities,System.IServiceProvider,Microsoft.Testing.Platform.Extensions.TestFramework.ITestFramework})">
            <summary>
            Registers a test framework with the application builder.
            </summary>
            <param name="capabilitiesFactory">The factory method for creating test framework capabilities.</param>
            <param name="adapterFactory">The factory method for creating a test framework adapter.</param>
            <returns>The updated test application builder.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.BuildAsync">
            <summary>
            Builds the test application asynchronously.
            </summary>
            <returns>A task representing the asynchronous operation. The task result is the built test application.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Builder.TestApplication">
            <summary>
            Represents a test application.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Builder.TestApplication.CreateServerModeBuilderAsync(System.String[],Microsoft.Testing.Platform.Builder.TestApplicationOptions)">
            <summary>
            Creates a server mode builder asynchronously.
            </summary>
            <param name="args">The command line arguments.</param>
            <param name="testApplicationOptions">The test application options.</param>
            <returns>The task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Builder.TestApplication.CreateBuilderAsync(System.String[],Microsoft.Testing.Platform.Builder.TestApplicationOptions)">
            <summary>
            Creates a builder asynchronously.
            </summary>
            <param name="args">The command line arguments.</param>
            <param name="testApplicationOptions">The test application options.</param>
            <returns>The task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Builder.TestApplication.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.Builder.TestApplication.RunAsync">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Testing.Platform.Builder.TestApplicationBuilder">
            <summary>
            A builder for test applications and services.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Builder.TestApplicationOptions">
            <summary>
            Represents the options for a test application.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Builder.TestApplicationOptions.EnableTelemetry">
            <summary>
            Gets or sets a value indicating whether telemetry is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Builder.TestApplicationOptions.Configuration">
            <summary>
            Gets the configuration options for the test application.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Capabilities.ICapabilities`1">
            <summary>
            Represents the capabilities provided by an extension.
            </summary>
            <typeparam name="TCapability">The type of capability.</typeparam>
        </member>
        <member name="P:Microsoft.Testing.Platform.Capabilities.ICapabilities`1.Capabilities">
            <summary>
            Gets the collection of capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Capabilities.ICapability">
            <summary>
            Represents a capability.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Capabilities.TestFramework.IBannerMessageOwnerCapability">
             <summary>
             An optional test framework capability that allows the test framework to provide the banner message to the platform.
             If the message is null or if the capability is not present, the platform will use its default banner message.
            
             This capability implementation allows to abstract away the various conditions that the test framework may need to consider
             to decide whether or not the banner message should be displayed.
             </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Capabilities.TestFramework.IBannerMessageOwnerCapability.GetBannerMessageAsync">
            <summary>
            Process the banner message and return the message to be displayed.
            </summary>
            <returns>
            The banner message to be displayed or <c>null</c> to use the default banner message.
            </returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Capabilities.TestFramework.IGracefulStopTestExecutionCapability">
            <summary>
            A capability to support stopping test execution gracefully, without cancelling/aborting everything.
            This is used to support '--maximum-failed-tests'.
            </summary>
            <remarks>
            Test frameworks can choose to run any needed cleanup when cancellation is requested.
            </remarks>
        </member>
        <member name="T:Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapabilities">
            <summary>
            Represents the capabilities of a test framework.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Capabilities.TestFramework.TestFrameworkCapabilities">
            <summary>
            Represents the capabilities of a test framework.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Capabilities.TestFramework.TestFrameworkCapabilities.#ctor(System.Collections.Generic.IReadOnlyCollection{Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapability})">
            <summary>
            Represents the capabilities of a test framework.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Capabilities.TestFramework.TestFrameworkCapabilities.#ctor(Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapability[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Capabilities.TestFramework.TestFrameworkCapabilities"/> class.
            </summary>
            <param name="capabilities">The test framework capabilities.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Capabilities.TestFramework.TestFrameworkCapabilities.Capabilities">
            <summary>
            Gets the test framework capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapability">
            <summary>
            Represents a capability for a test framework.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity">
            <summary>
            Represents the arity (minimum and maximum number of arguments) for a command line argument.
            </summary>
            <remarks>
            This is taken from https://learn.microsoft.com/dotnet/standard/commandline/syntax#argument-arity.
            </remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents the arity (minimum and maximum number of arguments) for a command line argument.
            </summary>
            <remarks>
            This is taken from https://learn.microsoft.com/dotnet/standard/commandline/syntax#argument-arity.
            </remarks>
        </member>
        <member name="F:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.Zero">
            <summary>
            Represents an argument arity of zero.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.ZeroOrOne">
            <summary>
            Represents an argument arity of zero or one.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.ZeroOrMore">
            <summary>
            Represents an argument arity of zero or more.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.OneOrMore">
            <summary>
            Represents an argument arity of one or more.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.ExactlyOne">
            <summary>
            Represents an argument arity of exactly one.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.Min">
            <summary>
            Gets the minimum number of arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.Max">
            <summary>
            Gets the maximum number of arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.op_Equality(Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity,Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity)">
            <summary>
            Determines whether two instances of <see cref="T:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity"/> are equal.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity"/> to compare.</param>
            <param name="right">The second <see cref="T:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.op_Inequality(Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity,Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity)">
            <summary>
            Determines whether two instances of <see cref="T:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity"/> are not equal.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity"/> to compare.</param>
            <param name="right">The second <see cref="T:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity"/> to compare.</param>
            <returns><c>true</c> if the instances are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity.Equals(Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption">
            <summary>
            Represents a command line option.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption.#ctor(System.String,System.String,Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption"/> class.
            </summary>
            <param name="name">The name of the command line option.</param>
            <param name="description">The description of the command line option.</param>
            <param name="arity">The arity of the command line option.</param>
            <param name="isHidden">Indicates whether the command line option is hidden.</param>
            <param name="isBuiltIn">Indicates whether the command line option is built-in.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption.#ctor(System.String,System.String,Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption"/> class.
            </summary>
            <param name="name">The name of the command line option.</param>
            <param name="description">The description of the command line option.</param>
            <param name="arity">The arity of the command line option.</param>
            <param name="isHidden">Indicates whether the command line option is hidden.</param>
            <remarks>
            This ctor is public and used by non built-in extension, we need to know if the extension is built-in or not
            to correctly handle the --internal- prefix.
            </remarks>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption.Name">
            <summary>
            Gets the name of the command line option.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption.Description">
            <summary>
            Gets the description of the command line option.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption.Arity">
            <summary>
            Gets the arity of the command line option.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption.IsHidden">
            <summary>
            Gets a value indicating whether the command line option is hidden.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption.Equals(Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.CommandLine.ICommandLineOptionsProvider">
            <summary>
            Represents an interface for providing command line options.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CommandLine.ICommandLineOptionsProvider.GetCommandLineOptions">
            <summary>
            Gets the command line options provided by this extension.
            </summary>
            <returns>The collection of command line options.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CommandLine.ICommandLineOptionsProvider.ValidateOptionArgumentsAsync(Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption,System.String[])">
            <summary>
            Validate the arguments for the given command option.
            </summary>
            <param name="commandOption">The command option.</param>
            <param name="arguments">The arguments provided for the command option.</param>
            <returns>The result of the validation.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CommandLine.ICommandLineOptionsProvider.ValidateCommandLineOptionsAsync(Microsoft.Testing.Platform.CommandLine.ICommandLineOptions)">
            <summary>
            Validate that the command line options are valid in the context of each other.
            </summary>
            <param name="commandLineOptions">All command line options (including the ones provided by other extensions) are provided.</param>
            <returns>The result of the validation.</returns>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.AbortForMaxFailedTestsExtension.Uid">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.AbortForMaxFailedTestsExtension.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.AbortForMaxFailedTestsExtension.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.AbortForMaxFailedTestsExtension.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.AbortForMaxFailedTestsExtension.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory`1">
            <summary>
            Represents a factory for creating composite extensions.
            </summary>
            <typeparam name="TExtension">The type of the extension.</typeparam>
            <remarks>
            This helper type is used to create a composite extension that is composed of multiple extensions without having to
            handle either the communication between the extensions or the lifetime of the extensions instances.
            </remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory`1.#ctor(System.Func{System.IServiceProvider,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory`1"/> class.
            </summary>
            <param name="factory">The factory function that creates the extension with a service provider.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory`1"/> class.
            </summary>
            <param name="factory">The factory function that creates the extension.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory`1.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory`1.Microsoft#Testing#Platform#Extensions#ICompositeExtensionFactory#GetInstance(System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.IAsyncCleanableExtension">
            <summary>
            Represents an interface for asynchronously cleaning up resources.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.IAsyncCleanableExtension.CleanupAsync">
            <summary>
            Asynchronously cleans up the resources.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.IAsyncInitializableExtension">
            <summary>
            Represents an interface for asynchronously initializing an extension.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.IAsyncInitializableExtension.InitializeAsync">
            <summary>
            Asynchronously initializes the extension.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.IExtension">
            <summary>
            The interface that all extensions must implement. Extensions are a special kind of
            services that have some identity.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.IExtension.Uid">
            <summary>
            Gets the unique identifier for the extension.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.IExtension.Version">
            <summary>
            Gets the version of the extension (ideally semantic version).
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.IExtension.DisplayName">
            <summary>
            Gets the display name of the extension.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.IExtension.Description">
            <summary>
            Gets the description of the extension.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.IExtension.IsEnabledAsync">
            <summary>
            Controls whether the extension is enabled or not. This is useful for extensions
            that are always registered but only enabled when certain conditions are met.
            For example, an extension that would want to be run only when its associated
            command line option is provided by the user.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.ValidationResult">
            <summary>
            Represents the result of a validation operation.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.ValidationResult.ValidTask">
            <summary>
            Gets a task that represents a valid validation result.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.ValidationResult.IsValid">
            <summary>
            Gets a value indicating whether the validation result is valid.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.ValidationResult.ErrorMessage">
            <summary>
            Gets the error message associated with an invalid validation result.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.ValidationResult.Valid">
            <summary>
            Creates a valid validation result.
            </summary>
            <returns>A valid validation result.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.ValidationResult.Invalid(System.String)">
            <summary>
            Creates an invalid validation result with the specified error message.
            </summary>
            <param name="errorMessage">The error message.</param>
            <returns>An invalid validation result.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.ValidationResult.InvalidTask(System.String)">
            <summary>
            Creates a task that represents an invalid validation result with the specified error message.
            </summary>
            <param name="errorMessage">The error message.</param>
            <returns>A task that represents an invalid validation result.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.DataWithSessionUid">
            <summary>
            Represents data with a session UID.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.DataWithSessionUid.#ctor(System.String,System.String,Microsoft.Testing.Platform.TestHost.SessionUid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.DataWithSessionUid"/> class.
            </summary>
            <param name="displayName">The display name of the data.</param>
            <param name="description">The description of the data.</param>
            <param name="sessionUid">The session UID.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.DataWithSessionUid.SessionUid">
            <summary>
            Gets the session UID.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.DataWithSessionUid.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.FileArtifact">
            <summary>
            Represents a file artifact.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.FileArtifact.#ctor(System.IO.FileInfo,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.FileArtifact"/> class.
            </summary>
            <param name="fileInfo">The file information.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.FileArtifact.FileInfo">
            <summary>
            Gets the file information.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.FileArtifact.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.SessionFileArtifact">
            <summary>
            Represents a session file artifact.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.SessionFileArtifact.#ctor(Microsoft.Testing.Platform.TestHost.SessionUid,System.IO.FileInfo,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.SessionFileArtifact"/> class.
            </summary>
            <param name="sessionUid">The session UID.</param>
            <param name="fileInfo">The file information.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.SessionFileArtifact.FileInfo">
            <summary>
            Gets the file information.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.SessionFileArtifact.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.TestNodeFileArtifact">
            <summary>
            Represents a test node file artifact.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TestNodeFileArtifact.#ctor(Microsoft.Testing.Platform.TestHost.SessionUid,Microsoft.Testing.Platform.Extensions.Messages.TestNode,System.IO.FileInfo,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TestNodeFileArtifact"/> class.
            </summary>
            <param name="sessionUid">The session UID.</param>
            <param name="testNode">The test node.</param>
            <param name="fileInfo">The file information.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TestNodeFileArtifact.TestNode">
            <summary>
            Gets the test node.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TestNodeFileArtifact.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.IData">
            <summary>
            Represents the data interface.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.IData.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.IData.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.IDataProducer">
            <summary>
            Represents a data producer extension.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.IDataProducer.DataTypesProduced">
            <summary>
            Gets the types of data produced by the data producer.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.IProperty">
            <summary>
            The interface that every test node property must implement.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.KeyValuePairStringProperty">
            <summary>
            Node property that represents a key-value pair.
            </summary>
            <param name="Key">Key name.</param>
            <param name="Value">Key value.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.KeyValuePairStringProperty.#ctor(System.String,System.String)">
            <summary>
            Node property that represents a key-value pair.
            </summary>
            <param name="Key">Key name.</param>
            <param name="Value">Key value.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.KeyValuePairStringProperty.Key">
            <summary>Key name.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.KeyValuePairStringProperty.Value">
            <summary>Key value.</summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.TestNodeStateProperty">
            <summary>
            Base class for test node state properties.
            </summary>
            <param name="Explanation">Textual explanation of the node state.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TestNodeStateProperty.#ctor(System.String)">
            <summary>
            Base class for test node state properties.
            </summary>
            <param name="Explanation">Textual explanation of the node state.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TestNodeStateProperty.Explanation">
            <summary>Textual explanation of the node state.</summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.DiscoveredTestNodeStateProperty">
            <summary>
            Property that represents test node that has been discovered.
            </summary>
            <param name="Explanation">Textual explanation of the node.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.DiscoveredTestNodeStateProperty.#ctor(System.String)">
            <summary>
            Property that represents test node that has been discovered.
            </summary>
            <param name="Explanation">Textual explanation of the node.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.DiscoveredTestNodeStateProperty.CachedInstance">
            <summary>
            Gets cached instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.DiscoveredTestNodeStateProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.InProgressTestNodeStateProperty">
            <summary>
            Property that represents a test node that is being executed.
            </summary>
            <param name="Explanation">Textual explanation of the node.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.InProgressTestNodeStateProperty.#ctor(System.String)">
            <summary>
            Property that represents a test node that is being executed.
            </summary>
            <param name="Explanation">Textual explanation of the node.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.InProgressTestNodeStateProperty.CachedInstance">
            <summary>
            Gets cached instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.InProgressTestNodeStateProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.PassedTestNodeStateProperty">
            <summary>
            Property that represents a test node that has been executed and passed.
            </summary>
            <param name="Explanation">Textual explanation of the node.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.PassedTestNodeStateProperty.#ctor(System.String)">
            <summary>
            Property that represents a test node that has been executed and passed.
            </summary>
            <param name="Explanation">Textual explanation of the node.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.SkippedTestNodeStateProperty">
            <summary>
            Property that represents a test node that has been skipped.
            </summary>
            <param name="Explanation">Textual explanation of the node.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.SkippedTestNodeStateProperty.#ctor(System.String)">
            <summary>
            Property that represents a test node that has been skipped.
            </summary>
            <param name="Explanation">Textual explanation of the node.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.FailedTestNodeStateProperty">
            <summary>
            Property that represents a test node that has been failed.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.FailedTestNodeStateProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.FailedTestNodeStateProperty"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.FailedTestNodeStateProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.FailedTestNodeStateProperty"/> class.
            </summary>
            <param name="explanation">Failure explanation.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.FailedTestNodeStateProperty.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.FailedTestNodeStateProperty"/> class.
            </summary>
            <param name="exception">Failure exception.</param>
            <param name="explanation">Failure explanation.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.FailedTestNodeStateProperty.Exception">
            <summary>
            Gets the failure exception.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.ErrorTestNodeStateProperty">
            <summary>
            Property that represents an eventual error in the test node.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.ErrorTestNodeStateProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.ErrorTestNodeStateProperty"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.ErrorTestNodeStateProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.ErrorTestNodeStateProperty"/> class.
            </summary>
            <param name="explanation">Error explanation.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.ErrorTestNodeStateProperty.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.ErrorTestNodeStateProperty"/> class.
            </summary>
            <param name="exception">Error exception.</param>
            <param name="explanation">Error explanation.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.ErrorTestNodeStateProperty.Exception">
            <summary>
            Gets the error exception.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.TimeoutTestNodeStateProperty">
            <summary>
            Property that represents an eventual timeout in the test node.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TimeoutTestNodeStateProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TimeoutTestNodeStateProperty"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TimeoutTestNodeStateProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TimeoutTestNodeStateProperty"/> class.
            </summary>
            <param name="explanation">Timeout explanation.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TimeoutTestNodeStateProperty.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TimeoutTestNodeStateProperty"/> class.
            </summary>
            <param name="exception">Timeout exception.</param>
            <param name="explanation">Timeout explanation.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TimeoutTestNodeStateProperty.Exception">
            <summary>
            Gets get the timeout exception.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TimeoutTestNodeStateProperty.Timeout">
            <summary>
            Gets get the timeout Timespan.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.CancelledTestNodeStateProperty">
            <summary>
            Property that represents an eventual cancellation of a test node.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.CancelledTestNodeStateProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.CancelledTestNodeStateProperty"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.CancelledTestNodeStateProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.CancelledTestNodeStateProperty"/> class.
            </summary>
            <param name="explanation">Cancellation explanation.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.CancelledTestNodeStateProperty.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.CancelledTestNodeStateProperty"/> class.
            </summary>
            <param name="exception">Cancellation exception.</param>
            <param name="explanation">Cancellation explanation.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.CancelledTestNodeStateProperty.Exception">
            <summary>
            Gets the cancellation exception.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.TimingInfo">
            <summary>
            Information about the timing of a test node.
            </summary>
            <param name="StartTime">Test start time.</param>
            <param name="EndTime">Test end time.</param>
            <param name="Duration">Total test duration.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TimingInfo.#ctor(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Information about the timing of a test node.
            </summary>
            <param name="StartTime">Test start time.</param>
            <param name="EndTime">Test end time.</param>
            <param name="Duration">Total test duration.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TimingInfo.StartTime">
            <summary>Test start time.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TimingInfo.EndTime">
            <summary>Test end time.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TimingInfo.Duration">
            <summary>Total test duration.</summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.StepTimingInfo">
            <summary>
            Information about the timing of a test node step.
            </summary>
            <param name="Id">Step identifier.</param>
            <param name="Description">Step description.</param>
            <param name="Timing">Step timing info.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.StepTimingInfo.#ctor(System.String,System.String,Microsoft.Testing.Platform.Extensions.Messages.TimingInfo)">
            <summary>
            Information about the timing of a test node step.
            </summary>
            <param name="Id">Step identifier.</param>
            <param name="Description">Step description.</param>
            <param name="Timing">Step timing info.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.StepTimingInfo.Id">
            <summary>Step identifier.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.StepTimingInfo.Description">
            <summary>Step description.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.StepTimingInfo.Timing">
            <summary>Step timing info.</summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.TimingProperty">
            <summary>
            Property that represents the timing of a test node.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TimingProperty.#ctor(Microsoft.Testing.Platform.Extensions.Messages.TimingInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TimingProperty"/> class.
            </summary>
            <param name="globalTiming">Timing info.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TimingProperty.#ctor(Microsoft.Testing.Platform.Extensions.Messages.TimingInfo,Microsoft.Testing.Platform.Extensions.Messages.StepTimingInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TimingProperty"/> class.
            </summary>
            <param name="globalTiming">Timing info.</param>
            <param name="stepTimings">Steps timing.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TimingProperty.GlobalTiming">
            <summary>
            Gets the global timing info.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TimingProperty.StepTimings">
            <summary>
            Gets the steps timing info.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.LinePosition">
            <summary>
            Line position in a file.
            </summary>
            <param name="Line">Line number.</param>
            <param name="Column">Column number.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.LinePosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Line position in a file.
            </summary>
            <param name="Line">Line number.</param>
            <param name="Column">Column number.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.LinePosition.Line">
            <summary>Line number.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.LinePosition.Column">
            <summary>Column number.</summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.LinePositionSpan">
            <summary>
            Line position span in a file.
            </summary>
            <param name="Start">Start line position.</param>
            <param name="End">End line position.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.LinePositionSpan.#ctor(Microsoft.Testing.Platform.Extensions.Messages.LinePosition,Microsoft.Testing.Platform.Extensions.Messages.LinePosition)">
            <summary>
            Line position span in a file.
            </summary>
            <param name="Start">Start line position.</param>
            <param name="End">End line position.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.LinePositionSpan.Start">
            <summary>Start line position.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.LinePositionSpan.End">
            <summary>End line position.</summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.FileLocationProperty">
            <summary>
            Base property that represents a file location.
            </summary>
            <param name="FilePath">File path.</param>
            <param name="LineSpan">Line position.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.FileLocationProperty.#ctor(System.String,Microsoft.Testing.Platform.Extensions.Messages.LinePositionSpan)">
            <summary>
            Base property that represents a file location.
            </summary>
            <param name="FilePath">File path.</param>
            <param name="LineSpan">Line position.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.FileLocationProperty.FilePath">
            <summary>File path.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.FileLocationProperty.LineSpan">
            <summary>Line position.</summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.TestFileLocationProperty">
            <summary>
            Property that represents a file location for a test node.
            </summary>
            <param name="FilePath">File path.</param>
            <param name="LineSpan">Line position.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TestFileLocationProperty.#ctor(System.String,Microsoft.Testing.Platform.Extensions.Messages.LinePositionSpan)">
            <summary>
            Property that represents a file location for a test node.
            </summary>
            <param name="FilePath">File path.</param>
            <param name="LineSpan">Line position.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.TestMethodIdentifierProperty">
            <summary>
            Property that uniquely identifies a test method. Values are ECMA-335 compliant.
            </summary>
            <param name="AssemblyFullName">Assembly full name.</param>
            <param name="Namespace">Namespace.</param>
            <param name="TypeName">Type name.</param>
            <param name="MethodName">Method name.</param>
            <param name="ParameterTypeFullNames">Parameter type full name.</param>
            <param name="ReturnTypeFullName">Return type full name.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TestMethodIdentifierProperty.#ctor(System.String,System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Property that uniquely identifies a test method. Values are ECMA-335 compliant.
            </summary>
            <param name="AssemblyFullName">Assembly full name.</param>
            <param name="Namespace">Namespace.</param>
            <param name="TypeName">Type name.</param>
            <param name="MethodName">Method name.</param>
            <param name="ParameterTypeFullNames">Parameter type full name.</param>
            <param name="ReturnTypeFullName">Return type full name.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TestMethodIdentifierProperty.AssemblyFullName">
            <summary>Assembly full name.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TestMethodIdentifierProperty.Namespace">
            <summary>Namespace.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TestMethodIdentifierProperty.TypeName">
            <summary>Type name.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TestMethodIdentifierProperty.MethodName">
            <summary>Method name.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TestMethodIdentifierProperty.ParameterTypeFullNames">
            <summary>Parameter type full name.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TestMethodIdentifierProperty.ReturnTypeFullName">
            <summary>Return type full name.</summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.TestMetadataProperty">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TestMetadataProperty"/> class.
            Property that represents a generic test metadata property in the shape of a key-value pair associated with a <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TestNode"/>.
            </summary>
            <param name="Key">The metadata key.</param>
            <param name="Value">The metadata value.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TestMetadataProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TestMetadataProperty"/> class.
            Property that represents a generic test metadata property in the shape of a key-value pair associated with a <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TestNode"/>.
            </summary>
            <param name="Key">The metadata key.</param>
            <param name="Value">The metadata value.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TestMetadataProperty.Key">
            <summary>The metadata key.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.TestMetadataProperty.Value">
            <summary>The metadata value.</summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.TestMetadataProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TestMetadataProperty"/> class.
            Property that represents a generic test metadata property in the shape of a value associated with a <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TestNode"/>.
            </summary>
            <param name="key">The metadata key.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.StandardOutputProperty">
            <summary>
            Property that represents standard output to associate with a test node.
            </summary>
            <param name="StandardOutput">The standard output.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.StandardOutputProperty.#ctor(System.String)">
            <summary>
            Property that represents standard output to associate with a test node.
            </summary>
            <param name="StandardOutput">The standard output.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.StandardOutputProperty.StandardOutput">
            <summary>The standard output.</summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.Messages.StandardErrorProperty">
            <summary>
            Property that represents standard error to associate with a test node.
            </summary>
            <param name="StandardError">The standard error.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.Messages.StandardErrorProperty.#ctor(System.String)">
            <summary>
            Property that represents standard error to associate with a test node.
            </summary>
            <param name="StandardError">The standard error.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.Messages.StandardErrorProperty.StandardError">
            <summary>The standard error.</summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHost.IDataConsumer">
            <summary>
            Represents a data consumer that can consume data produced by a data producer.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestHost.IDataConsumer.DataTypesConsumed">
            <summary>
            Gets the types of data consumed by the data consumer.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHost.IDataConsumer.ConsumeAsync(Microsoft.Testing.Platform.Extensions.Messages.IDataProducer,Microsoft.Testing.Platform.Extensions.Messages.IData,System.Threading.CancellationToken)">
            <summary>
            Consumes the specified data produced by a data producer.
            </summary>
            <param name="dataProducer">The data producer.</param>
            <param name="value">The data to be consumed.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHost.ITestApplicationLifecycleCallbacks">
            <summary>
            Represents the interface for test application lifecycle callbacks.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHost.ITestApplicationLifecycleCallbacks.BeforeRunAsync(System.Threading.CancellationToken)">
            <summary>
            Executes before the test run.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHost.ITestApplicationLifecycleCallbacks.AfterRunAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Executes after the test run.
            </summary>
            <param name="exitCode">The exit code of the test run.</param>
            <param name="cancellation">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHost.ITestHostExtension">
            <summary>
            Represents a test host specialized extension.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHost.ITestSessionLifetimeHandler">
            <summary>
            Represents an interface for handling the lifetime of a test session.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHost.ITestSessionLifetimeHandler.OnTestSessionStartingAsync(Microsoft.Testing.Platform.TestHost.SessionUid,System.Threading.CancellationToken)">
            <summary>
            Called when a test session is starting.
            </summary>
            <param name="sessionUid">The unique identifier of the session.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHost.ITestSessionLifetimeHandler.OnTestSessionFinishingAsync(Microsoft.Testing.Platform.TestHost.SessionUid,System.Threading.CancellationToken)">
            <summary>
            Called when a test session is finishing.
            </summary>
            <param name="sessionUid">The unique identifier of the session.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.OutputDevice.IOutputDeviceDataProducer">
            <summary>
            Represents a producer of data that will be directed to the output device.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestFramework.CloseTestSessionContext">
            <summary>
            Context passed to a test framework adapter when <see cref="M:Microsoft.Testing.Platform.Extensions.TestFramework.ITestFramework.CloseTestSessionAsync(Microsoft.Testing.Platform.Extensions.TestFramework.CloseTestSessionContext)"/> is called.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.CloseTestSessionContext.CancellationToken">
            <summary>
            Gets the cancellation token used to cancel the operation.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestFramework.CloseTestSessionResult">
            <summary>
            Represents the result of closing a test session.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.CloseTestSessionResult.WarningMessage">
            <summary>
            Gets or sets the warning message associated with the test session closing.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.CloseTestSessionResult.ErrorMessage">
            <summary>
            Gets or sets the error message associated with the test session closing.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.CloseTestSessionResult.IsSuccess">
            <summary>
            Gets or sets a value indicating whether the test session closing was successful.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestFramework.CreateTestSessionContext">
            <summary>
            Context passed to a test framework adapter when <see cref="M:Microsoft.Testing.Platform.Extensions.TestFramework.ITestFramework.CreateTestSessionAsync(Microsoft.Testing.Platform.Extensions.TestFramework.CreateTestSessionContext)"/> is called.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.CreateTestSessionContext.CancellationToken">
            <summary>
            Gets the cancellation token used to cancel the operation.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestFramework.CreateTestSessionResult">
            <summary>
            Represents the result of creating a test session.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.CreateTestSessionResult.WarningMessage">
            <summary>
            Gets or sets the warning message, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.CreateTestSessionResult.ErrorMessage">
            <summary>
            Gets or sets the error message, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.CreateTestSessionResult.IsSuccess">
            <summary>
            Gets or sets a value indicating whether the test session creation was successful.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext">
            <summary>
            This class represents the context that is passed to a test framework adapter when the <see cref="M:Microsoft.Testing.Platform.Extensions.TestFramework.ITestFramework.ExecuteRequestAsync(Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext)"/> method is called.
            </summary>
            <remarks>
            It contains information about the request, message bus, semaphore, and cancellation token.
            </remarks>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext.Request">
            <summary>
            Gets the request associated with the execution.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext.MessageBus">
            <summary>
            Gets the message bus used for reporting test execution events.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext.CancellationToken">
            <summary>
            Gets the cancellation token that can be used to cancel the execution.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext.Complete">
            <summary>
            Completes the execution request.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestFramework.ITestFramework">
            <summary>
            A specialized extension that represents a test framework.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestFramework.ITestFramework.CreateTestSessionAsync(Microsoft.Testing.Platform.Extensions.TestFramework.CreateTestSessionContext)">
            <summary>
            Ask to the test framework to create a test session.
            </summary>
            <param name="context">The test session creation context.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestFramework.ITestFramework.ExecuteRequestAsync(Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext)">
            <summary>
            Ask to the test framework to execute a test execution request.
            </summary>
            <param name="context">The test execution request context.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestFramework.ITestFramework.CloseTestSessionAsync(Microsoft.Testing.Platform.Extensions.TestFramework.CloseTestSessionContext)">
            <summary>
            Ask to the test framework to destroy the test session and release all the resources.
            </summary>
            <param name="context">The test session destruction context.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHostControllers.EnvironmentVariable">
            <summary>
            Represents an environment variable.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <param name="value">The value of the environment variable.</param>
            <param name="isSecret">Indicates whether the environment variable is a secret.</param>
            <param name="isLocked">Indicates whether the environment variable is locked.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHostControllers.EnvironmentVariable.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Represents an environment variable.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <param name="value">The value of the environment variable.</param>
            <param name="isSecret">Indicates whether the environment variable is a secret.</param>
            <param name="isLocked">Indicates whether the environment variable is locked.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestHostControllers.EnvironmentVariable.Variable">
            <summary>
            Gets the name of the environment variable.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestHostControllers.EnvironmentVariable.Value">
            <summary>
            Gets the value of the environment variable.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestHostControllers.EnvironmentVariable.IsSecret">
            <summary>
            Gets a value indicating whether the environment variable is a secret.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestHostControllers.EnvironmentVariable.IsLocked">
            <summary>
            Gets a value indicating whether the environment variable is locked.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHostControllers.IEnvironmentVariables">
            <summary>
            Represents an interface for managing environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHostControllers.IEnvironmentVariables.SetVariable(Microsoft.Testing.Platform.Extensions.TestHostControllers.EnvironmentVariable)">
            <summary>
            Sets the value of the specified environment variable.
            </summary>
            <param name="environmentVariable">The environment variable to set.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHostControllers.IEnvironmentVariables.RemoveVariable(System.String)">
            <summary>
            Removes the specified environment variable.
            </summary>
            <param name="variable">The name of the environment variable to remove.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHostControllers.IReadOnlyEnvironmentVariables">
            <summary>
            Represents an interface for reading environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHostControllers.IReadOnlyEnvironmentVariables.TryGetVariable(System.String,Microsoft.Testing.Platform.Extensions.TestHostControllers.OwnedEnvironmentVariable@)">
            <summary>
            Tries to get the value of the specified environment variable.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <param name="environmentVariable">When this method returns, contains the value of the environment variable, if it is found; otherwise, null.</param>
            <returns>true if the environment variable is found; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostControllersExtension">
            <summary>
            Represents an extension for test host controllers.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostEnvironmentVariableProvider">
            <summary>
            Represents an interface for providing environment variables to the test host.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostEnvironmentVariableProvider.UpdateAsync(Microsoft.Testing.Platform.Extensions.TestHostControllers.IEnvironmentVariables)">
            <summary>
            Updates the environment variables for the test host asynchronously.
            </summary>
            <param name="environmentVariables">The environment variables to update.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostEnvironmentVariableProvider.ValidateTestHostEnvironmentVariablesAsync(Microsoft.Testing.Platform.Extensions.TestHostControllers.IReadOnlyEnvironmentVariables)">
            <summary>
            Validates the test host environment variables asynchronously.
            </summary>
            <param name="environmentVariables">The environment variables to validate.</param>
            <returns>A task representing the asynchronous operation and containing the validation result.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessInformation">
            <summary>
            Represents information about a test host process.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessInformation.PID">
            <summary>
            Gets the process ID of the test host.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessInformation.ExitCode">
            <summary>
            Gets the exit code of the test host process.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessInformation.HasExitedGracefully">
            <summary>
            Gets a value indicating whether the test host process has exited gracefully.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler">
            <summary>
            Represents an interface for handling the lifetime of the test host process.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler.BeforeTestHostProcessStartAsync(System.Threading.CancellationToken)">
            <summary>
            Executes before the test host process starts.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler.OnTestHostProcessStartedAsync(Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessInformation,System.Threading.CancellationToken)">
            <summary>
            Executes when the test host process has started.
            </summary>
            <param name="testHostProcessInformation">Information about the test host process.</param>
            <param name="cancellation">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler.OnTestHostProcessExitedAsync(Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessInformation,System.Threading.CancellationToken)">
            <summary>
            Executes when the test host process has exited.
            </summary>
            <param name="testHostProcessInformation">Information about the test host process.</param>
            <param name="cancellation">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Extensions.TestHostControllers.OwnedEnvironmentVariable">
            <summary>
            Represents an owned environment variable.
            </summary>
            <remarks>
            This class extends the <see cref="T:Microsoft.Testing.Platform.Extensions.TestHostControllers.EnvironmentVariable"/> class and adds an owner property.
            </remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.Extensions.TestHostControllers.OwnedEnvironmentVariable.#ctor(Microsoft.Testing.Platform.Extensions.IExtension,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Represents an owned environment variable.
            </summary>
            <remarks>
            This class extends the <see cref="T:Microsoft.Testing.Platform.Extensions.TestHostControllers.EnvironmentVariable"/> class and adds an owner property.
            </remarks>
        </member>
        <member name="P:Microsoft.Testing.Platform.Extensions.TestHostControllers.OwnedEnvironmentVariable.Owner">
            <summary>
            Gets the owner of the environment variable.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.CommandLine.ICommandLineManager">
            <summary>
            Represents a command line manager.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.CommandLine.ICommandLineManager.AddProvider(System.Func{Microsoft.Testing.Platform.Extensions.CommandLine.ICommandLineOptionsProvider})">
            <summary>
            Adds a command line options provider.
            </summary>
            <param name="commandLineProviderFactory">The factory method for creating the command line options provider.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.CommandLine.ICommandLineManager.AddProvider(System.Func{System.IServiceProvider,Microsoft.Testing.Platform.Extensions.CommandLine.ICommandLineOptionsProvider})">
            <summary>
            Adds a command line options provider.
            </summary>
            <param name="commandLineProviderFactory">The factory method for creating the command line options provider, given a service provider.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.CommandLine.ICommandLineOptions">
            <summary>
            Represents the interface for command line options.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.CommandLine.ICommandLineOptions.IsOptionSet(System.String)">
            <summary>
            Checks if the specified option is set.
            </summary>
            <param name="optionName">The name of the option.</param>
            <returns>True if the option is set; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.CommandLine.ICommandLineOptions.TryGetOptionArgumentList(System.String,System.String[]@)">
            <summary>
            Tries to get the argument list for the specified option.
            </summary>
            <param name="optionName">The name of the option.</param>
            <param name="arguments">The argument list for the option, if found.</param>
            <returns>True if the argument list is found; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.CommandLine.CommandLineParser.Parse(System.String[],Microsoft.Testing.Platform.Helpers.IEnvironment)">
             <summary>
             Options parser support:
                 * Only - and -- prefix for options https://learn.microsoft.com/dotnet/standard/commandline/syntax#options
                 * Multiple option arguments https://learn.microsoft.com/dotnet/standard/commandline/syntax#multiple-arguments
                 * Use a space, '=', or ':' as the delimiter between an option name and its argument
                 * escape with \
                 * surrounding with ""
                 * surrounding with ''
            
             Options parser doesn't support
                 * Default argument/commands/verb
                 * Alias https://learn.microsoft.com/dotnet/standard/commandline/syntax#aliases
                 * Case sensitivity https://learn.microsoft.com/dotnet/standard/commandline/syntax#case-sensitivity
                 * -- token https://learn.microsoft.com/dotnet/standard/commandline/syntax#the----token
            
             https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_03
             https://learn.microsoft.com/cpp/c-language/parsing-c-command-line-arguments?view=msvc-170
             Double-Quotes: we don't support for now
                 * The dollar-sign shall retain its special meaning introducing parameter expansion
                 * The backquote shall retain its special meaning introducing the other form of command substitution
                 * A POSIX convention lets you omit the delimiter when you are specifying a single-character option alias, i.e. myapp -vquiet.
             </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.CommandLine.PlatformCommandLineProvider.Uid">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.CommandLine.PlatformCommandLineProvider.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.CommandLine.PlatformCommandLineProvider.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.CommandLine.PlatformCommandLineProvider.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.CommandLine.PlatformCommandLineProvider.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.CommandLine.TreeNodeFilterCommandLineOptionsProvider.Uid">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.CommandLine.TreeNodeFilterCommandLineOptionsProvider.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.CommandLine.TreeNodeFilterCommandLineOptionsProvider.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.CommandLine.TreeNodeFilterCommandLineOptionsProvider.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.CommandLine.TreeNodeFilterCommandLineOptionsProvider.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Testing.Platform.Configurations.ConfigurationExtensions">
            <summary>
            Provides extension methods for the IConfiguration interface.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Configurations.ConfigurationExtensions.GetTestResultDirectory(Microsoft.Testing.Platform.Configurations.IConfiguration)">
            <summary>
            Gets the test result directory from the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>The test result directory.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Configurations.ConfigurationExtensions.GetCurrentWorkingDirectory(Microsoft.Testing.Platform.Configurations.IConfiguration)">
            <summary>
            Gets the current working directory from the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>The current working directory.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Configurations.ConfigurationExtensions.GetTestHostWorkingDirectory(Microsoft.Testing.Platform.Configurations.IConfiguration)">
            <summary>
            Gets the test host working directory from the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>The test host working directory.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Configurations.IConfiguration">
            <summary>
            Represents a configuration interface.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Configurations.IConfiguration.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="P:Microsoft.Testing.Platform.Configurations.JsonConfigurationSource.Uid">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Configurations.JsonConfigurationSource.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Configurations.JsonConfigurationSource.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Configurations.JsonConfigurationSource.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.Configurations.JsonConfigurationSource.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Testing.Platform.Helpers.ExitCodes">
            <summary>
            We use positive exit codes for failure because POSIX/BASH exit codes are unsigned 8-bit integers.
            On POSIX systems the standard exit code is 0 for success and any number from 1 to 255 for anything else.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Helpers.ObjectPool`1">
             <summary>
             Generic implementation of object pooling pattern with predefined pool size limit. The main
             purpose is that limited number of frequently used objects can be kept in the pool for
             further recycling.
            
             Notes:
             1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
                is no space in the pool, extra returned objects will be dropped.
            
             2) it is implied that if object was obtained from a pool, the caller will return it back in
                a relatively short time. Keeping checked out objects for long durations is ok, but
                reduces usefulness of pooling. Just new up your own.
            
             Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice.
             Rationale:
                If there is no intent for reusing the object, do not use pool - just use "new".
             </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Helpers.ObjectPool`1.Factory">
            <remarks>
            Not using System.Func{T} because this file is linked into the (debugger) Formatter,
            which does not have that type (since it compiles against .NET 2.0).
            </remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.Helpers.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search.
            </remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.Helpers.ObjectPool`1.Free(`0,System.Threading.CancellationToken)">
            <summary>
            Returns objects to the pool.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.Helpers.ObjectPool`1.ForgetTrackedObject(`0,`0)">
             <summary>
             Removes an object from leak tracking.
            
             This is called when an object is returned to the pool.  It may also be explicitly
             called if an object allocated from the pool is intentionally not being returned
             to the pool.  This can be of use with pooled arrays if the consumer wants to
             return a larger array to the pool than was originally allocated.
             </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Helpers.IConsole">
            <summary>
            Wraps the static System.Console to be isolatable in tests.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Helpers.IProcess.Id">
            <inheritdoc cref="P:System.Diagnostics.Process.Id" />
        </member>
        <member name="P:Microsoft.Testing.Platform.Helpers.IProcess.ExitCode">
            <inheritdoc cref="P:System.Diagnostics.Process.ExitCode" />
        </member>
        <member name="P:Microsoft.Testing.Platform.Helpers.IProcess.HasExited">
            <inheritdoc cref="P:System.Diagnostics.Process.HasExited" />
        </member>
        <member name="P:Microsoft.Testing.Platform.Helpers.IProcess.MainModule">
            <inheritdoc cref="P:System.Diagnostics.Process.MainModule" />
        </member>
        <member name="M:Microsoft.Testing.Platform.Helpers.IProcess.WaitForExitAsync">
            <summary>
            Instructs the Process component to wait for the associated process to exit, or for the cancellationToken to be canceled.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Helpers.IProcess.WaitForExit">
            <inheritdoc cref="M:System.Diagnostics.Process.WaitForExit" />
        </member>
        <member name="M:Microsoft.Testing.Platform.Helpers.IProcess.Kill">
            <inheritdoc cref="M:System.Diagnostics.Process.Kill" />
        </member>
        <member name="P:Microsoft.Testing.Platform.Helpers.SystemConsole.BufferHeight">
            <summary>
            Gets the height of the buffer area.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Helpers.SystemConsole.BufferWidth">
            <summary>
            Gets the width of the buffer area.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Helpers.SystemConsole.IsOutputRedirected">
            <summary>
            Gets a value indicating whether output has been redirected from the standard output stream.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Helpers.TestApplicationBuilderExtensions.AddMaximumFailedTestsService(Microsoft.Testing.Platform.Builder.ITestApplicationBuilder,Microsoft.Testing.Platform.Extensions.IExtension)">
            <summary>
            Registers the command-line options provider for '--maximum-failed-tests'.
            </summary>
            <param name="builder">The test application builder.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Helpers.TimeoutHelper.DefaultHangTimeoutMilliseconds">
            <summary>
            Gets defaultAntiHangTimeout* values are used as timeout for every wait operation in the test platform.
            Are not intended for any timeout logic, but only to avoid infinite waits in case of test platform hangs.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.RoslynDebug.Assert(System.Boolean)">
            <inheritdoc cref="M:System.Diagnostics.Debug.Assert(System.Boolean)"/>
        </member>
        <member name="M:Microsoft.Testing.Platform.RoslynDebug.Assert(System.Boolean,System.String)">
            <inheritdoc cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)"/>
        </member>
        <member name="M:Microsoft.Testing.Platform.RoslynString.IsNullOrEmpty(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="M:Microsoft.Testing.Platform.RoslynString.IsNullOrWhiteSpace(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>
        </member>
        <member name="M:Microsoft.Testing.Platform.Hosts.ServerTestHost.HandleMessagesAsync">
            <summary>
            The main server loop.
            It receives messages from the client and then runs a corresponding handler.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Hosts.ServerTestHost.RpcInvocationState.CompletionSource">
            <remarks>
            For outbound requests, this is populated with the response from the client.
            For inbound requests, this is set when the invoked request is completed
            in <see cref="M:Microsoft.Testing.Platform.Hosts.ServerTestHost.HandleRequestAsync(Microsoft.Testing.Platform.ServerMode.RequestMessage,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.Testing.Platform.Hosts.ServerTestHost.TestNodeStateChangeAggregator">
             <summary>
             Aggregates multiple <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TestNodeUpdateMessage"/> events
             into a single <see cref="T:Microsoft.Testing.Platform.ServerMode.TestNodeStateChangedEventArgs"/>.
            
             This is done to minimize the number of RPC messages sent.
             </summary>
             <remarks>The caller needs to ensure thread-safety.</remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.Hosts.ServerTestHost.TestNodeStateChangeAggregator.#ctor(System.Guid)">
             <summary>
             Aggregates multiple <see cref="T:Microsoft.Testing.Platform.Extensions.Messages.TestNodeUpdateMessage"/> events
             into a single <see cref="T:Microsoft.Testing.Platform.ServerMode.TestNodeStateChangedEventArgs"/>.
            
             This is done to minimize the number of RPC messages sent.
             </summary>
             <remarks>The caller needs to ensure thread-safety.</remarks>
        </member>
        <member name="P:Microsoft.Testing.Platform.Hosts.TestFrameworkProxy.Uid">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Hosts.TestFrameworkProxy.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Hosts.TestFrameworkProxy.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Hosts.TestFrameworkProxy.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.Hosts.TestFrameworkProxy.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Hosts.ToolsTestHost.Uid">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Hosts.ToolsTestHost.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Hosts.ToolsTestHost.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Hosts.ToolsTestHost.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.Hosts.ToolsTestHost.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.IPC.NamedPipeServer.InternalLoopAsync(System.Threading.CancellationToken)">
            <summary>
            4 bytes = message size
            ------- Payload -------
            4 bytes = serializer id
            x bytes = object buffer.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Logging.ILogger">
            <summary>
            Represents a logger that can be used for logging messages.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Logging.ILogger.LogAsync``1(Microsoft.Testing.Platform.Logging.LogLevel,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Asynchronously logs a message with the specified log level, state, exception, and formatter.
            </summary>
            <typeparam name="TState">The type of the state object.</typeparam>
            <param name="logLevel">The log level of the message.</param>
            <param name="state">The state object.</param>
            <param name="exception">The exception associated with the message.</param>
            <param name="formatter">The formatter function to format the message.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Logging.ILogger.Log``1(Microsoft.Testing.Platform.Logging.LogLevel,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Logs a message with the specified log level, state, exception, and formatter.
            </summary>
            <typeparam name="TState">The type of the state object.</typeparam>
            <param name="logLevel">The log level of the message.</param>
            <param name="state">The state object.</param>
            <param name="exception">The exception associated with the message.</param>
            <param name="formatter">The formatter function to format the message.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Logging.ILogger.IsEnabled(Microsoft.Testing.Platform.Logging.LogLevel)">
            <summary>
            Checks if the logger is enabled for the specified log level.
            </summary>
            <param name="logLevel">The log level to check.</param>
            <returns>True if the logger is enabled for the specified log level, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Logging.ILogger`1">
            <summary>
            Represents a logger that can be used for logging messages with a specific category.
            </summary>
            <typeparam name="TCategoryName">The type of the category name.</typeparam>
        </member>
        <member name="T:Microsoft.Testing.Platform.Logging.ILoggerFactory">
            <summary>
            Represents a factory for creating loggers.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Logging.ILoggerFactory.CreateLogger(System.String)">
            <summary>
            Creates a logger with the specified category name.
            </summary>
            <param name="categoryName">The name of the category for the logger.</param>
            <returns>A new instance of the logger.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Logging.LoggerFactoryExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Microsoft.Testing.Platform.Logging.ILoggerFactory"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Logging.LoggerFactoryExtensions.CreateLogger``1(Microsoft.Testing.Platform.Logging.ILoggerFactory)">
            <summary>
            Creates a logger instance for the specified category name.
            </summary>
            <typeparam name="TCategoryName">The type of the category name.</typeparam>
            <param name="factory">The logger factory.</param>
            <returns>A logger instance.</returns>
        </member>
        <member name="F:Microsoft.Testing.Platform.Logging.LogLevel.Trace">
            <summary>
            Logs that contain the most detailed messages.
            These messages may contain sensitive application data. These messages are disabled by default and should never be enabled in a production environment.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Logging.LogLevel.Debug">
            <summary>
            Logs that are used for interactive investigation during development.
            These logs should primarily contain information useful for debugging and have no long-term value.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Logging.LogLevel.Information">
            <summary>
            Logs that track the general flow of the application.
            These logs should have long-term value.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Logging.LogLevel.Warning">
            <summary>
            Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the application execution to stop.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Logging.LogLevel.Error">
            <summary>
            Logs that highlight when the current flow of execution is stopped due to a failure.
            These should indicate a failure in the current activity, not an application-wide failure.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Logging.LogLevel.Critical">
            <summary>
            Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires immediate attention.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Logging.LogLevel.None">
            <summary>
            Not used for writing log messages. Specifies that a logging category should not write any messages.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Logging.TypeNameHelper">
            <summary>
            Borrowed from https://github.com/dotnet/runtime/blob/main/src/libraries/Common/src/Extensions/TypeNameHelper/TypeNameHelper.cs.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Logging.TypeNameHelper.GetTypeDisplayName(System.Type,System.Boolean,System.Boolean,System.Boolean,System.Char)">
            <summary>
            Pretty print a type name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="fullName"><c>true</c> to print a fully qualified name.</param>
            <param name="includeGenericParameterNames"><c>true</c> to include generic parameter names.</param>
            <param name="includeGenericParameters"><c>true</c> to include generic parameters.</param>
            <param name="nestedTypeDelimiter">Character to use as a delimiter in nested type names.</param>
            <returns>The pretty printed type name.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Messages.IMessageBus">
            <summary>
            Represents a message bus for publishing data.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Messages.IMessageBus.PublishAsync(Microsoft.Testing.Platform.Extensions.Messages.IDataProducer,Microsoft.Testing.Platform.Extensions.Messages.IData)">
            <summary>
            Publishes the specified data using the provided data producer.
            </summary>
            <param name="dataProducer">The data producer.</param>
            <param name="data">The data to be published.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.Messages.TestNodeStateStatistics">
            <summary>
            Represents the test outcome and its retry execution statistics.
            </summary>
            <param name="HasPassed"> The test's single outcome or its final outcome. </param>
            <param name="TotalPassedRetries"> The number of times the adapter reported a Passed outcome when retrying. </param>
            <param name="TotalFailedRetries"> The number of times the adapter reported a Failed outcome when retrying. </param>
        </member>
        <member name="M:Microsoft.Testing.Platform.Messages.TestNodeStateStatistics.#ctor(System.Boolean,System.Int64,System.Int64)">
            <summary>
            Represents the test outcome and its retry execution statistics.
            </summary>
            <param name="HasPassed"> The test's single outcome or its final outcome. </param>
            <param name="TotalPassedRetries"> The number of times the adapter reported a Passed outcome when retrying. </param>
            <param name="TotalFailedRetries"> The number of times the adapter reported a Failed outcome when retrying. </param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Messages.TestNodeStateStatistics.HasPassed">
            <summary> The test's single outcome or its final outcome. </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Messages.TestNodeStateStatistics.TotalPassedRetries">
            <summary> The number of times the adapter reported a Passed outcome when retrying. </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Messages.TestNodeStateStatistics.TotalFailedRetries">
            <summary> The number of times the adapter reported a Failed outcome when retrying. </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData">
            <summary>
            Represents the data for a formatted text output device.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData"/> class with the specified text.
            </summary>
            <param name="text">The text to be displayed.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData.ForegroundColor">
            <summary>
            Gets or inits the foreground color of the text.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData.BackgroundColor">
            <summary>
            Gets or inits the background color of the text.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData.Padding">
            <summary>
            Gets or inits the padding of the message.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.IColor">
            <summary>
            Represents a color.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.IOutputDevice">
            <summary>
            Represents an output device.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.IOutputDevice.DisplayAsync(Microsoft.Testing.Platform.Extensions.OutputDevice.IOutputDeviceDataProducer,Microsoft.Testing.Platform.OutputDevice.IOutputDeviceData)">
            <summary>
            Displays the output data asynchronously.
            </summary>
            <param name="producer">The data producer.</param>
            <param name="data">The output data.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.IOutputDeviceData">
            <summary>
            Represents the data for an output device.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.SystemConsoleColor">
            <summary>
            Represents a system console color.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.SystemConsoleColor.ConsoleColor">
            <summary>
            Gets or inits the console color.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice">
            <summary>
            Implementation of output device that writes to terminal with progress and optionally with ANSI.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice.Uid">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice.DisplayAsync(Microsoft.Testing.Platform.Extensions.OutputDevice.IOutputDeviceDataProducer,Microsoft.Testing.Platform.OutputDevice.IOutputDeviceData)">
            <summary>
            Displays provided data through IConsole, which is typically System.Console.
            </summary>
            <param name="producer">The producer that sent the data.</param>
            <param name="data">The data to be displayed.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes">
            <summary>
            A collection of standard ANSI/VT100 control codes.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.Esc">
            <summary>
             Escape character.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.CSI">
            <summary>
            The control sequence introducer.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.SetColor">
            <summary>
            Select graphic rendition.
            </summary>
            <remarks>
            Print <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.CSI"/>color-code<see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.SetColor"/> to change text color.
            </remarks>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.SetBold">
            <summary>
            Select graphic rendition - set bold mode.
            </summary>
            <remarks>
            Print <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.CSI"/><see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.SetBold"/> to change text to bold.
            </remarks>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.SetDefaultColor">
            <summary>
            A shortcut to reset color back to normal.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.LinkPrefix">
            <summary>
            Non-xterm extension to render a hyperlink.
            </summary>
            <remarks>
            Print <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.LinkPrefix"/>url<see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.LinkInfix"/>text<see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.LinkSuffix"/> to render a hyperlink.
            </remarks>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.LinkInfix">
            <summary>
            <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.LinkPrefix"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.LinkSuffix">
            <summary>
            <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.LinkPrefix"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.MoveUpToLineStart">
            <summary>
            Moves up the specified number of lines and puts cursor at the beginning of the line.
            </summary>
            <remarks>
            Print <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.CSI"/>N<see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.MoveUpToLineStart"/> to move N lines up.
            </remarks>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.MoveForward">
            <summary>
            Moves forward (to the right) the specified number of characters.
            </summary>
            <remarks>
            Print <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.CSI"/>N<see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.MoveForward"/> to move N characters forward.
            </remarks>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.MoveBackward">
            <summary>
            Moves backward (to the left) the specified number of characters.
            </summary>
            <remarks>
            Print <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.CSI"/>N<see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.MoveBackward"/> to move N characters backward.
            </remarks>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.EraseInDisplay">
            <summary>
            Clears everything from cursor to end of screen.
            </summary>
            <remarks>
            Print <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.CSI"/><see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.EraseInDisplay"/> to clear.
            </remarks>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.EraseInLine">
            <summary>
            Clears everything from cursor to the end of the current line.
            </summary>
            <remarks>
            Print <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.CSI"/><see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.EraseInLine"/> to clear.
            </remarks>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.HideCursor">
            <summary>
            Hides the cursor.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.ShowCursor">
            <summary>
            Shows/restores the cursor.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.SetBusySpinner">
            <summary>
            Set progress state to a busy spinner. <br/>
            Note: this code works only on ConEmu terminals, and conflicts with push a notification code on iTerm2.
            </summary>
            <remarks>
            <see href="https://conemu.github.io/en/AnsiEscapeCodes.html#ConEmu_specific_OSC">ConEmu specific OSC codes.</see><br/>
            <see href="https://iterm2.com/documentation-escape-codes.html">iTerm2 proprietary escape codes.</see>
            </remarks>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.RemoveBusySpinner">
            <summary>
            Remove progress state, restoring taskbar status to normal. <br/>
            Note: this code works only on ConEmu terminals, and conflicts with push a notification code on iTerm2.
            </summary>
            <remarks>
            <see href="https://conemu.github.io/en/AnsiEscapeCodes.html#ConEmu_specific_OSC">ConEmu specific OSC codes.</see><br/>
            <see href="https://iterm2.com/documentation-escape-codes.html">iTerm2 proprietary escape codes.</see>
            </remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes.SetCursorHorizontal(System.Int32)">
            <summary>
            Moves cursor to the specified column, or the rightmost column if <paramref name="column"/> is greater than the width of the terminal.
            </summary>
            <param name="column">Column index.</param>
            <returns>Control codes to set the desired position.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiDetector">
            <summary>
            Works together with the <see cref="T:Microsoft.Testing.Platform.OutputDevice.Terminal.NativeMethods"/> to figure out if the current console is capable of using ANSI output codes.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiTerminal">
            <summary>
            Terminal writer that is used when writing ANSI is allowed. It is capable of batching as many updates as possible and writing them at the end,
            because the terminal is responsible for rendering the colors and control codes.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiTerminal.KnownFileExtensions">
            <summary>
            File extensions that we will link to directly, all other files
            are linked to their directory, to avoid opening dlls, or executables.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiTerminal.EraseProgress">
            <summary>
            Erases the previously printed live node output.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiTerminalTestProgressFrame">
            <summary>
            Captures <see cref="T:Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressState"/> that was rendered to screen, so we can only partially update the screen on next update.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiTerminalTestProgressFrame.Render(Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiTerminalTestProgressFrame,Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressState[],Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiTerminal)">
            <summary>
            Render VT100 string to update from current to next frame.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.ErrorMessage">
            <summary>
            An error message that was sent to output during the build.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.ErrorMessage.#ctor(System.String)">
            <summary>
            An error message that was sent to output during the build.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.FileUtilities.GetIsFileSystemCaseSensitive">
            <summary>
            Determines whether the file system is case sensitive.
            Copied from https://github.com/dotnet/runtime/blob/73ba11f3015216b39cb866d9fb7d3d25e93489f2/src/libraries/Common/src/System/IO/PathInternal.CaseSensitivity.cs#L41-L59 .
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.IProgressMessage">
            <summary>
            Error or warning message that was sent to screen during the test run.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.ITerminal">
            <summary>
            An ANSI or non-ANSI terminal that is capable of rendering the messages from <see cref="T:Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressStateAwareTerminal"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.NativeMethods.IsWindows">
            <summary>
            Gets a value indicating whether we are running under some version of Windows.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.NativeMethods.StreamHandleType.StdOut">
            <summary>
            StdOut.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.NativeMethods.StreamHandleType.StdErr">
            <summary>
            StdError.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.NonAnsiTerminal">
            <summary>
            Non-ANSI terminal that writes text using the standard Console.Foreground color capabilities to stay compatible with
            standard Windows command line, and other command lines that are not capable of ANSI, or when output is redirected.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor">
            <summary>
            Enumerates the text colors supported by VT100 terminal.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.DarkRed">
            <summary>
            DarkRed.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.DarkGreen">
            <summary>
            DarkGreen.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.DarkYellow">
            <summary>
            DarkYellow.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.DarkBlue">
            <summary>
            DarkBlue.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.DarkMagenta">
            <summary>
            DarkMagenta.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.DarkCyan">
            <summary>
            DarkCyan.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.Gray">
            <summary>
            Gray. This entry looks out of order, but in reality 37 is dark white, which is lighter than bright black = Dark Gray in Console colors.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.DarkGray">
            <summary>
            DarkGray. This entry looks out of order, but in reality 90 is bright black, which is darker than dark white = Gray in Console colors.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.Green">
            <summary>
            Green.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.Yellow">
            <summary>
            Yellow.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.Blue">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.Magenta">
            <summary>
            Magenta.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.Cyan">
            <summary>
            Cyan.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporter">
            <summary>
            Terminal test reporter that outputs test progress and is capable of writing ANSI or non-ANSI output via the given terminal.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporter.NewLineStrings">
            <summary>
            The two directory separator characters to be passed to methods like <see cref="M:System.String.IndexOfAny(System.Char[])"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporter.#ctor(Microsoft.Testing.Platform.Helpers.IConsole,Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporter"/> class with custom terminal and manual refresh for testing.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporter.AppendAssemblyResult(Microsoft.Testing.Platform.OutputDevice.Terminal.ITerminal,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Print a build result summary to the output.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporter.AppendLongDuration(Microsoft.Testing.Platform.OutputDevice.Terminal.ITerminal,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Appends a long duration in human readable format such as 1h 23m 500ms.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporter.StartCancelling">
            <summary>
            Let the user know that cancellation was triggered.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterCommandLineOptionsProvider.Uid">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterCommandLineOptionsProvider.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterCommandLineOptionsProvider.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterCommandLineOptionsProvider.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterCommandLineOptionsProvider.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions.BaseDirectory">
            <summary>
            Gets path to which all other paths in output should be relative.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions.ShowPassedTests">
            <summary>
            Gets a value indicating whether we should show passed tests.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions.ShowAssembly">
            <summary>
            Gets a value indicating whether we should show information about which assembly is the source of the data on screen. Turn this off when running directly from an exe to reduce noise, because the path will always be the same.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions.ShowAssemblyStartAndComplete">
            <summary>
            Gets a value indicating whether we should show information about which assembly started or completed. Turn this off when running directly from an exe to reduce noise, because the path will always be the same.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions.MinimumExpectedTests">
            <summary>
            Gets minimum amount of tests to run.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions.ShowProgress">
            <summary>
            Gets a value indicating whether we should write the progress periodically to screen. When ANSI is allowed we update the progress as often as we can. When ANSI is not allowed we update it every 3 seconds.
            This is a callback to nullable bool, because we don't know if we are running as test host controller until after we setup the console. So we should be polling for the value, until we get non-null boolean
            and then cache that value.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions.ShowActiveTests">
            <summary>
            Gets a value indicating whether the active tests should be visible when the progress is shown.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions.UseAnsi">
            <summary>
            Gets a value indicating whether we should use ANSI escape codes or disable them. When true the capabilities of the console are autodetected.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions.ForceAnsi">
            <summary>
            Gets a value indicating whether we should force ANSI escape codes. When true the ANSI is used without auto-detecting capabilities of the console. This is needed only for testing.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.TestOutcome">
            <summary>
            Outcome of a test.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TestOutcome.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TestOutcome.Fail">
            <summary>
            Fail.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TestOutcome.Passed">
            <summary>
            Passed.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TestOutcome.Skipped">
            <summary>
            Skipped.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TestOutcome.Timeout">
            <summary>
             Timeout.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TestOutcome.Canceled">
            <summary>
            Canceled.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressStateAwareTerminal">
            <summary>
            Terminal that updates the progress in place when progress reporting is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressStateAwareTerminal._cts">
            <summary>
            A cancellation token to signal the rendering thread that it should exit.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressStateAwareTerminal._lock">
            <summary>
            Protects access to state shared between the logger callbacks and the rendering thread.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressStateAwareTerminal._refresher">
            <summary>
            The thread that performs periodic refresh of the console output.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressStateAwareTerminal.ThreadProc">
            <summary>
            The <see cref="F:Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressStateAwareTerminal._refresher"/> thread proc.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.TestRunArtifact">
            <summary>
            An artifact / attachment that was reported during run.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.TestRunArtifact.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            An artifact / attachment that was reported during run.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.Terminal.WarningMessage">
            <summary>
            A warning message that was sent during run.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.Terminal.WarningMessage.#ctor(System.String)">
            <summary>
            A warning message that was sent during run.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.OutputDevice.TextOutputDeviceData">
            <summary>
            Represents a text data for directed to the output device.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.OutputDevice.TextOutputDeviceData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.OutputDevice.TextOutputDeviceData"/> class with the specified text.
            </summary>
            <param name="text">The text for the output device.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.OutputDevice.TextOutputDeviceData.Text">
            <summary>
            Gets the text for the output device.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.TestProcessRole.TestHost">
            <summary>
            Indicates that the currently running process is the test host.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.TestProcessRole.TestHostController">
            <summary>
            Indicates that the currently running process is the test host controller.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.TestProcessRole.TestHostOrchestrator">
            <summary>
            Indicates that the currently running process is the test host orchestrator.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Requests.DiscoverTestExecutionRequest">
            <summary>
            Represents a request to discover test execution.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Requests.DiscoverTestExecutionRequest.#ctor(Microsoft.Testing.Platform.TestHost.TestSessionContext,Microsoft.Testing.Platform.Requests.ITestExecutionFilter)">
            <summary>
            Represents a request to discover test execution.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Requests.DiscoverTestExecutionRequest.#ctor(Microsoft.Testing.Platform.TestHost.TestSessionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Requests.DiscoverTestExecutionRequest"/> class.
            </summary>
            <param name="session">The test session context.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.Requests.IRequest">
            <summary>
            Represents a request interface.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Requests.IRequest.Session">
            <summary>
            Gets the test session context.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Requests.ITestExecutionFilter">
            <summary>
            Represents a filter for test execution.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Requests.RunTestExecutionRequest">
            <summary>
            Represents a request to run test execution.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Requests.RunTestExecutionRequest.#ctor(Microsoft.Testing.Platform.TestHost.TestSessionContext,Microsoft.Testing.Platform.Requests.ITestExecutionFilter)">
            <summary>
            Represents a request to run test execution.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Requests.RunTestExecutionRequest.#ctor(Microsoft.Testing.Platform.TestHost.TestSessionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Requests.RunTestExecutionRequest"/> class.
            </summary>
            <param name="session">The test session context.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.Requests.TestExecutionRequest">
            <summary>
            Represents a request for test execution.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Requests.TestExecutionRequest.#ctor(Microsoft.Testing.Platform.TestHost.TestSessionContext,Microsoft.Testing.Platform.Requests.ITestExecutionFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Requests.TestExecutionRequest"/> class.
            </summary>
            <param name="session">The test session context.</param>
            <param name="filter">The test execution filter.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Requests.TestExecutionRequest.Filter">
            <summary>
            Gets the test execution filter.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Requests.TestExecutionRequest.Session">
            <summary>
            Gets the test session context.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Requests.TestNodeUidListFilter">
            <summary>
            Represents a filter based on test node UIDs.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Requests.TestNodeUidListFilter.#ctor(Microsoft.Testing.Platform.Extensions.Messages.TestNodeUid[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Testing.Platform.Requests.TestNodeUidListFilter"/> class.
            </summary>
            <param name="testNodeUids">The test node UIDs to filter.</param>
        </member>
        <member name="P:Microsoft.Testing.Platform.Requests.TestNodeUidListFilter.TestNodeUids">
            <summary>
            Gets the test node UIDs to filter.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.FilterOperator.Not">
            <summary>
            Negate the following expression.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.FilterOperator.And">
            <summary>
            Combine the following expressions with a logical AND.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.FilterOperator.Or">
            <summary>
            Combine the following expressions with a logical OR.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.FilterOperator.Equals">
            <summary>
            Filter the following expression by the given property.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.OperatorKind.None">
            <summary>
            Not an operator.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.OperatorKind.Separator">
            <summary>
            A separator operator, used to separate multiple filters.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.OperatorKind.LeftBrace">
            <summary>
            An opening brace operator.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.OperatorKind.RightBrace">
            <summary>
            A closing brace operator.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.OperatorKind.LeftParameter">
            <summary>
            Left hand side of a filter expression.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.OperatorKind.RightParameter">
            <summary>
            Right hand side of a filter expression.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.OperatorKind.FilterEquals">
            <summary>
            Filter equals operator.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.OperatorKind.Or">
            <summary>
            Operator used for combining multiple filters with a logical OR.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.Requests.OperatorKind.And">
            <summary>
            Operator used for combining multiple filters with a logical AND.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Requests.TreeNodeFilter.ParseFilter(System.String)">
            <remarks>
            The current grammar for the filter looks as follows:
            <code>
            TREE_NODE_FILTER = EXPR ( '/' EXPR )*
            EXPR =
              '(' EXPR ')'
              | EXPR OP EXPR
              | NODE_VALUE
            FILTER_EXPR =
              '(' FILTER_EXPR ')'
              | TOKEN '=' TOKEN
              | FILTER_EXPR OP FILTER_EXPR
              | TOKEN
            OP = '&amp;' | '|'
            NODE_VALUE = TOKEN | TOKEN '[' FILTER_EXPR ']'
            TOKEN = string
            </code>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown, if the filter is malformed, for example <c>A(|B)</c> or <c>A)</c>.
            </exception>
        </member>
        <member name="M:Microsoft.Testing.Platform.Requests.TreeNodeFilter.MatchesFilter(System.String,Microsoft.Testing.Platform.Extensions.Messages.PropertyBag)">
            <summary>
            Checks whether a node path matches the tree node filter.
            </summary>
            <param name="testNodeFullPath">The segment URL encoded path.</param>
            <param name="filterableProperties">The URL encoded node properties.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.Requests.ValueAndPropertyExpression">
            <summary>
            This represents an expression that combines a value and a property expression,
            for instance <c>MethodName[Trait=Foo]</c>.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Requests.ValueAndPropertyExpression.#ctor(Microsoft.Testing.Platform.Requests.FilterExpression,Microsoft.Testing.Platform.Requests.FilterExpression)">
            <summary>
            This represents an expression that combines a value and a property expression,
            for instance <c>MethodName[Trait=Foo]</c>.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.ServerMode.IMessageFormatter">
            <summary>
            A message formatter converts objects into a serialized format and can deserialize data into
            corresponding objects.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.ServerMode.IMessageHandler.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the next <see cref="T:Microsoft.Testing.Platform.ServerMode.RpcMessage"/> payload from the client.
            </summary>
            <remarks>
            The reading is likely backed by a data stream and the message handler is responsible
            for reading the data stream and deserialization of the message.
            If the reading from the stream is canceled will throw an exception.
            If deserialization of the message fails, also will throw an exception.
            </remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.ServerMode.IMessageHandler.WriteRequestAsync(Microsoft.Testing.Platform.ServerMode.RpcMessage,System.Threading.CancellationToken)">
            <summary>
            Writes the next <see cref="T:Microsoft.Testing.Platform.ServerMode.RpcMessage"/> to the client.
            </summary>
            <remarks>
            The writing is likely backed by a data stream and the message handler is responsible
            for writing to the data stream and serialization of the message.
            If serialization of the message fails, will throw an exception.
            </remarks>
        </member>
        <member name="T:Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer">
            <summary>
            This class converts the events send to the message bus and sends these back to the client.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer.#ctor(System.IServiceProvider,Microsoft.Testing.Platform.Hosts.IServerTestHost,System.Guid,Microsoft.Testing.Platform.Helpers.ITask)">
            <summary>
            This class converts the events send to the message bus and sends these back to the client.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer.Uid">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Testing.Platform.ServerMode.RequestMessage">
            <summary>
            A request is a message for which the server should return a corresponding
            <see cref="T:Microsoft.Testing.Platform.ServerMode.ErrorMessage"/> or <see cref="T:Microsoft.Testing.Platform.ServerMode.ResponseMessage"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.ServerMode.RequestMessage.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            A request is a message for which the server should return a corresponding
            <see cref="T:Microsoft.Testing.Platform.ServerMode.ErrorMessage"/> or <see cref="T:Microsoft.Testing.Platform.ServerMode.ResponseMessage"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.ServerMode.NotificationMessage">
            <summary>
            A notification message is a message that notifies the server of an event.
            There's no corresponding response that the server should send back and as such
            no Id is specified when sending a notification.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.ServerMode.NotificationMessage.#ctor(System.String,System.Object)">
            <summary>
            A notification message is a message that notifies the server of an event.
            There's no corresponding response that the server should send back and as such
            no Id is specified when sending a notification.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.ServerMode.ErrorMessage">
            <summary>
            An error message is sent if some exception was thrown when processing the request.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.ServerMode.ErrorMessage.#ctor(System.Int32,System.Int32,System.String,System.Object)">
            <summary>
            An error message is sent if some exception was thrown when processing the request.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.ServerMode.ResponseMessage">
            <summary>
            An response message is sent if a request is handled successfully.
            </summary>
            <remarks>
            If the RPC handler returns a <see cref="T:System.Threading.Tasks.Task"/> the <paramref name="Result"/>
            will be returned as <c>null</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.ServerMode.ResponseMessage.#ctor(System.Int32,System.Object)">
            <summary>
            An response message is sent if a request is handled successfully.
            </summary>
            <remarks>
            If the RPC handler returns a <see cref="T:System.Threading.Tasks.Task"/> the <paramref name="Result"/>
            will be returned as <c>null</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.Testing.Platform.ServerMode.SerializerUtilities.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Microsoft.Testing.Platform.ServerMode.SerializerUtilities"/> class.
            Is a known fact that this serializer jsonite based suffer of boxing/unboxing issue but it's only for netstandard2.0 and we don't optimize for it for now.
            We aim to rewrite all the serialization with the best perfomance using .NET System.Text.Json api inside the Json.cs file.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.IClientInfo.Id">
            <summary>
            Gets the client ID.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.IClientInfo.Version">
            <summary>
            Gets the client version.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.IPlatformInformation.Name">
            <summary>
            Gets the platform's name.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.IPlatformInformation.BuildDate">
            <summary>
            Gets the platform's build date.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.IPlatformInformation.Version">
            <summary>
            Gets the platform's version.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.IPlatformInformation.CommitHash">
            <summary>
            Gets the platform's commit hash.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.Services.ServiceProviderExtensions">
            <summary>
            Extension methods for getting services from an <see cref="T:System.IServiceProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            Gets the required service of type <typeparamref name="TService"/> from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="provider">The service provider.</param>
            <returns>The required service of type <typeparamref name="TService"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="provider"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the required service is not found.</exception>
        </member>
        <member name="M:Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Gets the service of type <typeparamref name="TService"/> from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="provider">The service provider.</param>
            <returns>The service of type <typeparamref name="TService"/> or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="provider"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetMessageBus(System.IServiceProvider)">
            <summary>
            Gets the message bus from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>The message bus.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetConfiguration(System.IServiceProvider)">
            <summary>
            Gets the configuration from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetCommandLineOptions(System.IServiceProvider)">
            <summary>
            Gets the command line options from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>The command line options.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetLoggerFactory(System.IServiceProvider)">
            <summary>
            Gets the logger factory from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>The logger factory.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetOutputDevice(System.IServiceProvider)">
            <summary>
            Gets the output device from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>The output device.</returns>
        </member>
        <member name="M:Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetClientInfo(System.IServiceProvider)">
            <summary>
            Gets the IClientInfo from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>The IClientInfo object.</returns>
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.TestApplicationResult.Uid">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.TestApplicationResult.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.TestApplicationResult.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.TestApplicationResult.Description">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Testing.Platform.Services.TestApplicationResult.DataTypesConsumed">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Testing.Platform.Services.TestApplicationResult.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Testing.Platform.Telemetry.ITelemetryCollector">
            <summary>
            This service allows to collect usage information.
            For instance how long different operations run for, what kinds of capabilities
            are being enabled, disabled.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.Telemetry.ITelemetryCollector.LogEventAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs a telemetry event.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.TestHostControllers.ITestHostControllerInfo.IsCurrentProcessTestHostController">
            <summary>
            Gets information whether the current process is a test controller or not.
            When null the value has not been set yet, it is figured out while we are building the test application.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager">
            <summary>
            Represents a manager for test host controllers.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager.AddEnvironmentVariableProvider(System.Func{System.IServiceProvider,Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostEnvironmentVariableProvider})">
            <summary>
            Adds an environment variable provider to the test host controller manager.
            </summary>
            <param name="environmentVariableProviderFactory">The factory method that creates the environment variable provider.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager.AddEnvironmentVariableProvider``1(Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory{``0})">
            <summary>
            Adds an environment variable provider to the test host controller manager.
            </summary>
            <typeparam name="T">The type of the environment variable provider.</typeparam>
            <param name="compositeServiceFactory">The factory method that creates the composite service.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager.AddProcessLifetimeHandler(System.Func{System.IServiceProvider,Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler})">
            <summary>
            Adds a process lifetime handler to the test host controller manager.
            </summary>
            <param name="lifetimeHandler">The factory method that creates the process lifetime handler.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager.AddProcessLifetimeHandler``1(Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory{``0})">
            <summary>
            Adds a process lifetime handler to the test host controller manager.
            </summary>
            <typeparam name="T">The type of the process lifetime handler.</typeparam>
            <param name="compositeServiceFactory">The factory method that creates the composite service.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.TestHost.ClientInfo">
            <summary>
            Represents client information.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.TestHost.ClientInfo.Id">
            <summary>
            Gets the client ID.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.TestHost.ClientInfo.Version">
            <summary>
            Gets the client version.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.TestHost.ITestHostManager">
            <summary>
            Represents the interface for managing the test host.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHost.ITestHostManager.AddTestApplicationLifecycleCallbacks(System.Func{System.IServiceProvider,Microsoft.Testing.Platform.Extensions.TestHost.ITestApplicationLifecycleCallbacks})">
            <summary>
            Adds a test application lifecycle callbacks.
            </summary>
            <param name="testApplicationLifecycleCallbacks">The factory method for creating the test application lifecycle callbacks.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHost.ITestHostManager.AddDataConsumer(System.Func{System.IServiceProvider,Microsoft.Testing.Platform.Extensions.TestHost.IDataConsumer})">
            <summary>
            Adds a data consumer.
            </summary>
            <param name="dataConsumerFactory">The factory method for creating the data consumer.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHost.ITestHostManager.AddDataConsumer``1(Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory{``0})">
            <summary>
            Adds a data consumer of type T.
            </summary>
            <typeparam name="T">The type of the data consumer.</typeparam>
            <param name="compositeServiceFactory">The composite extension factory for creating the data consumer.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHost.ITestHostManager.AddTestSessionLifetimeHandle(System.Func{System.IServiceProvider,Microsoft.Testing.Platform.Extensions.TestHost.ITestSessionLifetimeHandler})">
            <summary>
            Adds a test session lifetime handle.
            </summary>
            <param name="testSessionLifetimeHandleFactory">The factory method for creating the test session lifetime handle.</param>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHost.ITestHostManager.AddTestSessionLifetimeHandle``1(Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory{``0})">
            <summary>
            Adds a test session lifetime handle of type T.
            </summary>
            <typeparam name="T">The type of the test session lifetime handle.</typeparam>
            <param name="compositeServiceFactory">The composite extension factory for creating the test session lifetime handle.</param>
        </member>
        <member name="T:Microsoft.Testing.Platform.TestHost.SessionUid">
            <summary>
            Represents a unique identifier for a session.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHost.SessionUid.#ctor(System.String)">
            <summary>
            Represents a unique identifier for a session.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.TestHost.SessionUid.Value">
            <summary>
            Gets the value of the session identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Testing.Platform.TestHost.SessionUid.ToString">
            <summary>
            Returns a string representation of the SessionUid.
            </summary>
            <returns>A string representation of the SessionUid.</returns>
        </member>
        <member name="T:Microsoft.Testing.Platform.TestHost.TestSessionContext">
            <summary>
            Represents the context of a test session.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.TestHost.TestSessionContext.SessionUid">
            <summary>
            Gets the unique identifier of the test session.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.TestHost.TestSessionContext.Client">
            <summary>
            Gets the client information associated with the test session.
            </summary>
        </member>
        <member name="T:Microsoft.Testing.Platform.TestHost.WellKnownClients">
            <summary>
            Represents well-known clients in the testing platform.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.TestHost.WellKnownClients.TestingPlatformConsole">
            <summary>
            Represents the Testing Platform Console client.
            </summary>
        </member>
        <member name="F:Microsoft.Testing.Platform.TestHost.WellKnownClients.VisualStudio">
            <summary>
            Represents the Visual Studio Testing Platform Client.
            </summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CannotCreateTestExecutionFilterErrorMessage">
            <summary>Failed to create a test execution filter</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CompositeServiceFactoryInstanceAlreadyRegistered">
            <summary>The same instance of 'CompositeExtensonFactory' is already registered</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ConfigurationManagerCannotFindDefaultJsonConfigurationErrorMessage">
            <summary>Could not find the default json configuration</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ConsoleTestExecutionFilterFactoryDescription">
            <summary>Creates the right test execution filter for console mode</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ConsoleTestExecutionFilterFactoryDisplayName">
            <summary>Console test execution filter factory</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ExtensionDoesNotImplementGivenInterfaceErrorMessage">
            <summary>Extension of type '{0}' is not implementing the required '{1}' interface</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ExtensionWithSameUidAlreadyRegisteredErrorMessage">
            <summary>Another extension with same the same UID '{0}' has already been registered. Registered extension is of type '{1}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.JsonConfigurationFileParserDuplicateKeyErrorMessage">
            <summary>A duplicate key '{0}' was found</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.JsonConfigurationFileParserTopLevelElementIsNotAnObjectErrorMessage">
            <summary>Top-level JSON element must be an object. Instead, '{0}' was found</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.JsonConfigurationFileParserUnsupportedTokenErrorMessage">
            <summary>Unsupported JSON token '{0}' was found</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ServerTestExecutionFilterFactoryDescription">
            <summary>Creates the right test execution filter for server mode</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ServerTestExecutionFilterFactoryDisplayName">
            <summary>Server test execution filter factory</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ServiceProviderCannotFindServiceErrorMessage">
            <summary>Cannot find service of type '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ServiceProviderServiceAlreadyRegistered">
            <summary>Instance of type '{0}' is already registered</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ServiceProviderShouldNotRegisterTestFramework">
            <summary>Instances of type 'ITestFramework' should not be registered through the service provider but through 'ITestApplicationBuilder.RegisterTestFramework'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestAdapterInvokerFactoryAlreadySetErrorMessage">
            <summary>An 'ITestFrameworkInvoker' factory is already set</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestApplicationBuilderApplicationAlreadyRegistered">
            <summary>The application has already been built</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestApplicationBuilderFrameworkAdapterFactoryAlreadyRegisteredErrorMessage">
            <summary>The test framework adapter factory has already been registered</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestApplicationBuilderTestFrameworkCapabilitiesAlreadyRegistered">
            <summary>The test framework capabilities factory has already been registered</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestApplicationBuilderTestFrameworkNotRegistered">
            <summary>The test framework adapter has not been registered. Use 'ITestApplicationBuilder.RegisterTestFramework' to register it</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestApplicationResultDescription">
            <summary>Determine the result of the test application execution</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestApplicationResultDisplayName">
            <summary>Test application result</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestApplicationVSTestModeTooManyBuilders">
            <summary>VSTest mode only supports a single TestApplicationBuilder per process</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestHostAdapterInvokerFailedTestSessionErrorMessage">
            <summary>Test adapter test session failure</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TreeNodeFilterCannotContainSlashCharacterErrorMessage">
            <summary>A filter '{0}' should not contain a '/' character</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TreeNodeFilterEscapeCharacterShouldNotBeLastErrorMessage">
            <summary>An escape character should not terminate the filter string '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TreeNodeFilterOnlyLastLevelCanContainMutiLevelWildcardErrorMessage">
            <summary>Only the final filter path can contain '**' wildcard</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TreeNodeFilterOperatorNotAllowedErrorMessage">
            <summary>Unexpected operator '&amp;' or '|' within filter expression '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TreeNodeFilterPathShouldStartWithSlashErrorMessage">
            <summary>Invalid node path, expected root as first character '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TreeNodeFilterUnbalancedFilterErrorMessage">
            <summary>Filter expression '{0}' contains an unbalanced number of '{1}' '{2}' operators</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TreeNodeFilterUnexpectedSlashOperatorErrorMessage">
            <summary>Filter contains an unexpected '/' operator inside a parenthesized expression</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TEstExecutionFilterFactoryFactoryAlreadySetErrorMessage">
            <summary>An 'ITestExecutionFilterFactory' factory is already set</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CannotRemoveEnvironmentVariableAtThisStageErrorMessage">
            <summary>Cannot remove environment variables at this stage</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CannotRemoveEnvironmentVariableItIsLockedErrorMessage">
            <summary>Extension '{0}' tried to remove environment variable '{1}' but it was locked by extension '{2}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CannotSetEnvironmentVariableAtThisStageErrorMessage">
            <summary>Cannot set environment variables at this stage</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CannotSetEnvironmentVariableItIsLockedErrorMessage">
            <summary>Extension '{0}' tried to set environment variable '{1}' but it was locked by extension '{2}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ProcessHasNotYetExitedErrorMessage">
            <summary>Process should have exited before we can determine this value</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CannotStartProcessErrorMessage">
            <summary>Cannot start process '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.EnvironmentVariableProviderFailedWithError">
            <summary>Provider '{0}' (UID: {1}) failed with error: {2}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.GlobalValidationOfTestHostEnvironmentVariablesFailedErrorMessage">
            <summary>The following 'ITestHostEnvironmentVariableProvider' providers rejected the final environment variables setup:</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestFrameworkProxyApiShouldNotBeCalled">
            <summary>Method '{0}' should not have been called on this proxy object</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestProcessDidNotExitGracefullyErrorMessage">
            <summary>Test application process didn't exit gracefully, exit code is '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CannotCreateUniqueLogFileErrorMessage">
            <summary>Failed to create a unique log file after 3 seconds. Lastly tried file name is '{0}'.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.FailedToWriteLogToChannelErrorMessage">
            <summary>Failed to write the log to the channel. Missed log content:
            {0}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ServerLogMessageDescription">
            <summary>This data represents a server log message</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ServerLogMessageDisplayName">
            <summary>Server log message</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TimeoutAcquiringSemaphoreErrorMessage">
            <summary>Failed to acquire semaphore before timeout of '{0}' seconds</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TimeoutFlushingLogsErrorMessage">
            <summary>Failed to flush logs before the timeout of '{0}' seconds</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.UnexpectedExceptionInFileLoggerErrorMessage">
            <summary>An unexpected exception occurred in 'FileLogger.WriteLogToFileAsync'.
            {0}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.UnexpectedStateErrorMessage">
            <summary>Unexpected state in file '{0}' at line '{1}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.UnreachableLocationErrorMessage">
            <summary>This program location is thought to be unreachable. File='{0}' Line={1}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.RetryFailedAfterTriesErrorMessage">
            <summary>Retry failed after {0} times</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineInvalidArgumentsForOption">
            <summary>Option '--{0}' has invalid arguments: {1}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineInvalidConfiguration">
            <summary>Invalid configuration for provider '{0}' (UID: {1}). Error: {2}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineOptionExpectsAtLeastArguments">
            <summary>Option '--{0}' from provider '{1}' (UID: {2}) expects at least {3} arguments</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineOptionExpectsAtMostArguments">
            <summary>Option '--{0}' from provider '{1}' (UID: {2}) expects at most {3} arguments</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineOptionExpectsNoArguments">
            <summary>Option '--{0}' from provider '{1}' (UID: {2}) expects no arguments</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineOptionIsUsingReservedPrefix">
            <summary>Option `--{0}` from provider '{1}' (UID: {2}) is using the reserved prefix '--internal'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineUnknownOption">
            <summary>Unknown option '--{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.InvalidCommandLineArguments">
            <summary>Invalid command line arguments:</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineInvalidArityErrorMessage">
            <summary>Invalid arity, maximum must be greater than minimum</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineInvalidOptionName">
            <summary>Invalid option name '{0}', it must contain only letter and '-' (e.g. my-option)</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineOptionIsDeclaredByMultipleProviders">
            <summary>Option '--{0}' is declared by multiple extensions: '{1}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineOptionIsDeclaredByMultipleProvidersWorkaround">
            <summary>You can fix the previous option clash by overriding the option name using the configuration file</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineOptionIsReserved">
            <summary>Option '--{0}' is reserved and cannot be used by providers: '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineParserUnexpectedArgument">
            <summary>Unexpected argument {0}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineParserUnexpectedNullArgument">
            <summary>Unexpected null argument at index {0}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineParserUnexpectedSingleQuoteInArgument">
            <summary>Unexpected single quote in argument: {0}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineParserUnexpectedSingleQuoteInArgumentForOption">
            <summary>Unexpected single quote in argument: {0} for option '--{1}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.HelpApplicationUsage">
            <summary>Usage {0} [option providers] [extension option providers]</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.HelpExecuteTestApplication">
            <summary>Execute a .NET Test Application.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.HelpExtensionOptions">
            <summary>Extension options:</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.HelpNoExtensionRegistered">
            <summary>No extension registered.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.HelpOptions">
            <summary>Options:</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.HelpTestApplicationRunner">
            <summary>&lt;test application runner&gt;</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.NotAvailable">
            <summary>Not available</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.NotFound">
            <summary>Not found</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineClientHostOptionDescription">
            <summary>Specify the hostname of the client.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineClientPortOptionDescription">
            <summary>Specify the port of the client.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineDiagnosticFileLoggerSynchronousWriteOptionDescription">
            <summary>Force the built-in file logger to write the log synchronously.
            Useful for scenario where you don't want to lose any log (i.e. in case of crash).
            Note that this is slowing down the test execution.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineDiagnosticOptionDescription">
            <summary>Enable the diagnostic logging. The default log level is 'Trace'.
            The file will be written in the output directory with the name log_[yyMMddHHmmssfff].diag</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineDiagnosticOptionExpectsSingleArgumentErrorMessage">
            <summary>'--diagnostic-verbosity' expects a single level argument ('Trace', 'Debug', 'Information', 'Warning', 'Error', or 'Critical')</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineDiagnosticOptionIsMissing">
            <summary>'--{0}' requires '--diagnostic' to be provided</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineDiagnosticOutputDirectoryOptionDescription">
            <summary>Output directory of the diagnostic logging.
            If not specified the file will be generated inside the default 'TestResults' directory.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineDiagnosticOutputFilePrefixOptionDescription">
            <summary>Prefix for the log file name that will replace '[log]_.'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineDiagnosticVerbosityOptionDescription">
            <summary>Define the level of the verbosity for the --diagnostic.
            The available values are 'Trace', 'Debug', 'Information', 'Warning', 'Error', and 'Critical'.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineDiscoverTestsOptionDescription">
            <summary>List available tests.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineHelpOptionDescription">
            <summary>Show the command line help.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineInfoOptionDescription">
            <summary>Display .NET test application information.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineMinimumExpectedTestsIncompatibleDiscoverTests">
            <summary>'--list-tests' and '--minimum-expected-tests' are incompatible options</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineMinimumExpectedTestsOptionSingleArgument">
            <summary>'--minimum-expected-tests' expects a single non-zero positive integer value
            (e.g. '--minimum-expected-tests 10')</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineNoBannerOptionDescription">
            <summary>Do not display the startup banner, the copyright message or the telemetry banner.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLinePortOptionDescription">
            <summary>Specify the port of the server.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLinePortOptionSingleArgument">
            <summary>'--{0}' expects a single valid port as argument</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineProviderDescription">
            <summary>Microsoft Testing Platform command line provider</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineProviderDisplayName">
            <summary>Platform command line provider</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineResultDirectoryOptionDescription">
            <summary>The directory where the test results are going to be placed.
            If the specified directory doesn't exist, it's created.
            The default is TestResults in the directory that contains the test application.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineServerOptionDescription">
            <summary>Enable the server mode.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineSkipBuildersNumberCheckOptionDescription">
            <summary>For testing purposes</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineTestHostControllerPIDOptionDescription">
            <summary>Eventual parent test host controller PID.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineDotnetTestPipe">
            <summary>dotnet test pipe.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineVSTestAdapterModeOptionDescription">
            <summary>Bridge to VSTest APIs</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TreeNodeFilterDescription">
            <summary>Use a tree filter to filter down the tests to execute</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ConnectingToClientHost">
            <summary>Connecting to client host '{0}' port '{1}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.JsonRpcTcpServerDescription">
            <summary>JsonRpc server implementation based on the test platform protocol specification.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.JsonRpcTcpServerToSingleClientDescription">
            <summary>JsonRpc server to client handshake, implementation based on the test platform protocol specification.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.StartingServer">
            <summary>Starting server. Listening on port '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.UnknownCommunicationProtocolErrorMessage">
            <summary>The communication protocol '{0}' is not supported</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TelemetryNotice">
            <summary>Telemetry
            ---------
            Microsoft Testing Platform collects usage data in order to help us improve your experience. The data is collected by Microsoft and are not shared with anyone.
            You can opt-out of telemetry by setting the TESTINGPLATFORM_TELEMETRY_OPTOUT  ...</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TelemetryProviderAlreadySetErrorMessage">
            <summary>Telemetry provider is already set</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.UnexpectedCallTelemetryIsDisabledErrorMessage">
            <summary>Unexpected telemetry call, the telemetry is disabled.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CouldNotFindDirectoryErrorMessage">
            <summary>Could not find directory '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.InternalLoopAsyncDidNotExitSuccessfullyErrorMessage">
            <summary>Method '{0}' did not exit successfully</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.NoSerializerRegisteredWithIdErrorMessage">
            <summary>No serializer registered with ID '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.NoSerializerRegisteredWithTypeErrorMessage">
            <summary>No serializer registered with type '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.UnexpectedExceptionDuringByteConversionErrorMessage">
            <summary>An unexpected exception occurred during byte conversion</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineIgnoreExitCodeOptionDescription">
            <summary>Do not report non successful exit value for specific exit codes
            (e.g. '--ignore-exit-code 8;9' ignore exit code 8 and 9 and will return 0 in these case)</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineExitOnProcessExitOptionDescription">
            <summary>Exit the test process if dependent process exits. PID must be provided.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineExitOnProcessExitSingleArgument">
            <summary>'--{0}' expects a single int PID argument</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineExitOnProcessExitInvalidDependentProcess">
            <summary>Invalid PID '{0}'
            {1}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.Aborted">
            <summary>Aborted</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.Actual">
            <summary>Actual</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CancelledLowercase">
            <summary>canceled</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CancellingTestSession">
            <summary>Canceling the test session...</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.DiagnosticFileLevelWithAsyncFlush">
            <summary>Diagnostic file (level '{0}' with async flush): {1}"</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.DiagnosticFileLevelWithFlush">
            <summary>Diagnostic file (level '{0}' with sync flush): {1}"</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.Expected">
            <summary>Expected</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.Failed">
            <summary>Failed</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.FailedLowercase">
            <summary>failed</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ForTest">
            <summary>For test</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.InProcessArtifactsProduced">
            <summary>In process file artifacts produced:</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.MinimumExpectedTestsPolicyViolation">
            <summary>Minimum expected tests policy violation, tests ran {0}, minimum expected {1}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.OutOfProcessArtifactsProduced">
            <summary>Out of process file artifacts produced:</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.Passed">
            <summary>Passed</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PassedLowercase">
            <summary>passed</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.Skipped">
            <summary>Skipped</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.SkippedLowercase">
            <summary>skipped</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.StackTrace">
            <summary>Stack Trace</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.Total">
            <summary>Total</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ZeroTestsRan">
            <summary>Zero tests ran</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ConsoleIsAlreadyInBatchingMode">
            <summary>Console is already in batching mode.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.FailedWithErrors">
            <summary>failed with {0} error(s)</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.FailedWithErrorsAndWarnings">
            <summary>failed with {0} error(s) and {1} warning(s)</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.FailedWithWarnings">
            <summary>failed with {0} warning(s)</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.RunningTestsFrom">
            <summary>Running tests from</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestRunSummary">
            <summary>Test run summary:</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.FromFile">
            <summary>from</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.StackFrameAt">
            <summary>at</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.StackFrameIn">
            <summary>in</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TerminalNoAnsiOptionDescription">
            <summary>Disable outputting ANSI escape characters to screen.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TerminalNoProgressOptionDescription">
            <summary>Disable reporting progress to screen.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TerminalTestReporterDescription">
            <summary>Writes test results to terminal.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TerminalTestReporterDisplayName">
            <summary>Terminal test reporter</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TerminalOutputOptionDescription">
            <summary>Output verbosity when reporting tests.
            Valid values are 'Normal', 'Detailed'. Default is 'Normal'.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TerminalOutputOptionInvalidArgument">
            <summary>--output expects a single parameter with value 'Normal' or 'Detailed'.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineTimeoutArgumentErrorMessage">
            <summary>'timeout' option should have one argument as string in the format &lt;value&gt;[h|m|s] where 'value' is float</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineTimeoutOptionDescription">
            <summary>A global test execution timeout.
            Takes one argument as string in the format &lt;value&gt;[h|m|s] where 'value' is float.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.LoggerFactoryNotReady">
            <summary>The ILoggerFactory has not been built yet.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.MessageBusNotReady">
            <summary>The message bus has not been built yet or is no more usable at this stage.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineOptionsNotReady">
            <summary>The ICommandLineOptions has not been built yet.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.MissingClientPortFoJsonRpc">
            <summary>Expected --client-port when jsonRpc protocol is used.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.StandardError">
            <summary>Error output</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.StandardOutput">
            <summary>Standard output</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.DiscoveringTestsFrom">
            <summary>Discovering tests from</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestDiscoverySummary">
            <summary>Discovered {0} tests in {1} assemblies.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.DiscoveredTestsInAssembly">
            <summary>Discovered {0} tests in assembly</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.TestDiscoverySummarySingular">
            <summary>Discovered {0} tests.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ExitCode">
            <summary>Exit code</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineParserResponseFileNotFound">
            <summary>The response file '{0}' was not found</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.CommandLineParserFailedToReadResponseFile">
            <summary>Failed to read response file '{0}'. {1}.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineMinimumExpectedTestsOptionDescription">
            <summary>Specifies the minimum number of tests that are expected to run.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineConfigFileOptionDescription">
            <summary>Specifies a testconfig.json file.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ConfigurationFileNotFound">
            <summary>The configuration file '{0}' specified with '--config-file' could not be found.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ActiveTestsRunning_MoreTestsCount">
            <summary>and {0} more</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ActiveTestsRunning_FullTestsCount">
            <summary>{0} tests running</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.StartingTestSession">
            <summary>Starting test session.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.StartingTestSessionWithLogFilePath">
            <summary>Starting test session. The log file path is '{0}'.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.FinishedTestSession">
            <summary>Finished test session.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ServerTestHostDisplayName">
            <summary>Server mode test host</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ServerTestHostDescription">
            <summary>The 'ITestHost' implementation used when running server mode.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.UnobservedTaskExceptionWarningMessage">
            <summary>[ServerTestHost.OnTaskSchedulerUnobservedTaskException] Unhandled exception: {0}</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ExceptionDuringCancellationWarningMessage">
            <summary>Exception during the cancellation of request id '{0}'</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.PlatformCommandLineMaxFailedTestsOptionDescription">
            <summary>Specifies a maximum number of test failures that, when exceeded, will abort the test run.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.MaxFailedTestsMustBePositive">
            <summary>The option '--maximum-failed-tests' must be a positive integer. The value '{0}' is not valid.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.AbortForMaxFailedTestsDescription">
            <summary>Extension used to support '--maximum-failed-tests'. When a given failures threshold is reached, the test run will be aborted.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.ReachedMaxFailedTestsMessage">
            <summary>Test session is aborting due to reaching failures ('{0}') specified by the '--maximum-failed-tests' option.</summary>
        </member>
        <member name="P:Microsoft.Testing.Platform.Resources.PlatformResources.AbortForMaxFailedTestsCapabilityNotAvailable">
            <summary>The current test framework does not implement 'IGracefulStopTestExecutionCapability' which is required for '--maximum-failed-tests' feature.</summary>
        </member>
        <member name="T:Jsonite.Json">
            <summary>
            A JSON parser and reflector to Dictionary/List.
            </summary>
        </member>
        <member name="M:Jsonite.Json.Deserialize(System.String,Jsonite.JsonSettings)">
            <summary>
            Deserializes the specified json text into an object.
            </summary>
            <param name="text">A json text.</param>
            <param name="settings">The settings used to deserialize.</param>
            <returns>An object representing the deserialized json text</returns>
            <exception cref="T:System.ArgumentNullException">if text is null</exception>
        </member>
        <member name="M:Jsonite.Json.Deserialize(System.IO.TextReader,Jsonite.JsonSettings)">
            <summary>
            Deserializes the specified json text into an object.
            </summary>
            <param name="reader">The reader providing a json text.</param>
            <param name="settings">The settings used to deserialize.</param>
            <returns>An object representing the deserialized json text</returns>
            <exception cref="T:System.ArgumentNullException">if reader is null</exception>
        </member>
        <member name="M:Jsonite.Json.Validate(System.String,Jsonite.JsonSettings)">
            <summary>
            Validates the specified json text.
            </summary>
            <param name="text">A json text.</param>
            <param name="settings">The settings used to deserialize.</param>
            <exception cref="T:System.ArgumentNullException">if reader is null</exception>
            <exception cref="T:Jsonite.JsonException">if the json text is not valid</exception>
        </member>
        <member name="M:Jsonite.Json.Validate(System.IO.TextReader,Jsonite.JsonSettings)">
            <summary>
            Validates the specified json text.
            </summary>
            <param name="reader">The reader providing a json text.</param>
            <param name="settings">The settings used to deserialize.</param>
            <exception cref="T:System.ArgumentNullException">if reader is null</exception>
            <exception cref="T:Jsonite.JsonException">if the json text is not valid</exception>
        </member>
        <member name="M:Jsonite.Json.Serialize(System.Object,Jsonite.JsonSettings)">
            <summary>
            Serializes the specified value to a json text.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="settings">The settings used to serialize.</param>
            <returns>A json string representation of the serialized value</returns>
        </member>
        <member name="M:Jsonite.Json.Serialize(System.Object,System.IO.TextWriter,Jsonite.JsonSettings)">
            <summary>
            Serializes the specified value to a json text.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The output writer that will contains the serialized json text.</param>
            <param name="settings">The settings used to serialize.</param>
        </member>
        <member name="T:Jsonite.Json.JsonReader">
            <summary>
            The internal JsonReader used to deserialize a json text into an object graph.
            </summary>
        </member>
        <member name="T:Jsonite.Json.JsonWriter">
            <summary>
            The internal class used to serialize an object graph to a json text.
            </summary>
        </member>
        <member name="T:Jsonite.JsonObject">
            <summary>
            The default object used when a deserializing to an object type.
            </summary>
        </member>
        <member name="T:Jsonite.JsonArray">
            <summary>
            The default array used when deserializing to an array type.
            </summary>
        </member>
        <member name="T:Jsonite.JsonException">
            <summary>
            Instance exception used when a parsing exception occurred.
            </summary>
            <remarks>
            This exception can be overridden by overriding the method <see cref="M:Jsonite.IJsonReflector.OnDeserializeRaiseParsingError(System.Int32,System.Int32,System.Int32,System.String,System.Exception)"/>.
            </remarks>
        </member>
        <member name="F:Jsonite.JsonException.Offset">
            <summary>
            Character offset from the beginning of the text being parsed.
            </summary>
        </member>
        <member name="F:Jsonite.JsonException.Line">
            <summary>
            Line position (zero-based) where the error occurred from the beginning of the text being parsed.
            </summary>
        </member>
        <member name="F:Jsonite.JsonException.Column">
            <summary>
            Column position (zero-based) where the error occurred.
            </summary>
        </member>
        <member name="M:Jsonite.JsonException.ToString">
            <summary>
            Prints the line (1-based) and column (1-based).
            </summary>
            <returns>A string representation of this object</returns>
        </member>
        <member name="T:Jsonite.JsonSettings">
            <summary>
            Defines serialization and deserialization settings used by <see cref="!:Json.Parse"/> and <see cref="M:Jsonite.Json.Serialize(System.Object,Jsonite.JsonSettings)"/>
            </summary>
        </member>
        <member name="P:Jsonite.JsonSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth used when serializing or deserializing.
            </summary>
        </member>
        <member name="P:Jsonite.JsonSettings.Indent">
            <summary>
            Gets or sets a value indicating to indent the text when serializing. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Jsonite.JsonSettings.IndentCount">
            <summary>
            Gets or sets the number of <see cref="P:Jsonite.JsonSettings.IndentChar"/> used to indent a json output when <see cref="P:Jsonite.JsonSettings.Indent"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Jsonite.JsonSettings.IndentChar">
            <summary>
            Gets or sets the indent character used when <see cref="P:Jsonite.JsonSettings.Indent"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Jsonite.JsonSettings.ParseFloatAsDecimal">
            <summary>
            Gets or sets a value indicating whether floats should be deserialized to decimal instead of double (default).
            </summary>
        </member>
        <member name="P:Jsonite.JsonSettings.ParseValuesAsStrings">
            <summary>
            Gets or sets a value indicating whether all values should be deserialized to strings instead of numbers.
            </summary>
        </member>
        <member name="P:Jsonite.JsonSettings.AllowTrailingCommas">
            <summary>
            Gets or sets a value indicating whether to allow trailing commas in object and array declaration.
            </summary>
        </member>
        <member name="P:Jsonite.JsonSettings.Reflector">
            <summary>
            Gets or sets the reflector used for interfacing the json text to an object graph.
            </summary>
        </member>
        <member name="T:Jsonite.IJsonReflector">
            <summary>
            A callback interface used during the serialization and deserialization.
            </summary>
        </member>
        <member name="M:Jsonite.IJsonReflector.Initialize(Jsonite.JsonSettings)">
            <summary>
            Initializes this instance with the specified settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnDeserializeEnterObject(System.Object,System.Type,System.Object@)">
            <summary>
            Called when starting to deserialize an object.
            </summary>
            <param name="obj">An existing object instance (may be null).</param>
            <param name="expectedType">The expected type (not null).</param>
            <param name="objectContext">The object context that will be passed to other deserialize methods for objects.</param>
            <returns>The object instance to deserialize to. The return value must not be null. This instance can be the input <paramref name="obj"/> if not null, or this method could choose to replace the instance by another during the deserialization.</returns>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnDeserializePrepareMemberForObject(System.Object,System.Object,System.String,System.Type@,System.Object@,System.Object@)">
            <summary>
            Called when deserializing a member, before deserializing its value.
            </summary>
            <param name="objectContext">The object context that was returned by the <see cref="M:Jsonite.IJsonReflector.OnDeserializeEnterObject(System.Object,System.Type,System.Object@)"/></param>
            <param name="obj">The object instance (not null).</param>
            <param name="member">The member name being deserialized.</param>
            <param name="memberType">Expected type of the member.</param>
            <param name="memberContext">The member context that will be passed back to <see cref="M:Jsonite.IJsonReflector.OnDeserializeSetObjectMember(System.Object,System.Object,System.Object,System.Object)"/>.</param>
            <param name="existingMemberValue">The existing member value if any (may be null).</param>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnDeserializeSetObjectMember(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Called when deserializing a member value to effectively set the value for the member on the specified object instance.
            </summary>
            <param name="objectContext">The object context that was returned by the <see cref="M:Jsonite.IJsonReflector.OnDeserializeEnterObject(System.Object,System.Type,System.Object@)"/></param>
            <param name="obj">The object instance (not null).</param>
            <param name="memberContext">The member context that was generated by <see cref="M:Jsonite.IJsonReflector.OnDeserializePrepareMemberForObject(System.Object,System.Object,System.String,System.Type@,System.Object@,System.Object@)"/>.</param>
            <param name="value">The value of the member to set on the object.</param>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnDeserializeExitObject(System.Object,System.Object)">
            <summary>
            Called when deserializing an object is done. This method allows to transform the object to another value.
            </summary>
            <param name="objectContext">The object context.</param>
            <param name="obj">The object instance that has been deserialized.</param>
            <returns>The final object deserialized (may be different from <paramref name="obj"/>)</returns>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnDeserializeEnterArray(System.Object,System.Type,System.Type@,System.Object@)">
            <summary>
            Called when starting to deserialize an array.
            </summary>
            <param name="obj">An existing array instance (may be null).</param>
            <param name="expectedType">The expected type of the array.</param>
            <param name="expectedArrayTypeItem">The expected type of an array item.</param>
            <param name="arrayContext">The array context that will be passed to other deserialize methods for arrays.</param>
            <returns>The array instance to deserialize to. The return value must not be null.</returns>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnDeserializeAddArrayItem(System.Object,System.Object,System.Int32,System.Object)">
            <summary>
            Called when deserializing an array item to add to the specified array instance.
            </summary>
            <param name="arrayContext">The array context that was returned by the <see cref="M:Jsonite.IJsonReflector.OnDeserializeEnterArray(System.Object,System.Type,System.Type@,System.Object@)"/></param>
            <param name="array">The array being deserialized.</param>
            <param name="index">The index of the next element (may be used for plain arrays).</param>
            <param name="value">The value of the item to add to the array.</param>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnDeserializeExitArray(System.Object,System.Object)">
            <summary>
            Called when deserializing an array is done. This method allows to transform the array to another value (transform a list to a plain .NET array for example)
            </summary>
            <param name="arrayContext">The array context that was returned by the <see cref="M:Jsonite.IJsonReflector.OnDeserializeEnterArray(System.Object,System.Type,System.Type@,System.Object@)"/></param>
            <param name="obj">The array instance that has been deserialized.</param>
            <returns>The final array instance deserialized (may be different from <paramref name="obj"/>)</returns>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnDeserializeRaiseParsingError(System.Int32,System.Int32,System.Int32,System.String,System.Exception)">
            <summary>
            Called when an error occurred when deserializing. A default implementation should throw a <see cref="T:Jsonite.JsonException"/>.
            </summary>
            <param name="offset">The character position from the beginning of the buffer being deserialized.</param>
            <param name="line">The line position (zero-based)</param>
            <param name="column">The column position (zero-based)</param>
            <param name="message">The error message.</param>
            <param name="inner">An optional inner exception.</param>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnSerializeGetObjectType(System.Object,System.Type,System.Object@)">
            <summary>
            Called when serializing an object, to determine whether the object is an array or a simple object (with members/properties).
            This method is then used to correctly route to <see cref="M:Jsonite.IJsonReflector.OnSerializeGetObjectMembers(System.Object,System.Object)"/> or <see cref="M:Jsonite.IJsonReflector.OnSerializeGetArrayItems(System.Object,System.Object)"/>.
            </summary>
            <param name="obj">The object instance being serialized</param>
            <param name="type">The type of the object being serialized.</param>
            <param name="objectContext">An object context that will be passed to other serialize methods.</param>
            <returns>The type of the specified object instance (array or object or unknown)</returns>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnSerializeGetObjectMembers(System.Object,System.Object)">
            <summary>
            Called when serializing an object to the members value of this object.
            </summary>
            <param name="objectContext">The object context that was returned by the <see cref="M:Jsonite.IJsonReflector.OnSerializeGetObjectType(System.Object,System.Type,System.Object@)"/></param>
            <param name="obj">The object instance being serialized.</param>
            <returns>An enumeration of members [name, value].</returns>
        </member>
        <member name="M:Jsonite.IJsonReflector.OnSerializeGetArrayItems(System.Object,System.Object)">
            <summary>
            Called when serializing an array to get the array items.
            </summary>
            <param name="objectContext">The object context that was returned by the <see cref="M:Jsonite.IJsonReflector.OnSerializeGetObjectType(System.Object,System.Type,System.Object@)"/></param>
            <param name="array">The object instance being serialized.</param>
            <returns>An enumeration of the array items to serialize.</returns>
        </member>
        <member name="T:Jsonite.JsonObjectType">
            <summary>
            Defines the type of object when serializing (returned by method <see cref="M:Jsonite.IJsonReflector.OnSerializeGetObjectType(System.Object,System.Type,System.Object@)"/>.
            </summary>
        </member>
        <member name="F:Jsonite.JsonObjectType.Unknown">
            <summary>
            The object type being serialized is unkwown.
            </summary>
        </member>
        <member name="F:Jsonite.JsonObjectType.Object">
            <summary>
            The object being serialized is an object with members.
            </summary>
        </member>
        <member name="F:Jsonite.JsonObjectType.Array">
            <summary>
            The object being serialized is an array (providing <see cref="T:System.Collections.IEnumerable"/>)
            </summary>
        </member>
        <member name="T:Jsonite.JsonReflectorDefault">
            <summary>
            The default implementation of <see cref="T:Jsonite.IJsonReflector"/> that allows to deserialize a JSON text to a generic <see cref="T:System.Collections.Generic.IDictionary`2"/> <see cref="T:Jsonite.JsonObject"/> or <see cref="T:Jsonite.JsonArray"/>.
            </summary>
            <seealso cref="T:Jsonite.IJsonReflector" />
        </member>
        <member name="T:PlatformVersion">
            <summary>
            Repository version, created at build time.
            </summary>
        </member>
    </members>
</doc>
