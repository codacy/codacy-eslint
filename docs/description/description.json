[
  {
    "patternId": "accessor-pairs",
    "title": "Accessor pairs",
    "description": "Enforce getter and setter pairs in objects and classes",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "getWithoutSet",
        "description": "getWithoutSet"
      },
      {
        "name": "setWithoutGet",
        "description": "setWithoutGet"
      },
      {
        "name": "enforceForClassMembers",
        "description": "enforceForClassMembers"
      }
    ]
  },
  {
    "patternId": "array-bracket-newline",
    "title": "Array bracket newline",
    "description": "Enforce linebreaks after opening and before closing array brackets",
    "timeToFix": 5
  },
  {
    "patternId": "array-bracket-spacing",
    "title": "Array bracket spacing",
    "description": "Enforce consistent spacing inside array brackets",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "array-callback-return",
    "title": "Array callback return",
    "description": "Enforce `return` statements in callbacks of array methods",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowImplicit",
        "description": "allowImplicit"
      }
    ]
  },
  {
    "patternId": "array-element-newline",
    "title": "Array element newline",
    "description": "Enforce line breaks after each array element",
    "timeToFix": 5
  },
  {
    "patternId": "arrow-body-style",
    "title": "Arrow body style",
    "description": "Require braces around arrow function bodies",
    "timeToFix": 5
  },
  {
    "patternId": "arrow-parens",
    "title": "Arrow parens",
    "description": "Require parentheses around arrow function arguments",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "requireForBlockBody",
        "description": "requireForBlockBody"
      }
    ]
  },
  {
    "patternId": "arrow-spacing",
    "title": "Arrow spacing",
    "description": "Enforce consistent spacing before and after the arrow in arrow functions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ]
  },
  {
    "patternId": "block-scoped-var",
    "title": "Block scoped var",
    "description": "Enforce the use of variables within the scope they are defined",
    "timeToFix": 5
  },
  {
    "patternId": "block-spacing",
    "title": "Block spacing",
    "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "brace-style",
    "title": "Brace style",
    "description": "Enforce consistent brace style for blocks",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowSingleLine",
        "description": "allowSingleLine"
      }
    ]
  },
  {
    "patternId": "callback-return",
    "title": "Callback return",
    "description": "Require `return` statements after callbacks",
    "timeToFix": 5
  },
  {
    "patternId": "camelcase",
    "title": "Camelcase",
    "description": "Enforce camelcase naming convention",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      },
      {
        "name": "ignoreImports",
        "description": "ignoreImports"
      }
    ]
  },
  {
    "patternId": "capitalized-comments",
    "title": "Capitalized comments",
    "description": "Enforce or disallow capitalization of the first letter of a comment",
    "timeToFix": 5
  },
  {
    "patternId": "class-methods-use-this",
    "title": "Class methods use this",
    "description": "Enforce that class methods utilize `this`",
    "timeToFix": 5
  },
  {
    "patternId": "comma-dangle",
    "title": "Comma dangle",
    "description": "Require or disallow trailing commas",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "comma-spacing",
    "title": "Comma spacing",
    "description": "Enforce consistent spacing before and after commas",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ]
  },
  {
    "patternId": "comma-style",
    "title": "Comma style",
    "description": "Enforce consistent comma style",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "complexity",
    "title": "Complexity",
    "description": "Enforce a maximum cyclomatic complexity allowed in a program",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "computed-property-spacing",
    "title": "Computed property spacing",
    "description": "Enforce consistent spacing inside computed property brackets",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "enforceForClassMembers",
        "description": "enforceForClassMembers"
      }
    ]
  },
  {
    "patternId": "consistent-return",
    "title": "Consistent return",
    "description": "Require `return` statements to either always or never specify values",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "treatUndefinedAsUnspecified",
        "description": "treatUndefinedAsUnspecified"
      }
    ]
  },
  {
    "patternId": "consistent-this",
    "title": "Consistent this",
    "description": "Enforce consistent naming when capturing the current execution context",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "constructor-super",
    "title": "Constructor super",
    "description": "Require `super()` calls in constructors",
    "timeToFix": 5
  },
  {
    "patternId": "curly",
    "title": "Curly",
    "description": "Enforce consistent brace style for all control statements",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "default-case",
    "title": "Default case",
    "description": "Require `default` cases in `switch` statements",
    "timeToFix": 5
  },
  {
    "patternId": "default-param-last",
    "title": "Default param last",
    "description": "Enforce default parameters to be last",
    "timeToFix": 5
  },
  {
    "patternId": "dot-location",
    "title": "Dot location",
    "description": "Enforce consistent newlines before and after dots",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "dot-notation",
    "title": "Dot notation",
    "description": "Enforce dot notation whenever possible",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowKeywords",
        "description": "allowKeywords"
      },
      {
        "name": "allowPattern",
        "description": "allowPattern"
      }
    ]
  },
  {
    "patternId": "eol-last",
    "title": "Eol last",
    "description": "Require or disallow newline at the end of files",
    "timeToFix": 5
  },
  {
    "patternId": "eqeqeq",
    "title": "Eqeqeq",
    "description": "Require the use of `===` and `!==`",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "for-direction",
    "title": "For direction",
    "description": "Enforce \"for\" loop update clause moving the counter in the right direction.",
    "timeToFix": 5
  },
  {
    "patternId": "func-call-spacing",
    "title": "Func call spacing",
    "description": "Require or disallow spacing between function identifiers and their invocations",
    "timeToFix": 5
  },
  {
    "patternId": "func-name-matching",
    "title": "Func name matching",
    "description": "Require function names to match the name of the variable or property to which they are assigned",
    "timeToFix": 5
  },
  {
    "patternId": "func-names",
    "title": "Func names",
    "description": "Require or disallow named `function` expressions",
    "timeToFix": 5
  },
  {
    "patternId": "func-style",
    "title": "Func style",
    "description": "Enforce the consistent use of either `function` declarations or expressions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowArrowFunctions",
        "description": "allowArrowFunctions"
      }
    ]
  },
  {
    "patternId": "function-call-argument-newline",
    "title": "Function call argument newline",
    "description": "Enforce line breaks between arguments of a function call",
    "timeToFix": 5
  },
  {
    "patternId": "function-paren-newline",
    "title": "Function paren newline",
    "description": "Enforce consistent line breaks inside function parentheses",
    "timeToFix": 5
  },
  {
    "patternId": "generator-star-spacing",
    "title": "Generator star spacing",
    "description": "Enforce consistent spacing around `*` operators in generator functions",
    "timeToFix": 5
  },
  {
    "patternId": "getter-return",
    "title": "Getter return",
    "description": "Enforce `return` statements in getters",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowImplicit",
        "description": "allowImplicit"
      }
    ]
  },
  {
    "patternId": "global-require",
    "title": "Global require",
    "description": "Require `require()` calls to be placed at top-level module scope",
    "timeToFix": 5
  },
  {
    "patternId": "grouped-accessor-pairs",
    "title": "Grouped accessor pairs",
    "description": "Require grouped accessor pairs in object literals and classes",
    "timeToFix": 5
  },
  {
    "patternId": "guard-for-in",
    "title": "Guard for in",
    "description": "Require `for-in` loops to include an `if` statement",
    "timeToFix": 5
  },
  {
    "patternId": "handle-callback-err",
    "title": "Handle callback err",
    "description": "Require error handling in callbacks",
    "timeToFix": 5
  },
  {
    "patternId": "id-blacklist",
    "title": "Id blacklist",
    "description": "Disallow specified identifiers",
    "timeToFix": 5
  },
  {
    "patternId": "id-length",
    "title": "Id length",
    "description": "Enforce minimum and maximum identifier lengths",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "min",
        "description": "min"
      }
    ]
  },
  {
    "patternId": "id-match",
    "title": "Id match",
    "description": "Require identifiers to match a specified regular expression",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "properties",
        "description": "properties"
      },
      {
        "name": "onlyDeclarations",
        "description": "onlyDeclarations"
      },
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      }
    ]
  },
  {
    "patternId": "implicit-arrow-linebreak",
    "title": "Implicit arrow linebreak",
    "description": "Enforce the location of arrow function bodies",
    "timeToFix": 5
  },
  {
    "patternId": "indent",
    "title": "Indent",
    "description": "Enforce consistent indentation",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "SwitchCase",
        "description": "SwitchCase"
      },
      {
        "name": "flatTernaryExpressions",
        "description": "flatTernaryExpressions"
      },
      {
        "name": "ignoreComments",
        "description": "ignoreComments"
      }
    ]
  },
  {
    "patternId": "indent-legacy",
    "title": "Indent legacy",
    "description": "Enforce consistent indentation",
    "timeToFix": 5
  },
  {
    "patternId": "init-declarations",
    "title": "Init declarations",
    "description": "Require or disallow initialization in variable declarations",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "jsx-quotes",
    "title": "Jsx quotes",
    "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "key-spacing",
    "title": "Key spacing",
    "description": "Enforce consistent spacing between keys and values in object literal properties",
    "timeToFix": 5
  },
  {
    "patternId": "keyword-spacing",
    "title": "Keyword spacing",
    "description": "Enforce consistent spacing before and after keywords",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ]
  },
  {
    "patternId": "line-comment-position",
    "title": "Line comment position",
    "description": "Enforce position of line comments",
    "timeToFix": 5
  },
  {
    "patternId": "linebreak-style",
    "title": "Linebreak style",
    "description": "Enforce consistent linebreak style",
    "timeToFix": 5
  },
  {
    "patternId": "lines-around-comment",
    "title": "Lines around comment",
    "description": "Require empty lines around comments",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "beforeBlockComment",
        "description": "beforeBlockComment"
      },
      {
        "name": "afterBlockComment",
        "description": "afterBlockComment"
      },
      {
        "name": "beforeLineComment",
        "description": "beforeLineComment"
      },
      {
        "name": "afterLineComment",
        "description": "afterLineComment"
      },
      {
        "name": "allowBlockStart",
        "description": "allowBlockStart"
      },
      {
        "name": "allowBlockEnd",
        "description": "allowBlockEnd"
      }
    ]
  },
  {
    "patternId": "lines-around-directive",
    "title": "Lines around directive",
    "description": "Require or disallow newlines around directives",
    "timeToFix": 5
  },
  {
    "patternId": "lines-between-class-members",
    "title": "Lines between class members",
    "description": "Require or disallow an empty line between class members",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "exceptAfterSingleLine",
        "description": "exceptAfterSingleLine"
      }
    ]
  },
  {
    "patternId": "max-classes-per-file",
    "title": "Max classes per file",
    "description": "Enforce a maximum number of classes per file",
    "timeToFix": 5
  },
  {
    "patternId": "max-depth",
    "title": "Max depth",
    "description": "Enforce a maximum depth that blocks can be nested",
    "timeToFix": 5
  },
  {
    "patternId": "max-len",
    "title": "Max len",
    "description": "Enforce a maximum line length",
    "timeToFix": 5
  },
  {
    "patternId": "max-lines",
    "title": "Max lines",
    "description": "Enforce a maximum number of lines per file",
    "timeToFix": 5
  },
  {
    "patternId": "max-lines-per-function",
    "title": "Max lines per function",
    "description": "Enforce a maximum number of line of code in a function",
    "timeToFix": 5
  },
  {
    "patternId": "max-nested-callbacks",
    "title": "Max nested callbacks",
    "description": "Enforce a maximum depth that callbacks can be nested",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "max-params",
    "title": "Max params",
    "description": "Enforce a maximum number of parameters in function definitions",
    "timeToFix": 5
  },
  {
    "patternId": "max-statements",
    "title": "Max statements",
    "description": "Enforce a maximum number of statements allowed in function blocks",
    "timeToFix": 5
  },
  {
    "patternId": "max-statements-per-line",
    "title": "Max statements per line",
    "description": "Enforce a maximum number of statements allowed per line",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "max",
        "description": "max"
      }
    ]
  },
  {
    "patternId": "multiline-comment-style",
    "title": "Multiline comment style",
    "description": "Enforce a particular style for multiline comments",
    "timeToFix": 5
  },
  {
    "patternId": "multiline-ternary",
    "title": "Multiline ternary",
    "description": "Enforce newlines between operands of ternary expressions",
    "timeToFix": 5
  },
  {
    "patternId": "new-cap",
    "title": "New cap",
    "description": "Require constructor names to begin with a capital letter",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "newIsCap",
        "description": "newIsCap"
      },
      {
        "name": "capIsNew",
        "description": "capIsNew"
      },
      {
        "name": "properties",
        "description": "properties"
      }
    ]
  },
  {
    "patternId": "new-parens",
    "title": "New parens",
    "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
    "timeToFix": 5
  },
  {
    "patternId": "newline-after-var",
    "title": "Newline after var",
    "description": "Require or disallow an empty line after variable declarations",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "newline-before-return",
    "title": "Newline before return",
    "description": "Require an empty line before `return` statements",
    "timeToFix": 5
  },
  {
    "patternId": "newline-per-chained-call",
    "title": "Newline per chained call",
    "description": "Require a newline after each call in a method chain",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreChainWithDepth",
        "description": "ignoreChainWithDepth"
      }
    ]
  },
  {
    "patternId": "no-alert",
    "title": "No alert",
    "description": "Disallow the use of `alert`, `confirm`, and `prompt`",
    "timeToFix": 5
  },
  {
    "patternId": "no-array-constructor",
    "title": "No array constructor",
    "description": "Disallow `Array` constructors",
    "timeToFix": 5
  },
  {
    "patternId": "no-async-promise-executor",
    "title": "No async promise executor",
    "description": "Disallow using an async function as a Promise executor",
    "timeToFix": 5
  },
  {
    "patternId": "no-await-in-loop",
    "title": "No await in loop",
    "description": "Disallow `await` inside of loops",
    "timeToFix": 5
  },
  {
    "patternId": "no-bitwise",
    "title": "No bitwise",
    "description": "Disallow bitwise operators",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "int32Hint",
        "description": "int32Hint"
      }
    ]
  },
  {
    "patternId": "no-buffer-constructor",
    "title": "No buffer constructor",
    "description": "Disallow use of the `Buffer()` constructor",
    "timeToFix": 5
  },
  {
    "patternId": "no-caller",
    "title": "No caller",
    "description": "Disallow the use of `arguments.caller` or `arguments.callee`",
    "timeToFix": 5
  },
  {
    "patternId": "no-case-declarations",
    "title": "No case declarations",
    "description": "Disallow lexical declarations in case clauses",
    "timeToFix": 5
  },
  {
    "patternId": "no-catch-shadow",
    "title": "No catch shadow",
    "description": "Disallow `catch` clause parameters from shadowing variables in the outer scope",
    "timeToFix": 5
  },
  {
    "patternId": "no-class-assign",
    "title": "No class assign",
    "description": "Disallow reassigning class members",
    "timeToFix": 5
  },
  {
    "patternId": "no-compare-neg-zero",
    "title": "No compare neg zero",
    "description": "Disallow comparing against -0",
    "timeToFix": 5
  },
  {
    "patternId": "no-cond-assign",
    "title": "No cond assign",
    "description": "Disallow assignment operators in conditional expressions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "no-confusing-arrow",
    "title": "No confusing arrow",
    "description": "Disallow arrow functions where they could be confused with comparisons",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowParens",
        "description": "allowParens"
      }
    ]
  },
  {
    "patternId": "no-console",
    "title": "No console",
    "description": "Disallow the use of `console`",
    "timeToFix": 5
  },
  {
    "patternId": "no-const-assign",
    "title": "No const assign",
    "description": "Disallow reassigning `const` variables",
    "timeToFix": 5
  },
  {
    "patternId": "no-constant-condition",
    "title": "No constant condition",
    "description": "Disallow constant expressions in conditions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "checkLoops",
        "description": "checkLoops"
      }
    ]
  },
  {
    "patternId": "no-constructor-return",
    "title": "No constructor return",
    "description": "Disallow returning value from constructor",
    "timeToFix": 5
  },
  {
    "patternId": "no-continue",
    "title": "No continue",
    "description": "Disallow `continue` statements",
    "timeToFix": 5
  },
  {
    "patternId": "no-control-regex",
    "title": "No control regex",
    "description": "Disallow control characters in regular expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-debugger",
    "title": "No debugger",
    "description": "Disallow the use of `debugger`",
    "timeToFix": 5
  },
  {
    "patternId": "no-delete-var",
    "title": "No delete var",
    "description": "Disallow deleting variables",
    "timeToFix": 5
  },
  {
    "patternId": "no-div-regex",
    "title": "No div regex",
    "description": "Disallow division operators explicitly at the beginning of regular expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-dupe-args",
    "title": "No dupe args",
    "description": "Disallow duplicate arguments in `function` definitions",
    "timeToFix": 5
  },
  {
    "patternId": "no-dupe-class-members",
    "title": "No dupe class members",
    "description": "Disallow duplicate class members",
    "timeToFix": 5
  },
  {
    "patternId": "no-dupe-else-if",
    "title": "No dupe else if",
    "description": "Disallow duplicate conditions in if-else-if chains",
    "timeToFix": 5
  },
  {
    "patternId": "no-dupe-keys",
    "title": "No dupe keys",
    "description": "Disallow duplicate keys in object literals",
    "timeToFix": 5
  },
  {
    "patternId": "no-duplicate-case",
    "title": "No duplicate case",
    "description": "Disallow duplicate case labels",
    "timeToFix": 5
  },
  {
    "patternId": "no-duplicate-imports",
    "title": "No duplicate imports",
    "description": "Disallow duplicate module imports",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "includeExports",
        "description": "includeExports"
      }
    ]
  },
  {
    "patternId": "no-else-return",
    "title": "No else return",
    "description": "Disallow `else` blocks after `return` statements in `if` statements",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowElseIf",
        "description": "allowElseIf"
      }
    ]
  },
  {
    "patternId": "no-empty",
    "title": "No empty",
    "description": "Disallow empty block statements",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowEmptyCatch",
        "description": "allowEmptyCatch"
      }
    ]
  },
  {
    "patternId": "no-empty-character-class",
    "title": "No empty character class",
    "description": "Disallow empty character classes in regular expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-empty-function",
    "title": "No empty function",
    "description": "Disallow empty functions",
    "timeToFix": 5
  },
  {
    "patternId": "no-empty-pattern",
    "title": "No empty pattern",
    "description": "Disallow empty destructuring patterns",
    "timeToFix": 5
  },
  {
    "patternId": "no-eq-null",
    "title": "No eq null",
    "description": "Disallow `null` comparisons without type-checking operators",
    "timeToFix": 5
  },
  {
    "patternId": "no-eval",
    "title": "No eval",
    "description": "Disallow the use of `eval()`",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowIndirect",
        "description": "allowIndirect"
      }
    ]
  },
  {
    "patternId": "no-ex-assign",
    "title": "No ex assign",
    "description": "Disallow reassigning exceptions in `catch` clauses",
    "timeToFix": 5
  },
  {
    "patternId": "no-extend-native",
    "title": "No extend native",
    "description": "Disallow extending native types",
    "timeToFix": 5
  },
  {
    "patternId": "no-extra-bind",
    "title": "No extra bind",
    "description": "Disallow unnecessary calls to `.bind()`",
    "timeToFix": 5
  },
  {
    "patternId": "no-extra-boolean-cast",
    "title": "No extra boolean cast",
    "description": "Disallow unnecessary boolean casts",
    "timeToFix": 5
  },
  {
    "patternId": "no-extra-label",
    "title": "No extra label",
    "description": "Disallow unnecessary labels",
    "timeToFix": 5
  },
  {
    "patternId": "no-extra-parens",
    "title": "No extra parens",
    "description": "Disallow unnecessary parentheses",
    "timeToFix": 5
  },
  {
    "patternId": "no-extra-semi",
    "title": "No extra semi",
    "description": "Disallow unnecessary semicolons",
    "timeToFix": 5
  },
  {
    "patternId": "no-fallthrough",
    "title": "No fallthrough",
    "description": "Disallow fallthrough of `case` statements",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "commentPattern",
        "description": "commentPattern"
      }
    ]
  },
  {
    "patternId": "no-floating-decimal",
    "title": "No floating decimal",
    "description": "Disallow leading or trailing decimal points in numeric literals",
    "timeToFix": 5
  },
  {
    "patternId": "no-func-assign",
    "title": "No func assign",
    "description": "Disallow reassigning `function` declarations",
    "timeToFix": 5
  },
  {
    "patternId": "no-global-assign",
    "title": "No global assign",
    "description": "Disallow assignments to native objects or read-only global variables",
    "timeToFix": 5
  },
  {
    "patternId": "no-implicit-coercion",
    "title": "No implicit coercion",
    "description": "Disallow shorthand type conversions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "boolean",
        "description": "boolean"
      },
      {
        "name": "number",
        "description": "number"
      },
      {
        "name": "string",
        "description": "string"
      }
    ]
  },
  {
    "patternId": "no-implicit-globals",
    "title": "No implicit globals",
    "description": "Disallow declarations in the global scope",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "lexicalBindings",
        "description": "lexicalBindings"
      }
    ]
  },
  {
    "patternId": "no-implied-eval",
    "title": "No implied eval",
    "description": "Disallow the use of `eval()`-like methods",
    "timeToFix": 5
  },
  {
    "patternId": "no-import-assign",
    "title": "No import assign",
    "description": "Disallow assigning to imported bindings",
    "timeToFix": 5
  },
  {
    "patternId": "no-inline-comments",
    "title": "No inline comments",
    "description": "Disallow inline comments after code",
    "timeToFix": 5
  },
  {
    "patternId": "no-inner-declarations",
    "title": "No inner declarations",
    "description": "Disallow variable or `function` declarations in nested blocks",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "no-invalid-regexp",
    "title": "No invalid regexp",
    "description": "Disallow invalid regular expression strings in `RegExp` constructors",
    "timeToFix": 5
  },
  {
    "patternId": "no-invalid-this",
    "title": "No invalid this",
    "description": "Disallow `this` keywords outside of classes or class-like objects",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "capIsConstructor",
        "description": "capIsConstructor"
      }
    ]
  },
  {
    "patternId": "no-irregular-whitespace",
    "title": "No irregular whitespace",
    "description": "Disallow irregular whitespace",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "skipComments",
        "description": "skipComments"
      },
      {
        "name": "skipStrings",
        "description": "skipStrings"
      },
      {
        "name": "skipTemplates",
        "description": "skipTemplates"
      },
      {
        "name": "skipRegExps",
        "description": "skipRegExps"
      }
    ]
  },
  {
    "patternId": "no-iterator",
    "title": "No iterator",
    "description": "Disallow the use of the `__iterator__` property",
    "timeToFix": 5
  },
  {
    "patternId": "no-label-var",
    "title": "No label var",
    "description": "Disallow labels that share a name with a variable",
    "timeToFix": 5
  },
  {
    "patternId": "no-labels",
    "title": "No labels",
    "description": "Disallow labeled statements",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowLoop",
        "description": "allowLoop"
      },
      {
        "name": "allowSwitch",
        "description": "allowSwitch"
      }
    ]
  },
  {
    "patternId": "no-lone-blocks",
    "title": "No lone blocks",
    "description": "Disallow unnecessary nested blocks",
    "timeToFix": 5
  },
  {
    "patternId": "no-lonely-if",
    "title": "No lonely if",
    "description": "Disallow `if` statements as the only statement in `else` blocks",
    "timeToFix": 5
  },
  {
    "patternId": "no-loop-func",
    "title": "No loop func",
    "description": "Disallow function declarations that contain unsafe references inside loop statements",
    "timeToFix": 5
  },
  {
    "patternId": "no-magic-numbers",
    "title": "No magic numbers",
    "description": "Disallow magic numbers",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "detectObjects",
        "description": "detectObjects"
      },
      {
        "name": "enforceConst",
        "description": "enforceConst"
      },
      {
        "name": "ignoreArrayIndexes",
        "description": "ignoreArrayIndexes"
      }
    ]
  },
  {
    "patternId": "no-misleading-character-class",
    "title": "No misleading character class",
    "description": "Disallow characters which are made with multiple code points in character class syntax",
    "timeToFix": 5
  },
  {
    "patternId": "no-mixed-operators",
    "title": "No mixed operators",
    "description": "Disallow mixed binary operators",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowSamePrecedence",
        "description": "allowSamePrecedence"
      }
    ]
  },
  {
    "patternId": "no-mixed-requires",
    "title": "No mixed requires",
    "description": "Disallow `require` calls to be mixed with regular variable declarations",
    "timeToFix": 5
  },
  {
    "patternId": "no-mixed-spaces-and-tabs",
    "title": "No mixed spaces and tabs",
    "description": "Disallow mixed spaces and tabs for indentation",
    "timeToFix": 5
  },
  {
    "patternId": "no-multi-assign",
    "title": "No multi assign",
    "description": "Disallow use of chained assignment expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-multi-spaces",
    "title": "No multi spaces",
    "description": "Disallow multiple spaces",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreEOLComments",
        "description": "ignoreEOLComments"
      }
    ]
  },
  {
    "patternId": "no-multi-str",
    "title": "No multi str",
    "description": "Disallow multiline strings",
    "timeToFix": 5
  },
  {
    "patternId": "no-multiple-empty-lines",
    "title": "No multiple empty lines",
    "description": "Disallow multiple empty lines",
    "timeToFix": 5
  },
  {
    "patternId": "no-native-reassign",
    "title": "No native reassign",
    "description": "Disallow assignments to native objects or read-only global variables",
    "timeToFix": 5
  },
  {
    "patternId": "no-negated-condition",
    "title": "No negated condition",
    "description": "Disallow negated conditions",
    "timeToFix": 5
  },
  {
    "patternId": "no-negated-in-lhs",
    "title": "No negated in lhs",
    "description": "Disallow negating the left operand in `in` expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-nested-ternary",
    "title": "No nested ternary",
    "description": "Disallow nested ternary expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-new",
    "title": "No new",
    "description": "Disallow `new` operators outside of assignments or comparisons",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-func",
    "title": "No new func",
    "description": "Disallow `new` operators with the `Function` object",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-object",
    "title": "No new object",
    "description": "Disallow `Object` constructors",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-require",
    "title": "No new require",
    "description": "Disallow `new` operators with calls to `require`",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-symbol",
    "title": "No new symbol",
    "description": "Disallow `new` operators with the `Symbol` object",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-wrappers",
    "title": "No new wrappers",
    "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
    "timeToFix": 5
  },
  {
    "patternId": "no-obj-calls",
    "title": "No obj calls",
    "description": "Disallow calling global object properties as functions",
    "timeToFix": 5
  },
  {
    "patternId": "no-octal",
    "title": "No octal",
    "description": "Disallow octal literals",
    "timeToFix": 5
  },
  {
    "patternId": "no-octal-escape",
    "title": "No octal escape",
    "description": "Disallow octal escape sequences in string literals",
    "timeToFix": 5
  },
  {
    "patternId": "no-param-reassign",
    "title": "No param reassign",
    "description": "Disallow reassigning `function` parameters",
    "timeToFix": 5
  },
  {
    "patternId": "no-path-concat",
    "title": "No path concat",
    "description": "Disallow string concatenation with `__dirname` and `__filename`",
    "timeToFix": 5
  },
  {
    "patternId": "no-plusplus",
    "title": "No plusplus",
    "description": "Disallow the unary operators `++` and `--`",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowForLoopAfterthoughts",
        "description": "allowForLoopAfterthoughts"
      }
    ]
  },
  {
    "patternId": "no-process-env",
    "title": "No process env",
    "description": "Disallow the use of `process.env`",
    "timeToFix": 5
  },
  {
    "patternId": "no-process-exit",
    "title": "No process exit",
    "description": "Disallow the use of `process.exit()`",
    "timeToFix": 5
  },
  {
    "patternId": "no-proto",
    "title": "No proto",
    "description": "Disallow the use of the `__proto__` property",
    "timeToFix": 5
  },
  {
    "patternId": "no-prototype-builtins",
    "title": "No prototype builtins",
    "description": "Disallow calling some `Object.prototype` methods directly on objects",
    "timeToFix": 5
  },
  {
    "patternId": "no-redeclare",
    "title": "No redeclare",
    "description": "Disallow variable redeclaration",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "builtinGlobals",
        "description": "builtinGlobals"
      }
    ]
  },
  {
    "patternId": "no-regex-spaces",
    "title": "No regex spaces",
    "description": "Disallow multiple spaces in regular expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-restricted-globals",
    "title": "No restricted globals",
    "description": "Disallow specified global variables",
    "timeToFix": 5
  },
  {
    "patternId": "no-restricted-imports",
    "title": "No restricted imports",
    "description": "Disallow specified modules when loaded by `import`",
    "timeToFix": 5
  },
  {
    "patternId": "no-restricted-modules",
    "title": "No restricted modules",
    "description": "Disallow specified modules when loaded by `require`",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "no-restricted-properties",
    "title": "No restricted properties",
    "description": "Disallow certain properties on certain objects",
    "timeToFix": 5
  },
  {
    "patternId": "no-restricted-syntax",
    "title": "No restricted syntax",
    "description": "Disallow specified syntax",
    "timeToFix": 5
  },
  {
    "patternId": "no-return-assign",
    "title": "No return assign",
    "description": "Disallow assignment operators in `return` statements",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "no-return-await",
    "title": "No return await",
    "description": "Disallow unnecessary `return await`",
    "timeToFix": 5
  },
  {
    "patternId": "no-script-url",
    "title": "No script url",
    "description": "Disallow `javascript:` urls",
    "timeToFix": 5
  },
  {
    "patternId": "no-self-assign",
    "title": "No self assign",
    "description": "Disallow assignments where both sides are exactly the same",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "props",
        "description": "props"
      }
    ]
  },
  {
    "patternId": "no-self-compare",
    "title": "No self compare",
    "description": "Disallow comparisons where both sides are exactly the same",
    "timeToFix": 5
  },
  {
    "patternId": "no-sequences",
    "title": "No sequences",
    "description": "Disallow comma operators",
    "timeToFix": 5
  },
  {
    "patternId": "no-setter-return",
    "title": "No setter return",
    "description": "Disallow returning values from setters",
    "timeToFix": 5
  },
  {
    "patternId": "no-shadow",
    "title": "No shadow",
    "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "builtinGlobals",
        "description": "builtinGlobals"
      },
      {
        "name": "hoist",
        "description": "hoist"
      }
    ]
  },
  {
    "patternId": "no-shadow-restricted-names",
    "title": "No shadow restricted names",
    "description": "Disallow identifiers from shadowing restricted names",
    "timeToFix": 5
  },
  {
    "patternId": "no-spaced-func",
    "title": "No spaced func",
    "description": "Disallow spacing between function identifiers and their applications (deprecated)",
    "timeToFix": 5
  },
  {
    "patternId": "no-sparse-arrays",
    "title": "No sparse arrays",
    "description": "Disallow sparse arrays",
    "timeToFix": 5
  },
  {
    "patternId": "no-sync",
    "title": "No sync",
    "description": "Disallow synchronous methods",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowAtRootLevel",
        "description": "allowAtRootLevel"
      }
    ]
  },
  {
    "patternId": "no-tabs",
    "title": "No tabs",
    "description": "Disallow all tabs",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowIndentationTabs",
        "description": "allowIndentationTabs"
      }
    ]
  },
  {
    "patternId": "no-template-curly-in-string",
    "title": "No template curly in string",
    "description": "Disallow template literal placeholder syntax in regular strings",
    "timeToFix": 5
  },
  {
    "patternId": "no-ternary",
    "title": "No ternary",
    "description": "Disallow ternary operators",
    "timeToFix": 5
  },
  {
    "patternId": "no-this-before-super",
    "title": "No this before super",
    "description": "Disallow `this`/`super` before calling `super()` in constructors",
    "timeToFix": 5
  },
  {
    "patternId": "no-throw-literal",
    "title": "No throw literal",
    "description": "Disallow throwing literals as exceptions",
    "timeToFix": 5
  },
  {
    "patternId": "no-trailing-spaces",
    "title": "No trailing spaces",
    "description": "Disallow trailing whitespace at the end of lines",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "skipBlankLines",
        "description": "skipBlankLines"
      },
      {
        "name": "ignoreComments",
        "description": "ignoreComments"
      }
    ]
  },
  {
    "patternId": "no-undef",
    "title": "No undef",
    "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "typeof",
        "description": "typeof"
      }
    ]
  },
  {
    "patternId": "no-undef-init",
    "title": "No undef init",
    "description": "Disallow initializing variables to `undefined`",
    "timeToFix": 5
  },
  {
    "patternId": "no-undefined",
    "title": "No undefined",
    "description": "Disallow the use of `undefined` as an identifier",
    "timeToFix": 5
  },
  {
    "patternId": "no-underscore-dangle",
    "title": "No underscore dangle",
    "description": "Disallow dangling underscores in identifiers",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowAfterThis",
        "description": "allowAfterThis"
      },
      {
        "name": "allowAfterSuper",
        "description": "allowAfterSuper"
      },
      {
        "name": "allowAfterThisConstructor",
        "description": "allowAfterThisConstructor"
      },
      {
        "name": "enforceInMethodNames",
        "description": "enforceInMethodNames"
      }
    ]
  },
  {
    "patternId": "no-unexpected-multiline",
    "title": "No unexpected multiline",
    "description": "Disallow confusing multiline expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-unmodified-loop-condition",
    "title": "No unmodified loop condition",
    "description": "Disallow unmodified loop conditions",
    "timeToFix": 5
  },
  {
    "patternId": "no-unneeded-ternary",
    "title": "No unneeded ternary",
    "description": "Disallow ternary operators when simpler alternatives exist",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "defaultAssignment",
        "description": "defaultAssignment"
      }
    ]
  },
  {
    "patternId": "no-unreachable",
    "title": "No unreachable",
    "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
    "timeToFix": 5
  },
  {
    "patternId": "no-unsafe-finally",
    "title": "No unsafe finally",
    "description": "Disallow control flow statements in `finally` blocks",
    "timeToFix": 5
  },
  {
    "patternId": "no-unsafe-negation",
    "title": "No unsafe negation",
    "description": "Disallow negating the left operand of relational operators",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "enforceForOrderingRelations",
        "description": "enforceForOrderingRelations"
      }
    ]
  },
  {
    "patternId": "no-unused-expressions",
    "title": "No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "allowShortCircuit"
      },
      {
        "name": "allowTernary",
        "description": "allowTernary"
      },
      {
        "name": "allowTaggedTemplates",
        "description": "allowTaggedTemplates"
      }
    ]
  },
  {
    "patternId": "no-unused-labels",
    "title": "No unused labels",
    "description": "Disallow unused labels",
    "timeToFix": 5
  },
  {
    "patternId": "no-unused-vars",
    "title": "No unused vars",
    "description": "Disallow unused variables",
    "timeToFix": 5
  },
  {
    "patternId": "no-use-before-define",
    "title": "No use before define",
    "description": "Disallow the use of variables before they are defined",
    "timeToFix": 5
  },
  {
    "patternId": "no-useless-call",
    "title": "No useless call",
    "description": "Disallow unnecessary calls to `.call()` and `.apply()`",
    "timeToFix": 5
  },
  {
    "patternId": "no-useless-catch",
    "title": "No useless catch",
    "description": "Disallow unnecessary `catch` clauses",
    "timeToFix": 5
  },
  {
    "patternId": "no-useless-computed-key",
    "title": "No useless computed key",
    "description": "Disallow unnecessary computed property keys in objects and classes",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "enforceForClassMembers",
        "description": "enforceForClassMembers"
      }
    ]
  },
  {
    "patternId": "no-useless-concat",
    "title": "No useless concat",
    "description": "Disallow unnecessary concatenation of literals or template literals",
    "timeToFix": 5
  },
  {
    "patternId": "no-useless-constructor",
    "title": "No useless constructor",
    "description": "Disallow unnecessary constructors",
    "timeToFix": 5
  },
  {
    "patternId": "no-useless-escape",
    "title": "No useless escape",
    "description": "Disallow unnecessary escape characters",
    "timeToFix": 5
  },
  {
    "patternId": "no-useless-rename",
    "title": "No useless rename",
    "description": "Disallow renaming import, export, and destructured assignments to the same name",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      },
      {
        "name": "ignoreImport",
        "description": "ignoreImport"
      },
      {
        "name": "ignoreExport",
        "description": "ignoreExport"
      }
    ]
  },
  {
    "patternId": "no-useless-return",
    "title": "No useless return",
    "description": "Disallow redundant return statements",
    "timeToFix": 5
  },
  {
    "patternId": "no-var",
    "title": "No var",
    "description": "Require `let` or `const` instead of `var`",
    "timeToFix": 5
  },
  {
    "patternId": "no-void",
    "title": "No void",
    "description": "Disallow `void` operators",
    "timeToFix": 5
  },
  {
    "patternId": "no-warning-comments",
    "title": "No warning comments",
    "description": "Disallow specified warning terms in comments",
    "timeToFix": 5
  },
  {
    "patternId": "no-whitespace-before-property",
    "title": "No whitespace before property",
    "description": "Disallow whitespace before properties",
    "timeToFix": 5
  },
  {
    "patternId": "no-with",
    "title": "No with",
    "description": "Disallow `with` statements",
    "timeToFix": 5
  },
  {
    "patternId": "nonblock-statement-body-position",
    "title": "Nonblock statement body position",
    "description": "Enforce the location of single-line statements",
    "timeToFix": 5
  },
  {
    "patternId": "object-curly-newline",
    "title": "Object curly newline",
    "description": "Enforce consistent line breaks inside braces",
    "timeToFix": 5
  },
  {
    "patternId": "object-curly-spacing",
    "title": "Object curly spacing",
    "description": "Enforce consistent spacing inside braces",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "object-property-newline",
    "title": "Object property newline",
    "description": "Enforce placing object properties on separate lines",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowAllPropertiesOnSameLine",
        "description": "allowAllPropertiesOnSameLine"
      },
      {
        "name": "allowMultiplePropertiesPerLine",
        "description": "allowMultiplePropertiesPerLine"
      }
    ]
  },
  {
    "patternId": "object-shorthand",
    "title": "Object shorthand",
    "description": "Require or disallow method and property shorthand syntax for object literals",
    "timeToFix": 5
  },
  {
    "patternId": "one-var",
    "title": "One var",
    "description": "Enforce variables to be declared either together or separately in functions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "one-var-declaration-per-line",
    "title": "One var declaration per line",
    "description": "Require or disallow newlines around variable declarations",
    "timeToFix": 5
  },
  {
    "patternId": "operator-assignment",
    "title": "Operator assignment",
    "description": "Require or disallow assignment operator shorthand where possible",
    "timeToFix": 5
  },
  {
    "patternId": "operator-linebreak",
    "title": "Operator linebreak",
    "description": "Enforce consistent linebreak style for operators",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "padded-blocks",
    "title": "Padded blocks",
    "description": "Require or disallow padding within blocks",
    "timeToFix": 5
  },
  {
    "patternId": "padding-line-between-statements",
    "title": "Padding line between statements",
    "description": "Require or disallow padding lines between statements",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-arrow-callback",
    "title": "Prefer arrow callback",
    "description": "Require using arrow functions for callbacks",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowNamedFunctions",
        "description": "allowNamedFunctions"
      },
      {
        "name": "allowUnboundThis",
        "description": "allowUnboundThis"
      }
    ]
  },
  {
    "patternId": "prefer-const",
    "title": "Prefer const",
    "description": "Require `const` declarations for variables that are never reassigned after declared",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "destructuring",
        "description": "destructuring"
      },
      {
        "name": "ignoreReadBeforeAssign",
        "description": "ignoreReadBeforeAssign"
      }
    ]
  },
  {
    "patternId": "prefer-destructuring",
    "title": "Prefer destructuring",
    "description": "Require destructuring from arrays and/or objects",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-exponentiation-operator",
    "title": "Prefer exponentiation operator",
    "description": "Disallow the use of `Math.pow` in favor of the `**` operator",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-named-capture-group",
    "title": "Prefer named capture group",
    "description": "Enforce using named capture group in regular expression",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-numeric-literals",
    "title": "Prefer numeric literals",
    "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-object-spread",
    "title": "Prefer object spread",
    "description": "Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-promise-reject-errors",
    "title": "Prefer promise reject errors",
    "description": "Require using Error objects as Promise rejection reasons",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowEmptyReject",
        "description": "allowEmptyReject"
      }
    ]
  },
  {
    "patternId": "prefer-reflect",
    "title": "Prefer reflect",
    "description": "Require `Reflect` methods where applicable",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-regex-literals",
    "title": "Prefer regex literals",
    "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-rest-params",
    "title": "Prefer rest params",
    "description": "Require rest parameters instead of `arguments`",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-spread",
    "title": "Prefer spread",
    "description": "Require spread operators instead of `.apply()`",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-template",
    "title": "Prefer template",
    "description": "Require template literals instead of string concatenation",
    "timeToFix": 5
  },
  {
    "patternId": "quote-props",
    "title": "Quote props",
    "description": "Require quotes around object literal property names",
    "timeToFix": 5
  },
  {
    "patternId": "quotes",
    "title": "Quotes",
    "description": "Enforce the consistent use of either backticks, double, or single quotes",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "radix",
    "title": "Radix",
    "description": "Enforce the consistent use of the radix argument when using `parseInt()`",
    "timeToFix": 5
  },
  {
    "patternId": "require-atomic-updates",
    "title": "Require atomic updates",
    "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
    "timeToFix": 5
  },
  {
    "patternId": "require-await",
    "title": "Require await",
    "description": "Disallow async functions which have no `await` expression",
    "timeToFix": 5
  },
  {
    "patternId": "require-jsdoc",
    "title": "Require jsdoc",
    "description": "Require JSDoc comments",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "require",
        "description": "require"
      }
    ]
  },
  {
    "patternId": "require-unicode-regexp",
    "title": "Require unicode regexp",
    "description": "Enforce the use of `u` flag on RegExp",
    "timeToFix": 5
  },
  {
    "patternId": "require-yield",
    "title": "Require yield",
    "description": "Require generator functions to contain `yield`",
    "timeToFix": 5
  },
  {
    "patternId": "rest-spread-spacing",
    "title": "Rest spread spacing",
    "description": "Enforce spacing between rest and spread operators and their expressions",
    "timeToFix": 5
  },
  {
    "patternId": "semi",
    "title": "Semi",
    "description": "Require or disallow semicolons instead of ASI",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "semi-spacing",
    "title": "Semi spacing",
    "description": "Enforce consistent spacing before and after semicolons",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ]
  },
  {
    "patternId": "semi-style",
    "title": "Semi style",
    "description": "Enforce location of semicolons",
    "timeToFix": 5
  },
  {
    "patternId": "sort-imports",
    "title": "Sort imports",
    "description": "Enforce sorted import declarations within modules",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreCase",
        "description": "ignoreCase"
      },
      {
        "name": "ignoreDeclarationSort",
        "description": "ignoreDeclarationSort"
      },
      {
        "name": "ignoreMemberSort",
        "description": "ignoreMemberSort"
      }
    ]
  },
  {
    "patternId": "sort-keys",
    "title": "Sort keys",
    "description": "Require object keys to be sorted",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      },
      {
        "name": "minKeys",
        "description": "minKeys"
      }
    ]
  },
  {
    "patternId": "sort-vars",
    "title": "Sort vars",
    "description": "Require variables within the same declaration block to be sorted",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreCase",
        "description": "ignoreCase"
      }
    ]
  },
  {
    "patternId": "space-before-blocks",
    "title": "Space before blocks",
    "description": "Enforce consistent spacing before blocks",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "space-before-function-paren",
    "title": "Space before function paren",
    "description": "Enforce consistent spacing before `function` definition opening parenthesis",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "space-in-parens",
    "title": "Space in parens",
    "description": "Enforce consistent spacing inside parentheses",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "space-infix-ops",
    "title": "Space infix ops",
    "description": "Require spacing around infix operators",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "int32Hint",
        "description": "int32Hint"
      }
    ]
  },
  {
    "patternId": "space-unary-ops",
    "title": "Space unary ops",
    "description": "Enforce consistent spacing before or after unary operators",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "words",
        "description": "words"
      },
      {
        "name": "nonwords",
        "description": "nonwords"
      }
    ]
  },
  {
    "patternId": "spaced-comment",
    "title": "Spaced comment",
    "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "strict",
    "title": "Strict",
    "description": "Require or disallow strict mode directives",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ]
  },
  {
    "patternId": "switch-colon-spacing",
    "title": "Switch colon spacing",
    "description": "Enforce spacing around colons of switch statements",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ]
  },
  {
    "patternId": "symbol-description",
    "title": "Symbol description",
    "description": "Require symbol descriptions",
    "timeToFix": 5
  },
  {
    "patternId": "template-curly-spacing",
    "title": "Template curly spacing",
    "description": "Require or disallow spacing around embedded expressions of template strings",
    "timeToFix": 5
  },
  {
    "patternId": "template-tag-spacing",
    "title": "Template tag spacing",
    "description": "Require or disallow spacing between template tags and their literals",
    "timeToFix": 5
  },
  {
    "patternId": "unicode-bom",
    "title": "Unicode bom",
    "description": "Require or disallow Unicode byte order mark (BOM)",
    "timeToFix": 5
  },
  {
    "patternId": "use-isnan",
    "title": "Use isnan",
    "description": "Require calls to `isNaN()` when checking for `NaN`",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "enforceForSwitchCase",
        "description": "enforceForSwitchCase"
      },
      {
        "name": "enforceForIndexOf",
        "description": "enforceForIndexOf"
      }
    ]
  },
  {
    "patternId": "valid-jsdoc",
    "title": "Valid jsdoc",
    "description": "Enforce valid JSDoc comments",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "requireReturn",
        "description": "requireReturn"
      },
      {
        "name": "requireParamDescription",
        "description": "requireParamDescription"
      },
      {
        "name": "requireReturnDescription",
        "description": "requireReturnDescription"
      },
      {
        "name": "requireReturnType",
        "description": "requireReturnType"
      },
      {
        "name": "requireParamType",
        "description": "requireParamType"
      }
    ]
  },
  {
    "patternId": "valid-typeof",
    "title": "Valid typeof",
    "description": "Enforce comparing `typeof` expressions against valid strings",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "requireStringLiterals",
        "description": "requireStringLiterals"
      }
    ]
  },
  {
    "patternId": "vars-on-top",
    "title": "Vars on top",
    "description": "Require `var` declarations be placed at the top of their containing scope",
    "timeToFix": 5
  },
  {
    "patternId": "wrap-iife",
    "title": "Wrap iife",
    "description": "Require parentheses around immediate `function` invocations",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "functionPrototypeMethods",
        "description": "functionPrototypeMethods"
      }
    ]
  },
  {
    "patternId": "wrap-regex",
    "title": "Wrap regex",
    "description": "Require parenthesis around regex literals",
    "timeToFix": 5
  },
  {
    "patternId": "yield-star-spacing",
    "title": "Yield star spacing",
    "description": "Require or disallow spacing around the `*` in `yield*` expressions",
    "timeToFix": 5
  },
  {
    "patternId": "yoda",
    "title": "Yoda",
    "description": "Require or disallow \"Yoda\" conditions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "exceptRange",
        "description": "exceptRange"
      },
      {
        "name": "onlyEquality",
        "description": "onlyEquality"
      }
    ]
  },
  {
    "patternId": "import_named",
    "title": "Import: Named",
    "timeToFix": 5
  },
  {
    "patternId": "import_default",
    "title": "Import: Default",
    "timeToFix": 5
  },
  {
    "patternId": "import_namespace",
    "title": "Import: Namespace",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowComputed",
        "description": "allowComputed"
      }
    ]
  },
  {
    "patternId": "import_no-namespace",
    "title": "Import: No namespace",
    "timeToFix": 5
  },
  {
    "patternId": "import_export",
    "title": "Import: Export",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-mutable-exports",
    "title": "Import: No mutable exports",
    "timeToFix": 5
  },
  {
    "patternId": "import_extensions",
    "title": "Import: Extensions",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-restricted-paths",
    "title": "Import: No restricted paths",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-internal-modules",
    "title": "Import: No internal modules",
    "timeToFix": 5
  },
  {
    "patternId": "import_group-exports",
    "title": "Import: Group exports",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-relative-parent-imports",
    "title": "Import: No relative parent imports",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-self-import",
    "title": "Import: No self import",
    "description": "Forbid a module from importing itself",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-cycle",
    "title": "Import: No cycle",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-named-default",
    "title": "Import: No named default",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-named-as-default",
    "title": "Import: No named as default",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-named-as-default-member",
    "title": "Import: No named as default member",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-anonymous-default-export",
    "title": "Import: No anonymous default export",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-unused-modules",
    "title": "Import: No unused modules",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-commonjs",
    "title": "Import: No commonjs",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-amd",
    "title": "Import: No amd",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-duplicates",
    "title": "Import: No duplicates",
    "timeToFix": 5
  },
  {
    "patternId": "import_first",
    "title": "Import: First",
    "timeToFix": 5
  },
  {
    "patternId": "import_max-dependencies",
    "title": "Import: Max dependencies",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-extraneous-dependencies",
    "title": "Import: No extraneous dependencies",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-absolute-path",
    "title": "Import: No absolute path",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-nodejs-modules",
    "title": "Import: No nodejs modules",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-webpack-loader-syntax",
    "title": "Import: No webpack loader syntax",
    "timeToFix": 5
  },
  {
    "patternId": "import_order",
    "title": "Import: Order",
    "timeToFix": 5
  },
  {
    "patternId": "import_newline-after-import",
    "title": "Import: Newline after import",
    "timeToFix": 5
  },
  {
    "patternId": "import_prefer-default-export",
    "title": "Import: Prefer default export",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-default-export",
    "title": "Import: No default export",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-named-export",
    "title": "Import: No named export",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-dynamic-require",
    "title": "Import: No dynamic require",
    "timeToFix": 5
  },
  {
    "patternId": "import_unambiguous",
    "title": "Import: Unambiguous",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-unassigned-import",
    "title": "Import: No unassigned import",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-useless-path-segments",
    "title": "Import: No useless path segments",
    "timeToFix": 5
  },
  {
    "patternId": "import_dynamic-import-chunkname",
    "title": "Import: Dynamic import chunkname",
    "timeToFix": 5
  },
  {
    "patternId": "import_exports-last",
    "title": "Import: Exports last",
    "timeToFix": 5
  },
  {
    "patternId": "import_no-deprecated",
    "title": "Import: No deprecated",
    "timeToFix": 5
  },
  {
    "patternId": "import_imports-first",
    "title": "Import: Imports first",
    "timeToFix": 5
  },
  {
    "patternId": "node_callback-return",
    "title": "Node: Callback return",
    "description": "Require `return` statements after callbacks",
    "timeToFix": 5
  },
  {
    "patternId": "node_exports-style",
    "title": "Node: Exports style",
    "description": "Enforce either `module.exports` or `exports`",
    "timeToFix": 5
  },
  {
    "patternId": "node_file-extension-in-import",
    "title": "Node: File extension in import",
    "description": "Enforce the style of file extensions in `import` declarations",
    "timeToFix": 5
  },
  {
    "patternId": "node_global-require",
    "title": "Node: Global require",
    "description": "Require `require()` calls to be placed at top-level module scope",
    "timeToFix": 5
  },
  {
    "patternId": "node_handle-callback-err",
    "title": "Node: Handle callback err",
    "description": "Require error handling in callbacks",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-callback-literal",
    "title": "Node: No callback literal",
    "description": "Ensure Node.js-style error-first callback pattern is followed",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-deprecated-api",
    "title": "Node: No deprecated api",
    "description": "Disallow deprecated APIs",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-exports-assign",
    "title": "Node: No exports assign",
    "description": "Disallow the assignment to `exports`",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-extraneous-import",
    "title": "Node: No extraneous import",
    "description": "Disallow `import` declarations which import extraneous modules",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-extraneous-require",
    "title": "Node: No extraneous require",
    "description": "Disallow `require()` expressions which import extraneous modules",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-missing-import",
    "title": "Node: No missing import",
    "description": "Disallow `import` declarations which import non-existence modules",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-mixed-requires",
    "title": "Node: No mixed requires",
    "description": "Disallow `require` calls to be mixed with regular variable declarations",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-new-require",
    "title": "Node: No new require",
    "description": "Disallow `new` operators with calls to `require`",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-path-concat",
    "title": "Node: No path concat",
    "description": "Disallow string concatenation with `__dirname` and `__filename`",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-process-env",
    "title": "Node: No process env",
    "description": "Disallow the use of `process.env`",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-process-exit",
    "title": "Node: No process exit",
    "description": "Disallow the use of `process.exit()`",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-restricted-import",
    "title": "Node: No restricted import",
    "description": "Disallow specified modules when loaded by `require`",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-restricted-require",
    "title": "Node: No restricted require",
    "description": "Disallow specified modules when loaded by `require`",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-sync",
    "title": "Node: No sync",
    "description": "Disallow synchronous methods",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowAtRootLevel",
        "description": "allowAtRootLevel"
      }
    ]
  },
  {
    "patternId": "node_no-unpublished-bin",
    "title": "Node: No unpublished bin",
    "description": "Disallow `bin` files that npm ignores",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-unpublished-import",
    "title": "Node: No unpublished import",
    "description": "Disallow `import` declarations which import private modules",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-unpublished-require",
    "title": "Node: No unpublished require",
    "description": "Disallow `require()` expressions which import private modules",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-unsupported-features_es-builtins",
    "title": "Node: [No unsupported features] Es builtins",
    "description": "Disallow unsupported ECMAScript built-ins on the specified version",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-unsupported-features_es-syntax",
    "title": "Node: [No unsupported features] Es syntax",
    "description": "Disallow unsupported ECMAScript syntax on the specified version",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-unsupported-features_node-builtins",
    "title": "Node: [No unsupported features] Node builtins",
    "description": "Disallow unsupported Node.js built-in APIs on the specified version",
    "timeToFix": 5
  },
  {
    "patternId": "node_prefer-global_buffer",
    "title": "Node: [Prefer global] Buffer",
    "description": "Enforce either `Buffer` or `require(\"buffer\").Buffer`",
    "timeToFix": 5
  },
  {
    "patternId": "node_prefer-global_console",
    "title": "Node: [Prefer global] Console",
    "description": "Enforce either `console` or `require(\"console\")`",
    "timeToFix": 5
  },
  {
    "patternId": "node_prefer-global_process",
    "title": "Node: [Prefer global] Process",
    "description": "Enforce either `process` or `require(\"process\")`",
    "timeToFix": 5
  },
  {
    "patternId": "node_prefer-global_text-decoder",
    "title": "Node: [Prefer global] Text decoder",
    "description": "Enforce either `TextDecoder` or `require(\"util\").TextDecoder`",
    "timeToFix": 5
  },
  {
    "patternId": "node_prefer-global_text-encoder",
    "title": "Node: [Prefer global] Text encoder",
    "description": "Enforce either `TextEncoder` or `require(\"util\").TextEncoder`",
    "timeToFix": 5
  },
  {
    "patternId": "node_prefer-global_url-search-params",
    "title": "Node: [Prefer global] Url search params",
    "description": "Enforce either `URLSearchParams` or `require(\"url\").URLSearchParams`",
    "timeToFix": 5
  },
  {
    "patternId": "node_prefer-global_url",
    "title": "Node: [Prefer global] Url",
    "description": "Enforce either `URL` or `require(\"url\").URL`",
    "timeToFix": 5
  },
  {
    "patternId": "node_prefer-promises_dns",
    "title": "Node: [Prefer promises] Dns",
    "description": "Enforce `require(\"dns\").promises`",
    "timeToFix": 5
  },
  {
    "patternId": "node_prefer-promises_fs",
    "title": "Node: [Prefer promises] Fs",
    "description": "Enforce `require(\"fs\").promises`",
    "timeToFix": 5
  },
  {
    "patternId": "node_process-exit-as-throw",
    "title": "Node: Process exit as throw",
    "description": "Make `process.exit()` expressions the same code path as `throw`",
    "timeToFix": 5
  },
  {
    "patternId": "node_shebang",
    "title": "Node: Shebang",
    "description": "Suggest correct usage of shebang",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-hide-core-modules",
    "title": "Node: No hide core modules",
    "description": "Disallow third-party modules which are hiding core modules",
    "timeToFix": 5
  },
  {
    "patternId": "node_no-unsupported-features",
    "title": "Node: No unsupported features",
    "description": "Disallow unsupported ECMAScript features on the specified version",
    "timeToFix": 5
  },
  {
    "patternId": "promise_param-names",
    "title": "Promise: Param names",
    "timeToFix": 5
  },
  {
    "patternId": "promise_no-return-wrap",
    "title": "Promise: No return wrap",
    "timeToFix": 5
  },
  {
    "patternId": "promise_always-return",
    "title": "Promise: Always return",
    "timeToFix": 5
  },
  {
    "patternId": "promise_catch-or-return",
    "title": "Promise: Catch or return",
    "timeToFix": 5
  },
  {
    "patternId": "promise_prefer-await-to-callbacks",
    "title": "Promise: Prefer await to callbacks",
    "timeToFix": 5
  },
  {
    "patternId": "promise_prefer-await-to-then",
    "title": "Promise: Prefer await to then",
    "timeToFix": 5
  },
  {
    "patternId": "promise_no-native",
    "title": "Promise: No native",
    "timeToFix": 5
  },
  {
    "patternId": "promise_no-callback-in-promise",
    "title": "Promise: No callback in promise",
    "timeToFix": 5
  },
  {
    "patternId": "promise_no-promise-in-callback",
    "title": "Promise: No promise in callback",
    "timeToFix": 5
  },
  {
    "patternId": "promise_no-nesting",
    "title": "Promise: No nesting",
    "timeToFix": 5
  },
  {
    "patternId": "promise_avoid-new",
    "title": "Promise: Avoid new",
    "timeToFix": 5
  },
  {
    "patternId": "promise_no-new-statics",
    "title": "Promise: No new statics",
    "timeToFix": 5
  },
  {
    "patternId": "promise_no-return-in-finally",
    "title": "Promise: No return in finally",
    "timeToFix": 5
  },
  {
    "patternId": "promise_valid-params",
    "title": "Promise: Valid params",
    "description": "Ensures the proper number of arguments are passed to Promise functions",
    "timeToFix": 5
  },
  {
    "patternId": "standard_array-bracket-even-spacing",
    "title": "Standard: Array bracket even spacing",
    "timeToFix": 5
  },
  {
    "patternId": "standard_computed-property-even-spacing",
    "title": "Standard: Computed property even spacing",
    "timeToFix": 5
  },
  {
    "patternId": "standard_object-curly-even-spacing",
    "title": "Standard: Object curly even spacing",
    "timeToFix": 5
  },
  {
    "patternId": "standard_no-callback-literal",
    "title": "Standard: No callback literal",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-unsafe-regex",
    "title": "Security: Detect unsafe regex",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-non-literal-regexp",
    "title": "Security: Detect non literal regexp",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-non-literal-require",
    "title": "Security: Detect non literal require",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-non-literal-fs-filename",
    "title": "Security: Detect non literal fs filename",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-eval-with-expression",
    "title": "Security: Detect eval with expression",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-pseudoRandomBytes",
    "title": "Security: Detect pseudoRandomBytes",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-possible-timing-attacks",
    "title": "Security: Detect possible timing attacks",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-no-csrf-before-method-override",
    "title": "Security: Detect no csrf before method override",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-buffer-noassert",
    "title": "Security: Detect buffer noassert",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-child-process",
    "title": "Security: Detect child process",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-disable-mustache-escape",
    "title": "Security: Detect disable mustache escape",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-object-injection",
    "title": "Security: Detect object injection",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-new-buffer",
    "title": "Security: Detect new buffer",
    "timeToFix": 5
  },
  {
    "patternId": "angular_angularelement",
    "title": "Angular: Angularelement",
    "timeToFix": 5
  },
  {
    "patternId": "angular_avoid-scope-typos",
    "title": "Angular: Avoid scope typos",
    "timeToFix": 5
  },
  {
    "patternId": "angular_component-limit",
    "title": "Angular: Component limit",
    "timeToFix": 5
  },
  {
    "patternId": "angular_component-name",
    "title": "Angular: Component name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_constant-name",
    "title": "Angular: Constant name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_controller-as-route",
    "title": "Angular: Controller as route",
    "timeToFix": 5
  },
  {
    "patternId": "angular_controller-as-vm",
    "title": "Angular: Controller as vm",
    "timeToFix": 5
  },
  {
    "patternId": "angular_controller-as",
    "title": "Angular: Controller as",
    "timeToFix": 5
  },
  {
    "patternId": "angular_controller-name",
    "title": "Angular: Controller name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_deferred",
    "title": "Angular: Deferred",
    "timeToFix": 5
  },
  {
    "patternId": "angular_definedundefined",
    "title": "Angular: Definedundefined",
    "timeToFix": 5
  },
  {
    "patternId": "angular_di-order",
    "title": "Angular: Di order",
    "timeToFix": 5
  },
  {
    "patternId": "angular_di-unused",
    "title": "Angular: Di unused",
    "timeToFix": 5
  },
  {
    "patternId": "angular_di",
    "title": "Angular: Di",
    "timeToFix": 5
  },
  {
    "patternId": "angular_directive-name",
    "title": "Angular: Directive name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_directive-restrict",
    "title": "Angular: Directive restrict",
    "timeToFix": 5
  },
  {
    "patternId": "angular_document-service",
    "title": "Angular: Document service",
    "timeToFix": 5
  },
  {
    "patternId": "angular_dumb-inject",
    "title": "Angular: Dumb inject",
    "timeToFix": 5
  },
  {
    "patternId": "angular_empty-controller",
    "title": "Angular: Empty controller",
    "timeToFix": 5
  },
  {
    "patternId": "angular_factory-name",
    "title": "Angular: Factory name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_file-name",
    "title": "Angular: File name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_filter-name",
    "title": "Angular: Filter name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_foreach",
    "title": "Angular: Foreach",
    "timeToFix": 5
  },
  {
    "patternId": "angular_function-type",
    "title": "Angular: Function type",
    "timeToFix": 5
  },
  {
    "patternId": "angular_interval-service",
    "title": "Angular: Interval service",
    "timeToFix": 5
  },
  {
    "patternId": "angular_json-functions",
    "title": "Angular: Json functions",
    "timeToFix": 5
  },
  {
    "patternId": "angular_log",
    "title": "Angular: Log",
    "timeToFix": 5
  },
  {
    "patternId": "angular_module-dependency-order",
    "title": "Angular: Module dependency order",
    "timeToFix": 5
  },
  {
    "patternId": "angular_module-getter",
    "title": "Angular: Module getter",
    "timeToFix": 5
  },
  {
    "patternId": "angular_module-name",
    "title": "Angular: Module name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_module-setter",
    "title": "Angular: Module setter",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-angular-mock",
    "title": "Angular: No angular mock",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-controller",
    "title": "Angular: No controller",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-cookiestore",
    "title": "Angular: No cookiestore",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-directive-replace",
    "title": "Angular: No directive replace",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-http-callback",
    "title": "Angular: No http callback",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-inline-template",
    "title": "Angular: No inline template",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-jquery-angularelement",
    "title": "Angular: No jquery angularelement",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-private-call",
    "title": "Angular: No private call",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-run-logic",
    "title": "Angular: No run logic",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-service-method",
    "title": "Angular: No service method",
    "timeToFix": 5
  },
  {
    "patternId": "angular_no-services",
    "title": "Angular: No services",
    "timeToFix": 5
  },
  {
    "patternId": "angular_on-destroy",
    "title": "Angular: On destroy",
    "timeToFix": 5
  },
  {
    "patternId": "angular_on-watch",
    "title": "Angular: On watch",
    "timeToFix": 5
  },
  {
    "patternId": "angular_one-dependency-per-line",
    "title": "Angular: One dependency per line",
    "timeToFix": 5
  },
  {
    "patternId": "angular_prefer-component",
    "title": "Angular: Prefer component",
    "timeToFix": 5
  },
  {
    "patternId": "angular_provider-name",
    "title": "Angular: Provider name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_rest-service",
    "title": "Angular: Rest service",
    "timeToFix": 5
  },
  {
    "patternId": "angular_service-name",
    "title": "Angular: Service name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_timeout-service",
    "title": "Angular: Timeout service",
    "timeToFix": 5
  },
  {
    "patternId": "angular_typecheck-array",
    "title": "Angular: Typecheck array",
    "timeToFix": 5
  },
  {
    "patternId": "angular_typecheck-date",
    "title": "Angular: Typecheck date",
    "timeToFix": 5
  },
  {
    "patternId": "angular_typecheck-function",
    "title": "Angular: Typecheck function",
    "timeToFix": 5
  },
  {
    "patternId": "angular_typecheck-number",
    "title": "Angular: Typecheck number",
    "timeToFix": 5
  },
  {
    "patternId": "angular_typecheck-object",
    "title": "Angular: Typecheck object",
    "timeToFix": 5
  },
  {
    "patternId": "angular_typecheck-string",
    "title": "Angular: Typecheck string",
    "timeToFix": 5
  },
  {
    "patternId": "angular_value-name",
    "title": "Angular: Value name",
    "timeToFix": 5
  },
  {
    "patternId": "angular_watchers-execution",
    "title": "Angular: Watchers execution",
    "timeToFix": 5
  },
  {
    "patternId": "angular_window-service",
    "title": "Angular: Window service",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-element-methods",
    "title": "Angularjs security rules: Detect angular element methods",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-open-redirect",
    "title": "Angularjs security rules: Detect angular open redirect",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-orderBy-expressions",
    "title": "Angularjs security rules: Detect angular orderBy expressions",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-resource-loading",
    "title": "Angularjs security rules: Detect angular resource loading",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-sce-disabled",
    "title": "Angularjs security rules: Detect angular sce disabled",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-scope-expressions",
    "title": "Angularjs security rules: Detect angular scope expressions",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-service-expressions",
    "title": "Angularjs security rules: Detect angular service expressions",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-trustAs-methods",
    "title": "Angularjs security rules: Detect angular trustAs methods",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-trustAsCss-method",
    "title": "Angularjs security rules: Detect angular trustAsCss method",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-trustAsHtml-method",
    "title": "Angularjs security rules: Detect angular trustAsHtml method",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-trustAsJs-method",
    "title": "Angularjs security rules: Detect angular trustAsJs method",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-trustAsResourceUrl-method",
    "title": "Angularjs security rules: Detect angular trustAsResourceUrl method",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-angular-trustAsUrl-method",
    "title": "Angularjs security rules: Detect angular trustAsUrl method",
    "timeToFix": 5
  },
  {
    "patternId": "angularjs-security-rules_detect-third-party-angular-translate",
    "title": "Angularjs security rules: Detect third party angular translate",
    "timeToFix": 5
  },
  {
    "patternId": "babel_array-bracket-spacing",
    "title": "Babel: Array bracket spacing",
    "timeToFix": 5
  },
  {
    "patternId": "babel_arrow-parens",
    "title": "Babel: Arrow parens",
    "timeToFix": 5
  },
  {
    "patternId": "babel_flow-object-type",
    "title": "Babel: Flow object type",
    "timeToFix": 5
  },
  {
    "patternId": "babel_func-params-comma-dangle",
    "title": "Babel: Func params comma dangle",
    "timeToFix": 5
  },
  {
    "patternId": "babel_generator-star-spacing",
    "title": "Babel: Generator star spacing",
    "timeToFix": 5
  },
  {
    "patternId": "babel_new-cap",
    "title": "Babel: New cap",
    "description": "Require constructor names to begin with a capital letter",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "newIsCap",
        "description": "newIsCap"
      },
      {
        "name": "capIsNew",
        "description": "capIsNew"
      },
      {
        "name": "properties",
        "description": "properties"
      }
    ]
  },
  {
    "patternId": "babel_camelcase",
    "title": "Babel: Camelcase",
    "description": "Enforce camelcase naming convention",
    "timeToFix": 5
  },
  {
    "patternId": "babel_no-await-in-loop",
    "title": "Babel: No await in loop",
    "timeToFix": 5
  },
  {
    "patternId": "babel_no-invalid-this",
    "title": "Babel: No invalid this",
    "description": "Disallow `this` keywords outside of classes or class-like objects",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "capIsConstructor",
        "description": "capIsConstructor"
      }
    ]
  },
  {
    "patternId": "babel_no-unused-expressions",
    "title": "Babel: No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "allowShortCircuit"
      },
      {
        "name": "allowTernary",
        "description": "allowTernary"
      },
      {
        "name": "allowTaggedTemplates",
        "description": "allowTaggedTemplates"
      }
    ]
  },
  {
    "patternId": "babel_object-curly-spacing",
    "title": "Babel: Object curly spacing",
    "description": "Enforce consistent spacing inside braces",
    "timeToFix": 5
  },
  {
    "patternId": "babel_object-shorthand",
    "title": "Babel: Object shorthand",
    "timeToFix": 5
  },
  {
    "patternId": "babel_quotes",
    "title": "Babel: Quotes",
    "description": "Enforce the consistent use of either backticks, double, or single quotes",
    "timeToFix": 5
  },
  {
    "patternId": "babel_semi",
    "title": "Babel: Semi",
    "timeToFix": 5
  },
  {
    "patternId": "babel_valid-typeof",
    "title": "Babel: Valid typeof",
    "description": "Enforce comparing `typeof` expressions against valid strings",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "requireStringLiterals",
        "description": "requireStringLiterals"
      }
    ]
  },
  {
    "patternId": "backbone_collection-model",
    "title": "Backbone: Collection model",
    "description": "Require all collections to declare model",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_defaults-on-top",
    "title": "Backbone: Defaults on top",
    "description": "Require defaults to be on top of the model",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_event-scope",
    "title": "Backbone: Event scope",
    "description": "Verify that scope is passed into event handlers",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_events-on-top",
    "title": "Backbone: Events on top",
    "description": "Events should be the first thing registered in the View",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_initialize-on-top",
    "title": "Backbone: Initialize on top",
    "description": "Requires initialize to be the first property of Backbone Views/Models/Collections",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_model-defaults",
    "title": "Backbone: Model defaults",
    "description": "Require all models to have defaults section",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-changed-set",
    "title": "Backbone: No changed set",
    "description": "Prevent setting changed attribute of the model in views",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-collection-models",
    "title": "Backbone: No collection models",
    "description": "Prevent access to models property of collections",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-constructor",
    "title": "Backbone: No constructor",
    "description": "Prevent overloading of constructor",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-el-assign",
    "title": "Backbone: No el assign",
    "description": "Prevent assigning el or $el inside views",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-model-attributes",
    "title": "Backbone: No model attributes",
    "description": "Prevent access to attributes collection inside models",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-native-jquery",
    "title": "Backbone: No native jquery",
    "description": "Prevent usage of $ in the views",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-silent",
    "title": "Backbone: No silent",
    "description": "Prevent using silent option in functions that cause events",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-view-collection-models",
    "title": "Backbone: No view collection models",
    "description": "Prevent access to collection's models property inside views",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-view-model-attributes",
    "title": "Backbone: No view model attributes",
    "description": "Prevent access to model's attributes collection inside views",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-view-onoff-binding",
    "title": "Backbone: No view onoff binding",
    "description": "Prevent using on/off bindings inside views",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_no-view-qualified-jquery",
    "title": "Backbone: No view qualified jquery",
    "description": "Prevent usage of global $ to reach view elements",
    "timeToFix": 5
  },
  {
    "patternId": "backbone_render-return",
    "title": "Backbone: Render return",
    "description": "Enforces render function to always return this",
    "timeToFix": 5
  },
  {
    "patternId": "chai-expect_no-inner-compare",
    "title": "Chai expect: No inner compare",
    "timeToFix": 5
  },
  {
    "patternId": "chai-expect_no-inner-literal",
    "title": "Chai expect: No inner literal",
    "timeToFix": 5
  },
  {
    "patternId": "chai-expect_missing-assertion",
    "title": "Chai expect: Missing assertion",
    "timeToFix": 5
  },
  {
    "patternId": "chai-expect_terminating-properties",
    "title": "Chai expect: Terminating properties",
    "timeToFix": 5
  },
  {
    "patternId": "chai-friendly_no-unused-expressions",
    "title": "Chai friendly: No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5
  },
  {
    "patternId": "compat_compat",
    "title": "Compat: Compat",
    "description": "Ensure cross-browser API compatibility",
    "timeToFix": 5
  },
  {
    "patternId": "cypress_no-assigning-return-values",
    "title": "Cypress: No assigning return values",
    "description": "Prevent assigning return values of cy calls",
    "timeToFix": 5
  },
  {
    "patternId": "cypress_no-unnecessary-waiting",
    "title": "Cypress: No unnecessary waiting",
    "description": "Prevent waiting for arbitrary time periods",
    "timeToFix": 5
  },
  {
    "patternId": "cypress_assertion-before-screenshot",
    "title": "Cypress: Assertion before screenshot",
    "description": "Assert on the page state before taking a screenshot, so the screenshot is consistent",
    "timeToFix": 5
  },
  {
    "patternId": "cypress_require-data-selectors",
    "title": "Cypress: Require data selectors",
    "description": "Use data-* attributes to provide context to your selectors and insulate them from CSS or JS changes https://docs.cypress.io/guides/references/best-practices.html#Selecting-Elements",
    "timeToFix": 5
  },
  {
    "patternId": "cypress_no-force",
    "title": "Cypress: No force",
    "description": "Disallow using of 'force: true' option for click and type calls",
    "timeToFix": 5
  },
  {
    "patternId": "drupal_jquery-var-name",
    "title": "Drupal: Jquery var name",
    "timeToFix": 5
  },
  {
    "patternId": "drupal_check-closure-globals",
    "title": "Drupal: Check closure globals",
    "timeToFix": 5
  },
  {
    "patternId": "ember_alias-model-in-controller",
    "title": "Ember: Alias model in controller",
    "description": "Enforce aliasing model in controllers",
    "timeToFix": 5
  },
  {
    "patternId": "ember_avoid-leaking-state-in-ember-objects",
    "title": "Ember: Avoid leaking state in ember objects",
    "description": "Disallow state leakage",
    "timeToFix": 5
  },
  {
    "patternId": "ember_avoid-using-needs-in-controllers",
    "title": "Ember: Avoid using needs in controllers",
    "description": "Disallow using `needs` in controllers",
    "timeToFix": 5
  },
  {
    "patternId": "ember_classic-decorator-hooks",
    "title": "Ember: Classic decorator hooks",
    "description": "Enforce using correct hooks for both classic and non-classic classes",
    "timeToFix": 5
  },
  {
    "patternId": "ember_classic-decorator-no-classic-methods",
    "title": "Ember: Classic decorator no classic methods",
    "description": "Disallow usage of classic APIs such as `get`/`set` in classes that aren't explicitly decorated with `@classic`",
    "timeToFix": 5
  },
  {
    "patternId": "ember_closure-actions",
    "title": "Ember: Closure actions",
    "description": "Enforce usage of closure actions",
    "timeToFix": 5
  },
  {
    "patternId": "ember_computed-property-getters",
    "title": "Ember: Computed property getters",
    "description": "Enforce the consistent use of getters in computed properties",
    "timeToFix": 5
  },
  {
    "patternId": "ember_jquery-ember-run",
    "title": "Ember: Jquery ember run",
    "description": "Disallow usage of jQuery without an Ember run loop",
    "timeToFix": 5
  },
  {
    "patternId": "ember_named-functions-in-promises",
    "title": "Ember: Named functions in promises",
    "description": "Enforce usage of named functions in promises",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowSimpleArrowFunction",
        "description": "allowSimpleArrowFunction"
      }
    ]
  },
  {
    "patternId": "ember_new-module-imports",
    "title": "Ember: New module imports",
    "description": "Enforce using \"New Module Imports\" from Ember RFC #176",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-actions-hash",
    "title": "Ember: No actions hash",
    "description": "Disallow the actions hash in components, controllers, and routes",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-arrow-function-computed-properties",
    "title": "Ember: No arrow function computed properties",
    "description": "Disallow arrow functions in computed properties",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "onlyThisContexts",
        "description": "onlyThisContexts"
      }
    ]
  },
  {
    "patternId": "ember_no-attrs-in-components",
    "title": "Ember: No attrs in components",
    "description": "Disallow usage of `this.attrs` in components",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-attrs-snapshot",
    "title": "Ember: No attrs snapshot",
    "description": "Disallow use of attrs snapshot in the `didReceiveAttrs` and `didUpdateAttrs` component hooks",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-capital-letters-in-routes",
    "title": "Ember: No capital letters in routes",
    "description": "Disallow routes with uppercased letters in router.js",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-classic-classes",
    "title": "Ember: No classic classes",
    "description": "Disallow \"classic\" classes in favor of native JS classes",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-classic-components",
    "title": "Ember: No classic components",
    "description": "Enforce using Glimmer components",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-component-lifecycle-hooks",
    "title": "Ember: No component lifecycle hooks",
    "description": "Disallow usage of \"classic\" ember component lifecycle hooks. Render modifiers or custom functional modifiers should be used instead.",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-computed-properties-in-native-classes",
    "title": "Ember: No computed properties in native classes",
    "description": "Disallow using computed properties in native classes",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-controllers",
    "title": "Ember: No controllers",
    "description": "Disallow non-essential controllers",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-deeply-nested-dependent-keys-with-each",
    "title": "Ember: No deeply nested dependent keys with each",
    "description": "Disallow usage of deeply-nested computed property dependent keys with `@each`",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-duplicate-dependent-keys",
    "title": "Ember: No duplicate dependent keys",
    "description": "Disallow repeating computed property dependent keys",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-ember-super-in-es-classes",
    "title": "Ember: No ember super in es classes",
    "description": "Disallow use of `this._super` in ES class methods",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-ember-testing-in-module-scope",
    "title": "Ember: No ember testing in module scope",
    "description": "Disallow use of `Ember.testing` in module scope",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-empty-attrs",
    "title": "Ember: No empty attrs",
    "description": "Disallow usage of empty attributes in Ember Data models",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-function-prototype-extensions",
    "title": "Ember: No function prototype extensions",
    "description": "Disallow usage of Ember's `function` prototype extensions",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-get-with-default",
    "title": "Ember: No get with default",
    "description": "Disallow usage of the Ember's `getWithDefault` function",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-get",
    "title": "Ember: No get",
    "description": "Require using ES5 getters instead of Ember's `get` / `getProperties` functions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreGetProperties",
        "description": "ignoreGetProperties"
      },
      {
        "name": "ignoreNestedPaths",
        "description": "ignoreNestedPaths"
      }
    ]
  },
  {
    "patternId": "ember_no-global-jquery",
    "title": "Ember: No global jquery",
    "description": "Disallow usage of global jQuery object",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-incorrect-calls-with-inline-anonymous-functions",
    "title": "Ember: No incorrect calls with inline anonymous functions",
    "description": "Disallow inline anonymous functions as arguments to `debounce`, `once`, and `scheduleOnce`",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-incorrect-computed-macros",
    "title": "Ember: No incorrect computed macros",
    "description": "Disallow incorrect usage of computed property macros",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-invalid-debug-function-arguments",
    "title": "Ember: No invalid debug function arguments",
    "description": "Disallow usages of Ember's `assert()` / `warn()` / `deprecate()` functions that have the arguments passed in the wrong order.",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-invalid-dependent-keys",
    "title": "Ember: No invalid dependent keys",
    "description": "Disallow invalid dependent keys in computed properties",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-invalid-test-waiters",
    "title": "Ember: No invalid test waiters",
    "description": "Disallow incorrect usage of test waiter APIs",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-jquery",
    "title": "Ember: No jquery",
    "description": "Disallow any usage of jQuery",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-legacy-test-waiters",
    "title": "Ember: No legacy test waiters",
    "description": "Disallow the use of the legacy test waiter APIs",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-mixins",
    "title": "Ember: No mixins",
    "description": "Disallow the usage of mixins",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-new-mixins",
    "title": "Ember: No new mixins",
    "description": "Disallow the creation of new mixins",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-observers",
    "title": "Ember: No observers",
    "description": "Disallow usage of observers",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-old-shims",
    "title": "Ember: No old shims",
    "description": "Disallow usage of old shims for modules",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-on-calls-in-components",
    "title": "Ember: No on calls in components",
    "description": "Disallow usage of `on` to call lifecycle hooks in components",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-pause-test",
    "title": "Ember: No pause test",
    "description": "Disallow usage of the `pauseTest` helper in tests",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-private-routing-service",
    "title": "Ember: No private routing service",
    "description": "Disallow injecting the private routing service",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-proxies",
    "title": "Ember: No proxies",
    "description": "Disallow using array or object proxies",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-replace-test-comments",
    "title": "Ember: No replace test comments",
    "description": "Disallow 'Replace this with your real tests' comments in test files",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-restricted-resolver-tests",
    "title": "Ember: No restricted resolver tests",
    "description": "Disallow the use of patterns that use the restricted resolver in tests",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-side-effects",
    "title": "Ember: No side effects",
    "description": "Disallow unexpected side effects in computed properties",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-test-and-then",
    "title": "Ember: No test and then",
    "description": "Disallow usage of the `andThen` test wait helper",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-test-import-export",
    "title": "Ember: No test import export",
    "description": "Disallow importing of \"-test.js\" in a test file and exporting from a test file",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-test-module-for",
    "title": "Ember: No test module for",
    "description": "Disallow usage of `moduleFor`, `moduleForComponent`, etc",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-test-this-render",
    "title": "Ember: No test this render",
    "description": "Disallow usage of the `this.render` in tests, recommending to use @ember/test-helpers' `render` instead.",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-unnecessary-index-route",
    "title": "Ember: No unnecessary index route",
    "description": "Disallow unnecessary `index` route definition",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-unnecessary-route-path-option",
    "title": "Ember: No unnecessary route path option",
    "description": "Disallow unnecessary usage of the route `path` option",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-unnecessary-service-injection-argument",
    "title": "Ember: No unnecessary service injection argument",
    "description": "Disallow unnecessary argument when injecting services",
    "timeToFix": 5
  },
  {
    "patternId": "ember_no-volatile-computed-properties",
    "title": "Ember: No volatile computed properties",
    "description": "Disallow volatile computed properties",
    "timeToFix": 5
  },
  {
    "patternId": "ember_order-in-components",
    "title": "Ember: Order in components",
    "description": "Enforce proper order of properties in components",
    "timeToFix": 5
  },
  {
    "patternId": "ember_order-in-controllers",
    "title": "Ember: Order in controllers",
    "description": "Enforce proper order of properties in controllers",
    "timeToFix": 5
  },
  {
    "patternId": "ember_order-in-models",
    "title": "Ember: Order in models",
    "description": "Enforce proper order of properties in models",
    "timeToFix": 5
  },
  {
    "patternId": "ember_order-in-routes",
    "title": "Ember: Order in routes",
    "description": "Enforce proper order of properties in routes",
    "timeToFix": 5
  },
  {
    "patternId": "ember_prefer-ember-test-helpers",
    "title": "Ember: Prefer ember test helpers",
    "description": "Enforce usage of `@ember/test-helpers` methods over native window methods",
    "timeToFix": 5
  },
  {
    "patternId": "ember_require-computed-macros",
    "title": "Ember: Require computed macros",
    "description": "Require using computed property macros when possible",
    "timeToFix": 5
  },
  {
    "patternId": "ember_require-computed-property-dependencies",
    "title": "Ember: Require computed property dependencies",
    "description": "Require dependencies to be declared statically in computed properties",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowDynamicKeys",
        "description": "allowDynamicKeys"
      },
      {
        "name": "requireServiceNames",
        "description": "requireServiceNames"
      }
    ]
  },
  {
    "patternId": "ember_require-return-from-computed",
    "title": "Ember: Require return from computed",
    "description": "Disallow missing return statements in computed properties",
    "timeToFix": 5
  },
  {
    "patternId": "ember_require-super-in-init",
    "title": "Ember: Require super in init",
    "description": "Require `this._super` to be called in `init` hooks",
    "timeToFix": 5
  },
  {
    "patternId": "ember_require-tagless-components",
    "title": "Ember: Require tagless components",
    "description": "Disallow using the wrapper element of a component",
    "timeToFix": 5
  },
  {
    "patternId": "ember_route-path-style",
    "title": "Ember: Route path style",
    "description": "Enforce usage of kebab-case (instead of snake_case or camelCase) in route paths",
    "timeToFix": 5
  },
  {
    "patternId": "ember_routes-segments-snake-case",
    "title": "Ember: Routes segments snake case",
    "description": "Enforce usage of snake_cased dynamic segments in routes",
    "timeToFix": 5
  },
  {
    "patternId": "ember_use-brace-expansion",
    "title": "Ember: Use brace expansion",
    "description": "Enforce usage of brace expansion in computed property dependent keys",
    "timeToFix": 5
  },
  {
    "patternId": "ember_use-ember-data-rfc-395-imports",
    "title": "Ember: Use ember data rfc 395 imports",
    "description": "Enforce usage of `@ember-data/` package imports instead `ember-data`",
    "timeToFix": 5
  },
  {
    "patternId": "ember_use-ember-get-and-set",
    "title": "Ember: Use ember get and set",
    "description": "Enforce usage of `Ember.get` and `Ember.set`",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreThisExpressions",
        "description": "ignoreThisExpressions"
      },
      {
        "name": "ignoreNonThisExpressions",
        "description": "ignoreNonThisExpressions"
      }
    ]
  },
  {
    "patternId": "ember-suave_lines-between-object-properties",
    "title": "Ember suave: Lines between object properties",
    "description": "Require or disallow an empty line between object properties",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "exceptAfterSingleLine",
        "description": "exceptAfterSingleLine"
      }
    ]
  },
  {
    "patternId": "ember-suave_no-const-outside-module-scope",
    "title": "Ember suave: No const outside module scope",
    "timeToFix": 5
  },
  {
    "patternId": "ember-suave_no-direct-property-access",
    "title": "Ember suave: No direct property access",
    "timeToFix": 5
  },
  {
    "patternId": "ember-suave_require-access-in-comments",
    "title": "Ember suave: Require access in comments",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_array-style-complex-type",
    "title": "Flowtype: Array style complex type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_array-style-simple-type",
    "title": "Flowtype: Array style simple type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_arrow-parens",
    "title": "Flowtype: Arrow parens",
    "description": "Require parentheses around arrow function arguments",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_boolean-style",
    "title": "Flowtype: Boolean style",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_define-flow-type",
    "title": "Flowtype: Define flow type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_delimiter-dangle",
    "title": "Flowtype: Delimiter dangle",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_generic-spacing",
    "title": "Flowtype: Generic spacing",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_newline-after-flow-annotation",
    "title": "Flowtype: Newline after flow annotation",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_no-dupe-keys",
    "title": "Flowtype: No dupe keys",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_no-existential-type",
    "title": "Flowtype: No existential type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_no-flow-fix-me-comments",
    "title": "Flowtype: No flow fix me comments",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_no-mixed",
    "title": "Flowtype: No mixed",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_no-mutable-array",
    "title": "Flowtype: No mutable array",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_no-primitive-constructor-types",
    "title": "Flowtype: No primitive constructor types",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_no-types-missing-file-annotation",
    "title": "Flowtype: No types missing file annotation",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_no-unused-expressions",
    "title": "Flowtype: No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "allowShortCircuit"
      },
      {
        "name": "allowTernary",
        "description": "allowTernary"
      },
      {
        "name": "allowTaggedTemplates",
        "description": "allowTaggedTemplates"
      }
    ]
  },
  {
    "patternId": "flowtype_no-weak-types",
    "title": "Flowtype: No weak types",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_object-type-delimiter",
    "title": "Flowtype: Object type delimiter",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_require-compound-type-alias",
    "title": "Flowtype: Require compound type alias",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_require-exact-type",
    "title": "Flowtype: Require exact type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_require-indexer-name",
    "title": "Flowtype: Require indexer name",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_require-inexact-type",
    "title": "Flowtype: Require inexact type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_require-parameter-type",
    "title": "Flowtype: Require parameter type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_require-readonly-react-props",
    "title": "Flowtype: Require readonly react props",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_require-return-type",
    "title": "Flowtype: Require return type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_require-types-at-top",
    "title": "Flowtype: Require types at top",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_require-valid-file-annotation",
    "title": "Flowtype: Require valid file annotation",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_require-variable-type",
    "title": "Flowtype: Require variable type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_semi",
    "title": "Flowtype: Semi",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_sort-keys",
    "title": "Flowtype: Sort keys",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_space-after-type-colon",
    "title": "Flowtype: Space after type colon",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_space-before-generic-bracket",
    "title": "Flowtype: Space before generic bracket",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_space-before-type-colon",
    "title": "Flowtype: Space before type colon",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_spread-exact-type",
    "title": "Flowtype: Spread exact type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_type-id-match",
    "title": "Flowtype: Type id match",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_type-import-style",
    "title": "Flowtype: Type import style",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_union-intersection-spacing",
    "title": "Flowtype: Union intersection spacing",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_use-flow-type",
    "title": "Flowtype: Use flow type",
    "timeToFix": 5
  },
  {
    "patternId": "flowtype_valid-syntax",
    "title": "Flowtype: Valid syntax",
    "timeToFix": 5
  },
  {
    "patternId": "graphql_template-strings",
    "title": "Graphql: Template strings",
    "timeToFix": 5
  },
  {
    "patternId": "graphql_named-operations",
    "title": "Graphql: Named operations",
    "timeToFix": 5
  },
  {
    "patternId": "graphql_required-fields",
    "title": "Graphql: Required fields",
    "timeToFix": 5
  },
  {
    "patternId": "graphql_capitalized-type-name",
    "title": "Graphql: Capitalized type name",
    "timeToFix": 5
  },
  {
    "patternId": "graphql_no-deprecated-fields",
    "title": "Graphql: No deprecated fields",
    "timeToFix": 5
  },
  {
    "patternId": "hapi_hapi-capitalize-modules",
    "title": "Hapi: Hapi capitalize modules",
    "timeToFix": 5
  },
  {
    "patternId": "hapi_hapi-for-you",
    "title": "Hapi: Hapi for you",
    "timeToFix": 5
  },
  {
    "patternId": "hapi_hapi-no-var",
    "title": "Hapi: Hapi no var",
    "description": "Require `let` or `const` instead of `var` when outside of try...catch",
    "timeToFix": 5
  },
  {
    "patternId": "hapi_hapi-scope-start",
    "title": "Hapi: Hapi scope start",
    "timeToFix": 5
  },
  {
    "patternId": "hapi_no-arrowception",
    "title": "Hapi: No arrowception",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_expect-matcher",
    "title": "Jasmine: Expect matcher",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_expect-single-argument",
    "title": "Jasmine: Expect single argument",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_named-spy",
    "title": "Jasmine: Named spy",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-focused-tests",
    "title": "Jasmine: No focused tests",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-disabled-tests",
    "title": "Jasmine: No disabled tests",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-describe-variables",
    "title": "Jasmine: No describe variables",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-suite-dupes",
    "title": "Jasmine: No suite dupes",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-spec-dupes",
    "title": "Jasmine: No spec dupes",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_missing-expect",
    "title": "Jasmine: Missing expect",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-suite-callback-args",
    "title": "Jasmine: No suite callback args",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_valid-expect",
    "title": "Jasmine: Valid expect",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-assign-spyon",
    "title": "Jasmine: No assign spyon",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-unsafe-spy",
    "title": "Jasmine: No unsafe spy",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-global-setup",
    "title": "Jasmine: No global setup",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-pending-tests",
    "title": "Jasmine: No pending tests",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-promise-without-done-fail",
    "title": "Jasmine: No promise without done fail",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_no-expect-in-setup-teardown",
    "title": "Jasmine: No expect in setup teardown",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_new-line-between-declarations",
    "title": "Jasmine: New line between declarations",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_new-line-before-expect",
    "title": "Jasmine: New line before expect",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_prefer-jasmine-matcher",
    "title": "Jasmine: Prefer jasmine matcher",
    "timeToFix": 5
  },
  {
    "patternId": "jasmine_prefer-toHaveBeenCalledWith",
    "title": "Jasmine: Prefer toHaveBeenCalledWith",
    "timeToFix": 5
  },
  {
    "patternId": "jest_consistent-test-it",
    "title": "Jest: Consistent test it",
    "description": "Have control over `test` and `it` usages",
    "timeToFix": 5
  },
  {
    "patternId": "jest_expect-expect",
    "title": "Jest: Expect expect",
    "description": "Enforce assertion to be made in a test body",
    "timeToFix": 5
  },
  {
    "patternId": "jest_lowercase-name",
    "title": "Jest: Lowercase name",
    "description": "Enforce `it`, `test` and `describe` to have descriptions that begin with a lowercase letter. This provides more readable test failures.",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-alias-methods",
    "title": "Jest: No alias methods",
    "description": "Disallow alias methods",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-commented-out-tests",
    "title": "Jest: No commented out tests",
    "description": "This rule raises a warning about commented out tests. It's similar to no-disabled-tests rule.",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-disabled-tests",
    "title": "Jest: No disabled tests",
    "description": "Disallow disabled tests",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-duplicate-hooks",
    "title": "Jest: No duplicate hooks",
    "description": "Disallow duplicate setup and teardown hooks",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-expect-resolves",
    "title": "Jest: No expect resolves",
    "description": "Disallow expect.resolves",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-export",
    "title": "Jest: No export",
    "description": "Prevents exports from test files. If a file has at least 1 test in it, then this rule will prevent exports.",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-focused-tests",
    "title": "Jest: No focused tests",
    "description": "Disallow focused tests",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-hooks",
    "title": "Jest: No hooks",
    "description": "Disallow setup and teardown hooks",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-identical-title",
    "title": "Jest: No identical title",
    "description": "Disallow identical titles",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-if",
    "title": "Jest: No if",
    "description": "Disallow conditional logic",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-jasmine-globals",
    "title": "Jest: No jasmine globals",
    "description": "Disallow Jasmine globals",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-jest-import",
    "title": "Jest: No jest import",
    "description": "The `jest` object is automatically in scope within every test file. The methods in the `jest` object help create mocks and let you control Jest's overall behavior. It is therefore completely unnecessary to import in `jest`, as Jest doesn't export anything in the first place.",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-large-snapshots",
    "title": "Jest: No large snapshots",
    "description": "Disallow large snapshots",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-mocks-import",
    "title": "Jest: No mocks import",
    "description": "When using `jest.mock`, your tests (just like the code being tested) should import from `./x`, not `./__mocks__/x`. Not following this rule can lead to confusion, because you will have multiple instances of the mocked module",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-standalone-expect",
    "title": "Jest: No standalone expect",
    "description": "Prevents expects that are outside of an it or test block.",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-test-callback",
    "title": "Jest: No test callback",
    "description": "Avoid using a callback in asynchronous tests",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-test-prefixes",
    "title": "Jest: No test prefixes",
    "description": "Use `.only` and `.skip` over `f` and `x`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-test-return-statement",
    "title": "Jest: No test return statement",
    "description": "Disallow explicitly returning from tests",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-truthy-falsy",
    "title": "Jest: No truthy falsy",
    "description": "Disallow using `toBeTruthy()` & `toBeFalsy()`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_no-try-expect",
    "title": "Jest: No try expect",
    "description": "Prefer using toThrow for exception tests",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-called-with",
    "title": "Jest: Prefer called with",
    "description": "Suggest using `toBeCalledWith()` OR `toHaveBeenCalledWith()`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-expect-assertions",
    "title": "Jest: Prefer expect assertions",
    "description": "Suggest using `expect.assertions()` OR `expect.hasAssertions()`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-hooks-on-top",
    "title": "Jest: Prefer hooks on top",
    "description": "Suggest to have all hooks at top level",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-inline-snapshots",
    "title": "Jest: Prefer inline snapshots",
    "description": "Suggest using inline snapshots",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-spy-on",
    "title": "Jest: Prefer spy on",
    "description": "Suggest using `jest.spyOn()`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-strict-equal",
    "title": "Jest: Prefer strict equal",
    "description": "Suggest using toStrictEqual()",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-to-be-null",
    "title": "Jest: Prefer to be null",
    "description": "Suggest using `toBeNull()`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-to-be-undefined",
    "title": "Jest: Prefer to be undefined",
    "description": "Suggest using `toBeUndefined()`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-to-contain",
    "title": "Jest: Prefer to contain",
    "description": "Suggest using `toContain()`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-to-have-length",
    "title": "Jest: Prefer to have length",
    "description": "Suggest using `toHaveLength()`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_prefer-todo",
    "title": "Jest: Prefer todo",
    "description": "Suggest using `test.todo`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_require-to-throw-message",
    "title": "Jest: Require to throw message",
    "description": "Require a message for `toThrow()`",
    "timeToFix": 5
  },
  {
    "patternId": "jest_require-top-level-describe",
    "title": "Jest: Require top level describe",
    "description": "Prevents test cases and hooks to be outside of a describe block",
    "timeToFix": 5
  },
  {
    "patternId": "jest_valid-describe",
    "title": "Jest: Valid describe",
    "description": "Using an improper `describe()` callback function can lead to unexpected test errors.",
    "timeToFix": 5
  },
  {
    "patternId": "jest_valid-expect-in-promise",
    "title": "Jest: Valid expect in promise",
    "description": "Enforce having return statement when testing with promises",
    "timeToFix": 5
  },
  {
    "patternId": "jest_valid-expect",
    "title": "Jest: Valid expect",
    "description": "Enforce valid `expect()` usage",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "alwaysAwait",
        "description": "alwaysAwait"
      }
    ]
  },
  {
    "patternId": "jest_valid-title",
    "title": "Jest: Valid title",
    "description": "Enforce valid titles",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreTypeOfDescribeName",
        "description": "ignoreTypeOfDescribeName"
      },
      {
        "name": "disallowedWords",
        "description": "disallowedWords"
      }
    ]
  },
  {
    "patternId": "jest-formatting_padding-around-after-all-blocks",
    "title": "Jest formatting: Padding around after all blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-around-after-each-blocks",
    "title": "Jest formatting: Padding around after each blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-around-before-all-blocks",
    "title": "Jest formatting: Padding around before all blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-around-before-each-blocks",
    "title": "Jest formatting: Padding around before each blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-around-describe-blocks",
    "title": "Jest formatting: Padding around describe blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-around-expect-groups",
    "title": "Jest formatting: Padding around expect groups",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-around-test-blocks",
    "title": "Jest formatting: Padding around test blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-around-all",
    "title": "Jest formatting: Padding around all",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-before-after-all-blocks",
    "title": "Jest formatting: Padding before after all blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-before-after-each-blocks",
    "title": "Jest formatting: Padding before after each blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-before-before-all-blocks",
    "title": "Jest formatting: Padding before before all blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-before-before-each-blocks",
    "title": "Jest formatting: Padding before before each blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-before-describe-blocks",
    "title": "Jest formatting: Padding before describe blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-before-expect-statements",
    "title": "Jest formatting: Padding before expect statements",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-before-test-blocks",
    "title": "Jest formatting: Padding before test blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jest-formatting_padding-before-all",
    "title": "Jest formatting: Padding before all",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_check-access",
    "title": "Jsdoc: Check access",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_check-alignment",
    "title": "Jsdoc: Check alignment",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_check-examples",
    "title": "Jsdoc: Check examples",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowInlineConfig",
        "description": "allowInlineConfig"
      },
      {
        "name": "captionRequired",
        "description": "captionRequired"
      },
      {
        "name": "checkEslintrc",
        "description": "checkEslintrc"
      },
      {
        "name": "noDefaultExampleRules",
        "description": "noDefaultExampleRules"
      },
      {
        "name": "paddedIndent",
        "description": "paddedIndent"
      },
      {
        "name": "reportUnusedDisableDirectives",
        "description": "reportUnusedDisableDirectives"
      }
    ]
  },
  {
    "patternId": "jsdoc_check-indentation",
    "title": "Jsdoc: Check indentation",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_check-param-names",
    "title": "Jsdoc: Check param names",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_check-property-names",
    "title": "Jsdoc: Check property names",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_check-syntax",
    "title": "Jsdoc: Check syntax",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_check-tag-names",
    "title": "Jsdoc: Check tag names",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_check-types",
    "title": "Jsdoc: Check types",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_check-values",
    "title": "Jsdoc: Check values",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_empty-tags",
    "title": "Jsdoc: Empty tags",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_implements-on-classes",
    "title": "Jsdoc: Implements on classes",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_match-description",
    "title": "Jsdoc: Match description",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_newline-after-description",
    "title": "Jsdoc: Newline after description",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_no-bad-blocks",
    "title": "Jsdoc: No bad blocks",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_no-defaults",
    "title": "Jsdoc: No defaults",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_no-types",
    "title": "Jsdoc: No types",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_no-undefined-types",
    "title": "Jsdoc: No undefined types",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-description",
    "title": "Jsdoc: Require description",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "checkConstructors",
        "description": "checkConstructors"
      },
      {
        "name": "checkGetters",
        "description": "checkGetters"
      },
      {
        "name": "checkSetters",
        "description": "checkSetters"
      }
    ]
  },
  {
    "patternId": "jsdoc_require-description-complete-sentence",
    "title": "Jsdoc: Require description complete sentence",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-example",
    "title": "Jsdoc: Require example",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "checkConstructors",
        "description": "checkConstructors"
      },
      {
        "name": "checkGetters",
        "description": "checkGetters"
      },
      {
        "name": "checkSetters",
        "description": "checkSetters"
      }
    ]
  },
  {
    "patternId": "jsdoc_require-file-overview",
    "title": "Jsdoc: Require file overview",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-hyphen-before-param-description",
    "title": "Jsdoc: Require hyphen before param description",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "checkProperties",
        "description": "checkProperties"
      }
    ]
  },
  {
    "patternId": "jsdoc_require-jsdoc",
    "title": "Jsdoc: Require jsdoc",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "exemptEmptyFunctions",
        "description": "exemptEmptyFunctions"
      },
      {
        "name": "require",
        "description": "require"
      }
    ]
  },
  {
    "patternId": "jsdoc_require-param",
    "title": "Jsdoc: Require param",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "checkConstructors",
        "description": "checkConstructors"
      },
      {
        "name": "checkGetters",
        "description": "checkGetters"
      },
      {
        "name": "checkSetters",
        "description": "checkSetters"
      }
    ]
  },
  {
    "patternId": "jsdoc_require-param-description",
    "title": "Jsdoc: Require param description",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-param-name",
    "title": "Jsdoc: Require param name",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-param-type",
    "title": "Jsdoc: Require param type",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-property",
    "title": "Jsdoc: Require property",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-property-description",
    "title": "Jsdoc: Require property description",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-property-name",
    "title": "Jsdoc: Require property name",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-property-type",
    "title": "Jsdoc: Require property type",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-returns",
    "title": "Jsdoc: Require returns",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "checkConstructors",
        "description": "checkConstructors"
      },
      {
        "name": "checkGetters",
        "description": "checkGetters"
      },
      {
        "name": "forceRequireReturn",
        "description": "forceRequireReturn"
      },
      {
        "name": "forceReturnsWithAsync",
        "description": "forceReturnsWithAsync"
      }
    ]
  },
  {
    "patternId": "jsdoc_require-returns-check",
    "title": "Jsdoc: Require returns check",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-returns-description",
    "title": "Jsdoc: Require returns description",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_require-returns-type",
    "title": "Jsdoc: Require returns type",
    "timeToFix": 5
  },
  {
    "patternId": "jsdoc_valid-types",
    "title": "Jsdoc: Valid types",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowEmptyNamepaths",
        "description": "allowEmptyNamepaths"
      },
      {
        "name": "checkSeesForNamepaths",
        "description": "checkSeesForNamepaths"
      }
    ]
  },
  {
    "patternId": "json_*",
    "title": "Json: *",
    "timeToFix": 5
  },
  {
    "patternId": "json_json",
    "title": "Json: Json",
    "timeToFix": 5
  },
  {
    "patternId": "json_unknown",
    "title": "Json: Unknown",
    "timeToFix": 5
  },
  {
    "patternId": "json_comment-not-permitted",
    "title": "Json: Comment not permitted",
    "timeToFix": 5
  },
  {
    "patternId": "json_undefined",
    "title": "Json: Undefined",
    "timeToFix": 5
  },
  {
    "patternId": "json_enum-value-mismatch",
    "title": "Json: Enum value mismatch",
    "timeToFix": 5
  },
  {
    "patternId": "json_unexpected-end-of-comment",
    "title": "Json: Unexpected end of comment",
    "timeToFix": 5
  },
  {
    "patternId": "json_unexpected-end-of-string",
    "title": "Json: Unexpected end of string",
    "timeToFix": 5
  },
  {
    "patternId": "json_unexpected-end-of-number",
    "title": "Json: Unexpected end of number",
    "timeToFix": 5
  },
  {
    "patternId": "json_invalid-unicode",
    "title": "Json: Invalid unicode",
    "timeToFix": 5
  },
  {
    "patternId": "json_invalid-escape-character",
    "title": "Json: Invalid escape character",
    "timeToFix": 5
  },
  {
    "patternId": "json_invalid-character",
    "title": "Json: Invalid character",
    "timeToFix": 5
  },
  {
    "patternId": "json_property-expected",
    "title": "Json: Property expected",
    "timeToFix": 5
  },
  {
    "patternId": "json_comma-expected",
    "title": "Json: Comma expected",
    "timeToFix": 5
  },
  {
    "patternId": "json_colon-expected",
    "title": "Json: Colon expected",
    "timeToFix": 5
  },
  {
    "patternId": "json_value-expected",
    "title": "Json: Value expected",
    "timeToFix": 5
  },
  {
    "patternId": "json_comma-or-close-backet-expected",
    "title": "Json: Comma or close backet expected",
    "timeToFix": 5
  },
  {
    "patternId": "json_comma-or-close-brace-expected",
    "title": "Json: Comma or close brace expected",
    "timeToFix": 5
  },
  {
    "patternId": "json_trailing-comma",
    "title": "Json: Trailing comma",
    "timeToFix": 5
  },
  {
    "patternId": "json_duplicate-key",
    "title": "Json: Duplicate key",
    "timeToFix": 5
  },
  {
    "patternId": "json_schema-resolve-error",
    "title": "Json: Schema resolve error",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_accessible-emoji",
    "title": "Jsx a11y: Accessible emoji",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_alt-text",
    "title": "Jsx a11y: Alt text",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_anchor-has-content",
    "title": "Jsx a11y: Anchor has content",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_anchor-is-valid",
    "title": "Jsx a11y: Anchor is valid",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_aria-activedescendant-has-tabindex",
    "title": "Jsx a11y: Aria activedescendant has tabindex",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_aria-props",
    "title": "Jsx a11y: Aria props",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_aria-proptypes",
    "title": "Jsx a11y: Aria proptypes",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_aria-role",
    "title": "Jsx a11y: Aria role",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreNonDOM",
        "description": "ignoreNonDOM"
      }
    ]
  },
  {
    "patternId": "jsx-a11y_aria-unsupported-elements",
    "title": "Jsx a11y: Aria unsupported elements",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_click-events-have-key-events",
    "title": "Jsx a11y: Click events have key events",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_control-has-associated-label",
    "title": "Jsx a11y: Control has associated label",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_heading-has-content",
    "title": "Jsx a11y: Heading has content",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_html-has-lang",
    "title": "Jsx a11y: Html has lang",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_iframe-has-title",
    "title": "Jsx a11y: Iframe has title",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_img-redundant-alt",
    "title": "Jsx a11y: Img redundant alt",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_interactive-supports-focus",
    "title": "Jsx a11y: Interactive supports focus",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_label-has-associated-control",
    "title": "Jsx a11y: Label has associated control",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_label-has-for",
    "title": "Jsx a11y: Label has for",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_lang",
    "title": "Jsx a11y: Lang",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_media-has-caption",
    "title": "Jsx a11y: Media has caption",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_mouse-events-have-key-events",
    "title": "Jsx a11y: Mouse events have key events",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_no-access-key",
    "title": "Jsx a11y: No access key",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_no-autofocus",
    "title": "Jsx a11y: No autofocus",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreNonDOM",
        "description": "ignoreNonDOM"
      }
    ]
  },
  {
    "patternId": "jsx-a11y_no-distracting-elements",
    "title": "Jsx a11y: No distracting elements",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_no-interactive-element-to-noninteractive-role",
    "title": "Jsx a11y: No interactive element to noninteractive role",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_no-noninteractive-element-interactions",
    "title": "Jsx a11y: No noninteractive element interactions",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_no-noninteractive-element-to-interactive-role",
    "title": "Jsx a11y: No noninteractive element to interactive role",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_no-noninteractive-tabindex",
    "title": "Jsx a11y: No noninteractive tabindex",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_no-onchange",
    "title": "Jsx a11y: No onchange",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_no-redundant-roles",
    "title": "Jsx a11y: No redundant roles",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_no-static-element-interactions",
    "title": "Jsx a11y: No static element interactions",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_role-has-required-aria-props",
    "title": "Jsx a11y: Role has required aria props",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_role-supports-aria-props",
    "title": "Jsx a11y: Role supports aria props",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_scope",
    "title": "Jsx a11y: Scope",
    "timeToFix": 5
  },
  {
    "patternId": "jsx-a11y_tabindex-no-positive",
    "title": "Jsx a11y: Tabindex no positive",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_callback-binding",
    "title": "Lodash: Callback binding",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_chain-style",
    "title": "Lodash: Chain style",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_chaining",
    "title": "Lodash: Chaining",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_collection-method-value",
    "title": "Lodash: Collection method value",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_collection-ordering",
    "title": "Lodash: Collection ordering",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_collection-return",
    "title": "Lodash: Collection return",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_consistent-compose",
    "title": "Lodash: Consistent compose",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_identity-shorthand",
    "title": "Lodash: Identity shorthand",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_import-scope",
    "title": "Lodash: Import scope",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_matches-prop-shorthand",
    "title": "Lodash: Matches prop shorthand",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_matches-shorthand",
    "title": "Lodash: Matches shorthand",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_no-commit",
    "title": "Lodash: No commit",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_no-double-unwrap",
    "title": "Lodash: No double unwrap",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_no-extra-args",
    "title": "Lodash: No extra args",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_no-unbound-this",
    "title": "Lodash: No unbound this",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_path-style",
    "title": "Lodash: Path style",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-compact",
    "title": "Lodash: Prefer compact",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-constant",
    "title": "Lodash: Prefer constant",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-filter",
    "title": "Lodash: Prefer filter",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-find",
    "title": "Lodash: Prefer find",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-flat-map",
    "title": "Lodash: Prefer flat map",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-get",
    "title": "Lodash: Prefer get",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-immutable-method",
    "title": "Lodash: Prefer immutable method",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-includes",
    "title": "Lodash: Prefer includes",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-invoke-map",
    "title": "Lodash: Prefer invoke map",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-is-nil",
    "title": "Lodash: Prefer is nil",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-lodash-chain",
    "title": "Lodash: Prefer lodash chain",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-lodash-method",
    "title": "Lodash: Prefer lodash method",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-lodash-typecheck",
    "title": "Lodash: Prefer lodash typecheck",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-map",
    "title": "Lodash: Prefer map",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-matches",
    "title": "Lodash: Prefer matches",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-noop",
    "title": "Lodash: Prefer noop",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-over-quantifier",
    "title": "Lodash: Prefer over quantifier",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-reject",
    "title": "Lodash: Prefer reject",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-some",
    "title": "Lodash: Prefer some",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-startswith",
    "title": "Lodash: Prefer startswith",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-thru",
    "title": "Lodash: Prefer thru",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-times",
    "title": "Lodash: Prefer times",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prefer-wrapper-method",
    "title": "Lodash: Prefer wrapper method",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_preferred-alias",
    "title": "Lodash: Preferred alias",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_prop-shorthand",
    "title": "Lodash: Prop shorthand",
    "timeToFix": 5
  },
  {
    "patternId": "lodash_unwrap",
    "title": "Lodash: Unwrap",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_consistent-compose",
    "title": "Lodash fp: Consistent compose",
    "description": "Enforce a consistent composition method.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_consistent-name",
    "title": "Lodash fp: Consistent name",
    "description": "Enforce a consistent name for Lodash.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-argumentless-calls",
    "title": "Lodash fp: No argumentless calls",
    "description": "Forbid argument-less calls of Lodash methods.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-chain",
    "title": "Lodash fp: No chain",
    "description": "Forbid the use of [`_.chain`](https://lodash.com/docs#chain)",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-extraneous-args",
    "title": "Lodash fp: No extraneous args",
    "description": "No extraneous arguments to methods with a fixed arity.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-extraneous-function-wrapping",
    "title": "Lodash fp: No extraneous function wrapping",
    "description": "Avoid unnecessary function wrapping.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-extraneous-iteratee-args",
    "title": "Lodash fp: No extraneous iteratee args",
    "description": "No extraneous parameters in iteratees.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-extraneous-partials",
    "title": "Lodash fp: No extraneous partials",
    "description": "No extraneous partials in method calls.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-for-each",
    "title": "Lodash fp: No for each",
    "description": " Forbid the use of [`_.forEach`](https://lodash.com/docs#forEach)",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-partial-of-curried",
    "title": "Lodash fp: No partial of curried",
    "description": "No use of [`_.partial`](https://lodash.com/docs#partial) on curried Lodash methods.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-single-composition",
    "title": "Lodash fp: No single composition",
    "description": "Enforce at least two methods arguments for composition methods.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-submodule-destructuring",
    "title": "Lodash fp: No submodule destructuring",
    "description": "Forbid destructuring of Lodash submodules.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_no-unused-result",
    "title": "Lodash fp: No unused result",
    "description": "Enforce that the result of a Lodash method call gets used.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_prefer-compact",
    "title": "Lodash fp: Prefer compact",
    "description": "Prefer [`_.compact`](https://lodash.com/docs#compact) over [`_.filter`](https://lodash.com/docs#filter) with identity function.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_prefer-composition-grouping",
    "title": "Lodash fp: Prefer composition grouping",
    "description": "Prefer grouping similar methods in composition methods.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_prefer-constant",
    "title": "Lodash fp: Prefer constant",
    "description": "Prefer [`_.constant`](https://lodash.com/docs#constant) over functions returning literals.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_prefer-flat-map",
    "title": "Lodash fp: Prefer flat map",
    "description": "Prefer [`_.flatMap`](https://lodash.com/docs#flatMap) over consecutive [`_.map`](https://lodash.com/docs#map) and [`_.flatten`](https://lodash.com/docs#flatten).",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_prefer-get",
    "title": "Lodash fp: Prefer get",
    "description": "Prefer [`_.get`](https://lodash.com/docs#get) over multiple `&&`.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_prefer-identity",
    "title": "Lodash fp: Prefer identity",
    "description": "Prefer [`_.identity`](https://lodash.com/docs#identity) over functions returning their argument.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_preferred-alias",
    "title": "Lodash fp: Preferred alias",
    "description": "Limit the use of aliases.",
    "timeToFix": 5
  },
  {
    "patternId": "lodash-fp_use-fp",
    "title": "Lodash fp: Use fp",
    "description": "Use lodash/fp instead of Lodash.",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_audit-argument-checks",
    "title": "Meteor: Audit argument checks",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_no-session",
    "title": "Meteor: No session",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_no-template-lifecycle-assignments",
    "title": "Meteor: No template lifecycle assignments",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_no-zero-timeout",
    "title": "Meteor: No zero timeout",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_eventmap-params",
    "title": "Meteor: Eventmap params",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_prefix-eventmap-selectors",
    "title": "Meteor: Prefix eventmap selectors",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_prefer-session-equals",
    "title": "Meteor: Prefer session equals",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_template-names",
    "title": "Meteor: Template names",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_scope-dom-lookups",
    "title": "Meteor: Scope dom lookups",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_no-dom-lookup-on-created",
    "title": "Meteor: No dom lookup on created",
    "timeToFix": 5
  },
  {
    "patternId": "meteor_no-template-parent-data",
    "title": "Meteor: No template parent data",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_handle-done-callback",
    "title": "Mocha: Handle done callback",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_max-top-level-suites",
    "title": "Mocha: Max top level suites",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-async-describe",
    "title": "Mocha: No async describe",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-exclusive-tests",
    "title": "Mocha: No exclusive tests",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-global-tests",
    "title": "Mocha: No global tests",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-hooks",
    "title": "Mocha: No hooks",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-hooks-for-single-case",
    "title": "Mocha: No hooks for single case",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-identical-title",
    "title": "Mocha: No identical title",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-mocha-arrows",
    "title": "Mocha: No mocha arrows",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-nested-tests",
    "title": "Mocha: No nested tests",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-pending-tests",
    "title": "Mocha: No pending tests",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-return-and-callback",
    "title": "Mocha: No return and callback",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-return-from-async",
    "title": "Mocha: No return from async",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-setup-in-describe",
    "title": "Mocha: No setup in describe",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-sibling-hooks",
    "title": "Mocha: No sibling hooks",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-skipped-tests",
    "title": "Mocha: No skipped tests",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-synchronous-tests",
    "title": "Mocha: No synchronous tests",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_no-top-level-hooks",
    "title": "Mocha: No top level hooks",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_prefer-arrow-callback",
    "title": "Mocha: Prefer arrow callback",
    "description": "Require using arrow functions for callbacks",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_valid-suite-description",
    "title": "Mocha: Valid suite description",
    "timeToFix": 5
  },
  {
    "patternId": "mocha_valid-test-description",
    "title": "Mocha: Valid test description",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-insert-calls",
    "title": "Mongodb: Check insert calls",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-update-calls",
    "title": "Mongodb: Check update calls",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-query-calls",
    "title": "Mongodb: Check query calls",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-remove-calls",
    "title": "Mongodb: Check remove calls",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-deprecated-calls",
    "title": "Mongodb: Check deprecated calls",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_no-replace",
    "title": "Mongodb: No replace",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-numeric-updates",
    "title": "Mongodb: Check numeric updates",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-rename-updates",
    "title": "Mongodb: Check rename updates",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-unset-updates",
    "title": "Mongodb: Check unset updates",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-current-date-updates",
    "title": "Mongodb: Check current date updates",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-minmax-updates",
    "title": "Mongodb: Check minmax updates",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-set-updates",
    "title": "Mongodb: Check set updates",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-push-updates",
    "title": "Mongodb: Check push updates",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-pull-updates",
    "title": "Mongodb: Check pull updates",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-pop-updates",
    "title": "Mongodb: Check pop updates",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-addtoset-updates",
    "title": "Mongodb: Check addtoset updates",
    "timeToFix": 5
  },
  {
    "patternId": "mongodb_check-deprecated-updates",
    "title": "Mongodb: Check deprecated updates",
    "timeToFix": 5
  },
  {
    "patternId": "no-only-tests_no-only-tests",
    "title": "No only tests: No only tests",
    "description": "Disallow .only blocks in tests",
    "timeToFix": 5
  },
  {
    "patternId": "no-unsafe-innerhtml_no-unsafe-innerhtml",
    "title": "No unsafe innerhtml: No unsafe innerhtml",
    "timeToFix": 5
  },
  {
    "patternId": "no-unsanitized_property",
    "title": "No unsanitized: Property",
    "description": "ESLint rule to disallow unsanitized property assignment",
    "timeToFix": 5
  },
  {
    "patternId": "no-unsanitized_method",
    "title": "No unsanitized: Method",
    "description": "ESLint rule to disallow unsanitized method calls",
    "timeToFix": 5
  },
  {
    "patternId": "prettier_prettier",
    "title": "Prettier: Prettier",
    "timeToFix": 5
  },
  {
    "patternId": "react-hooks_rules-of-hooks",
    "title": "React hooks: Rules of hooks",
    "description": "Enforces the Rules of Hooks",
    "timeToFix": 5
  },
  {
    "patternId": "react-hooks_exhaustive-deps",
    "title": "React hooks: Exhaustive deps",
    "description": "Verifies the list of dependencies for Hooks like useEffect and similar",
    "timeToFix": 5
  },
  {
    "patternId": "react-native_no-unused-styles",
    "title": "React native: No unused styles",
    "timeToFix": 5
  },
  {
    "patternId": "react-native_no-inline-styles",
    "title": "React native: No inline styles",
    "timeToFix": 5
  },
  {
    "patternId": "react-native_no-color-literals",
    "title": "React native: No color literals",
    "timeToFix": 5
  },
  {
    "patternId": "react-native_sort-styles",
    "title": "React native: Sort styles",
    "timeToFix": 5
  },
  {
    "patternId": "react-native_split-platform-components",
    "title": "React native: Split platform components",
    "timeToFix": 5
  },
  {
    "patternId": "react-native_no-raw-text",
    "title": "React native: No raw text",
    "timeToFix": 5
  },
  {
    "patternId": "react-native_no-single-element-style-arrays",
    "title": "React native: No single element style arrays",
    "description": "Disallow single element style arrays. These cause unnecessary re-renders as the identity of the array always changes",
    "timeToFix": 5
  },
  {
    "patternId": "react_boolean-prop-naming",
    "title": "React: Boolean prop naming",
    "description": "Enforces consistent naming for boolean props",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "rule",
        "description": "rule"
      },
      {
        "name": "validateNested",
        "description": "validateNested"
      }
    ]
  },
  {
    "patternId": "react_button-has-type",
    "title": "React: Button has type",
    "description": "Forbid \"button\" element without an explicit \"type\" attribute",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "button",
        "description": "button"
      },
      {
        "name": "submit",
        "description": "submit"
      },
      {
        "name": "reset",
        "description": "reset"
      }
    ]
  },
  {
    "patternId": "react_default-props-match-prop-types",
    "title": "React: Default props match prop types",
    "description": "Enforce all defaultProps are defined and not \"required\" in propTypes.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowRequiredDefaults",
        "description": "allowRequiredDefaults"
      }
    ]
  },
  {
    "patternId": "react_destructuring-assignment",
    "title": "React: Destructuring assignment",
    "description": "Enforce consistent usage of destructuring assignment of props, state, and context",
    "timeToFix": 5
  },
  {
    "patternId": "react_display-name",
    "title": "React: Display name",
    "description": "Prevent missing displayName in a React component definition",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreTranspilerName",
        "description": "ignoreTranspilerName"
      }
    ]
  },
  {
    "patternId": "react_forbid-component-props",
    "title": "React: Forbid component props",
    "description": "Forbid certain props on components",
    "timeToFix": 5
  },
  {
    "patternId": "react_forbid-dom-props",
    "title": "React: Forbid dom props",
    "description": "Forbid certain props on DOM Nodes",
    "timeToFix": 5
  },
  {
    "patternId": "react_forbid-elements",
    "title": "React: Forbid elements",
    "description": "Forbid certain elements",
    "timeToFix": 5
  },
  {
    "patternId": "react_forbid-foreign-prop-types",
    "title": "React: Forbid foreign prop types",
    "description": "Forbid using another component's propTypes",
    "timeToFix": 5
  },
  {
    "patternId": "react_forbid-prop-types",
    "title": "React: Forbid prop types",
    "description": "Forbid certain propTypes",
    "timeToFix": 5
  },
  {
    "patternId": "react_function-component-definition",
    "title": "React: Function component definition",
    "description": "Standardize the way function component get defined",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-boolean-value",
    "title": "React: Jsx boolean value",
    "description": "Enforce boolean attributes notation in JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-child-element-spacing",
    "title": "React: Jsx child element spacing",
    "description": "Ensures inline tags are not rendered without spaces between them",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-closing-bracket-location",
    "title": "React: Jsx closing bracket location",
    "description": "Validate closing bracket location in JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-closing-tag-location",
    "title": "React: Jsx closing tag location",
    "description": "Validate closing tag location for multiline JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-curly-spacing",
    "title": "React: Jsx curly spacing",
    "description": "Enforce or disallow spaces inside of curly braces in JSX attributes",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-curly-newline",
    "title": "React: Jsx curly newline",
    "description": "Enforce consistent line breaks inside jsx curly",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-equals-spacing",
    "title": "React: Jsx equals spacing",
    "description": "Disallow or enforce spaces around equal signs in JSX attributes",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-filename-extension",
    "title": "React: Jsx filename extension",
    "description": "Restrict file extensions that may contain JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-first-prop-new-line",
    "title": "React: Jsx first prop new line",
    "description": "Ensure proper position of the first property in JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-handler-names",
    "title": "React: Jsx handler names",
    "description": "Enforce event handler naming conventions in JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-indent",
    "title": "React: Jsx indent",
    "description": "Validate JSX indentation",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-indent-props",
    "title": "React: Jsx indent props",
    "description": "Validate props indentation in JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-key",
    "title": "React: Jsx key",
    "description": "Report missing `key` props in iterators/collection literals",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "checkFragmentShorthand",
        "description": "checkFragmentShorthand"
      }
    ]
  },
  {
    "patternId": "react_jsx-max-depth",
    "title": "React: Jsx max depth",
    "description": "Validate JSX maximum depth",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-max-props-per-line",
    "title": "React: Jsx max props per line",
    "description": "Limit maximum of props on a single line in JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-no-bind",
    "title": "React: Jsx no bind",
    "description": "Prevents usage of Function.prototype.bind and arrow functions in React component props",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowArrowFunctions",
        "description": "allowArrowFunctions"
      },
      {
        "name": "allowBind",
        "description": "allowBind"
      },
      {
        "name": "allowFunctions",
        "description": "allowFunctions"
      },
      {
        "name": "ignoreRefs",
        "description": "ignoreRefs"
      },
      {
        "name": "ignoreDOMComponents",
        "description": "ignoreDOMComponents"
      }
    ]
  },
  {
    "patternId": "react_jsx-no-comment-textnodes",
    "title": "React: Jsx no comment textnodes",
    "description": "Comments inside children section of tag should be placed inside braces",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-no-duplicate-props",
    "title": "React: Jsx no duplicate props",
    "description": "Enforce no duplicate props",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-no-literals",
    "title": "React: Jsx no literals",
    "description": "Prevent using string literals in React component definition",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-no-script-url",
    "title": "React: Jsx no script url",
    "description": "Forbid `javascript:` URLs",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-no-target-blank",
    "title": "React: Jsx no target blank",
    "description": "Forbid target=\"_blank\" attribute without rel=\"noopener noreferrer\"",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-no-useless-fragment",
    "title": "React: Jsx no useless fragment",
    "description": "Disallow unnecessary fragments",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-one-expression-per-line",
    "title": "React: Jsx one expression per line",
    "description": "Limit to one expression per line in JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-no-undef",
    "title": "React: Jsx no undef",
    "description": "Disallow undeclared variables in JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-curly-brace-presence",
    "title": "React: Jsx curly brace presence",
    "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enfore JSX expressions on literals in JSX children or attributes",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-pascal-case",
    "title": "React: Jsx pascal case",
    "description": "Enforce PascalCase for user-defined JSX components",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-fragments",
    "title": "React: Jsx fragments",
    "description": "Enforce shorthand or standard form for React fragments",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-props-no-multi-spaces",
    "title": "React: Jsx props no multi spaces",
    "description": "Disallow multiple spaces between inline JSX props",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-props-no-spreading",
    "title": "React: Jsx props no spreading",
    "description": "Prevent JSX prop spreading",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-sort-default-props",
    "title": "React: Jsx sort default props",
    "description": "Enforce default props alphabetical sorting",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-sort-props",
    "title": "React: Jsx sort props",
    "description": "Enforce props alphabetical sorting",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-space-before-closing",
    "title": "React: Jsx space before closing",
    "description": "Validate spacing before closing bracket in JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-tag-spacing",
    "title": "React: Jsx tag spacing",
    "description": "Validate whitespace in and around the JSX opening and closing brackets",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-uses-react",
    "title": "React: Jsx uses react",
    "description": "Prevent React to be marked as unused",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-uses-vars",
    "title": "React: Jsx uses vars",
    "description": "Prevent variables used in JSX to be marked as unused",
    "timeToFix": 5
  },
  {
    "patternId": "react_jsx-wrap-multilines",
    "title": "React: Jsx wrap multilines",
    "description": "Prevent missing parentheses around multilines JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-access-state-in-setstate",
    "title": "React: No access state in setstate",
    "description": "Reports when this.state is accessed within setState",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-adjacent-inline-elements",
    "title": "React: No adjacent inline elements",
    "description": "Prevent adjacent inline elements not separated by whitespace.",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-array-index-key",
    "title": "React: No array index key",
    "description": "Prevent usage of Array index in keys",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-children-prop",
    "title": "React: No children prop",
    "description": "Prevent passing of children as props.",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-danger",
    "title": "React: No danger",
    "description": "Prevent usage of dangerous JSX props",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-danger-with-children",
    "title": "React: No danger with children",
    "description": "Report when a DOM element is using both children and dangerouslySetInnerHTML",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-deprecated",
    "title": "React: No deprecated",
    "description": "Prevent usage of deprecated methods",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-did-mount-set-state",
    "title": "React: No did mount set state",
    "description": "Prevent usage of setState in componentDidMount",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-did-update-set-state",
    "title": "React: No did update set state",
    "description": "Prevent usage of setState in componentDidUpdate",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-direct-mutation-state",
    "title": "React: No direct mutation state",
    "description": "Prevent direct mutation of this.state",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-find-dom-node",
    "title": "React: No find dom node",
    "description": "Prevent usage of findDOMNode",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-is-mounted",
    "title": "React: No is mounted",
    "description": "Prevent usage of isMounted",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-multi-comp",
    "title": "React: No multi comp",
    "description": "Prevent multiple component definition per file",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreStateless",
        "description": "ignoreStateless"
      }
    ]
  },
  {
    "patternId": "react_no-set-state",
    "title": "React: No set state",
    "description": "Prevent usage of setState",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-string-refs",
    "title": "React: No string refs",
    "description": "Prevent string definitions for references and prevent referencing this.refs",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-redundant-should-component-update",
    "title": "React: No redundant should component update",
    "description": "Flag shouldComponentUpdate when extending PureComponent",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-render-return-value",
    "title": "React: No render return value",
    "description": "Prevent usage of the return value of React.render",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-this-in-sfc",
    "title": "React: No this in sfc",
    "description": "Report \"this\" being used in stateless components",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-typos",
    "title": "React: No typos",
    "description": "Prevent common typos",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-unescaped-entities",
    "title": "React: No unescaped entities",
    "description": "Detect unescaped HTML entities, which might represent malformed tags",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-unknown-property",
    "title": "React: No unknown property",
    "description": "Prevent usage of unknown DOM property",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-unsafe",
    "title": "React: No unsafe",
    "description": "Prevent usage of unsafe lifecycle methods",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "checkAliases",
        "description": "checkAliases"
      }
    ]
  },
  {
    "patternId": "react_no-unused-prop-types",
    "title": "React: No unused prop types",
    "description": "Prevent definitions of unused prop types",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-unused-state",
    "title": "React: No unused state",
    "description": "Prevent definition of unused state fields",
    "timeToFix": 5
  },
  {
    "patternId": "react_no-will-update-set-state",
    "title": "React: No will update set state",
    "description": "Prevent usage of setState in componentWillUpdate",
    "timeToFix": 5
  },
  {
    "patternId": "react_prefer-es6-class",
    "title": "React: Prefer es6 class",
    "description": "Enforce ES5 or ES6 class for React Components",
    "timeToFix": 5
  },
  {
    "patternId": "react_prefer-read-only-props",
    "title": "React: Prefer read only props",
    "description": "Require read-only props.",
    "timeToFix": 5
  },
  {
    "patternId": "react_prefer-stateless-function",
    "title": "React: Prefer stateless function",
    "description": "Enforce stateless components to be written as a pure function",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignorePureComponents",
        "description": "ignorePureComponents"
      }
    ]
  },
  {
    "patternId": "react_prop-types",
    "title": "React: Prop types",
    "description": "Prevent missing props validation in a React component definition",
    "timeToFix": 5
  },
  {
    "patternId": "react_react-in-jsx-scope",
    "title": "React: React in jsx scope",
    "description": "Prevent missing React when using JSX",
    "timeToFix": 5
  },
  {
    "patternId": "react_require-default-props",
    "title": "React: Require default props",
    "description": "Enforce a defaultProps definition for every prop that is not a required prop.",
    "timeToFix": 5
  },
  {
    "patternId": "react_require-optimization",
    "title": "React: Require optimization",
    "description": "Enforce React components to have a shouldComponentUpdate method",
    "timeToFix": 5
  },
  {
    "patternId": "react_require-render-return",
    "title": "React: Require render return",
    "description": "Enforce ES5 or ES6 class for returning value in render function",
    "timeToFix": 5
  },
  {
    "patternId": "react_self-closing-comp",
    "title": "React: Self closing comp",
    "description": "Prevent extra closing tags for components without children",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "component",
        "description": "component"
      },
      {
        "name": "html",
        "description": "html"
      }
    ]
  },
  {
    "patternId": "react_sort-comp",
    "title": "React: Sort comp",
    "description": "Enforce component methods order",
    "timeToFix": 5
  },
  {
    "patternId": "react_sort-prop-types",
    "title": "React: Sort prop types",
    "description": "Enforce propTypes declarations alphabetical sorting",
    "timeToFix": 5
  },
  {
    "patternId": "react_state-in-constructor",
    "title": "React: State in constructor",
    "description": "State initialization in an ES6 class component should be in a constructor",
    "timeToFix": 5
  },
  {
    "patternId": "react_static-property-placement",
    "title": "React: Static property placement",
    "description": "Defines where React component static properties should be positioned.",
    "timeToFix": 5
  },
  {
    "patternId": "react_style-prop-object",
    "title": "React: Style prop object",
    "description": "Enforce style prop value is an object",
    "timeToFix": 5
  },
  {
    "patternId": "react_void-dom-elements-no-children",
    "title": "React: Void dom elements no children",
    "description": "Prevent passing of children to void DOM elements (e.g. `<br />`).",
    "timeToFix": 5
  },
  {
    "patternId": "redux-saga_no-yield-in-race",
    "title": "Redux saga: No yield in race",
    "description": "Flag use of yield inside race effects",
    "timeToFix": 5
  },
  {
    "patternId": "redux-saga_yield-effects",
    "title": "Redux saga: Yield effects",
    "description": "Enforce yield in front of effects",
    "timeToFix": 5
  },
  {
    "patternId": "redux-saga_no-unhandled-errors",
    "title": "Redux saga: No unhandled errors",
    "description": "Enforce error handling on sagas",
    "timeToFix": 5
  },
  {
    "patternId": "relay_graphql-syntax",
    "title": "Relay: Graphql syntax",
    "description": "Validates the syntax of graphql`...` templates.",
    "timeToFix": 5
  },
  {
    "patternId": "relay_compat-uses-vars",
    "title": "Relay: Compat uses vars",
    "description": "Relay Compat transforms fragment spreads from `...Container_foo` to `Container.getFragment('foo')`. This makes ESLint aware of this.",
    "timeToFix": 5
  },
  {
    "patternId": "relay_graphql-naming",
    "title": "Relay: Graphql naming",
    "description": "Validates naming conventions of graphql tags",
    "timeToFix": 5
  },
  {
    "patternId": "relay_generated-flow-types",
    "title": "Relay: Generated flow types",
    "description": "Validates usage of RelayModern generated flow types",
    "timeToFix": 5
  },
  {
    "patternId": "relay_no-future-added-value",
    "title": "Relay: No future added value",
    "timeToFix": 5
  },
  {
    "patternId": "relay_unused-fields",
    "title": "Relay: Unused fields",
    "timeToFix": 5
  },
  {
    "patternId": "relay_hook-required-argument",
    "title": "Relay: Hook required argument",
    "description": "Validates that the second argument is passed to relay hooks.",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_accidental__assignment",
    "title": "Scanjs rules: Accidental_assignment",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_assign__to__hostname",
    "title": "Scanjs rules: Assign_to_hostname",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_assign__to__href",
    "title": "Scanjs rules: Assign_to_href",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_assign__to__location",
    "title": "Scanjs rules: Assign_to_location",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_assign__to__onmessage",
    "title": "Scanjs rules: Assign_to_onmessage",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_assign__to__pathname",
    "title": "Scanjs rules: Assign_to_pathname",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_assign__to__protocol",
    "title": "Scanjs rules: Assign_to_protocol",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_assign__to__search",
    "title": "Scanjs rules: Assign_to_search",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_assign__to__src",
    "title": "Scanjs rules: Assign_to_src",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__Function",
    "title": "Scanjs rules: Call_Function",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__addEventListener",
    "title": "Scanjs rules: Call_addEventListener",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__addEventListener__deviceproximity",
    "title": "Scanjs rules: Call_addEventListener_deviceproximity",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__addEventListener__message",
    "title": "Scanjs rules: Call_addEventListener_message",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__connect",
    "title": "Scanjs rules: Call_connect",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__eval",
    "title": "Scanjs rules: Call_eval",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__execScript",
    "title": "Scanjs rules: Call_execScript",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__hide",
    "title": "Scanjs rules: Call_hide",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__open__remote=true",
    "title": "Scanjs rules: Call_open_remote=true",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__parseFromString",
    "title": "Scanjs rules: Call_parseFromString",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__setAttribute__mozbrowser",
    "title": "Scanjs rules: Call_setAttribute_mozbrowser",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__setImmediate",
    "title": "Scanjs rules: Call_setImmediate",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__setInterval",
    "title": "Scanjs rules: Call_setInterval",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_call__setTimeout",
    "title": "Scanjs rules: Call_setTimeout",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_identifier__indexedDB",
    "title": "Scanjs rules: Identifier_indexedDB",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_identifier__localStorage",
    "title": "Scanjs rules: Identifier_localStorage",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_identifier__sessionStorage",
    "title": "Scanjs rules: Identifier_sessionStorage",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_new__Function",
    "title": "Scanjs rules: New_Function",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_property__addIdleObserver",
    "title": "Scanjs rules: Property_addIdleObserver",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_property__createContextualFragment",
    "title": "Scanjs rules: Property_createContextualFragment",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_property__crypto",
    "title": "Scanjs rules: Property_crypto",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_property__geolocation",
    "title": "Scanjs rules: Property_geolocation",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_property__getUserMedia",
    "title": "Scanjs rules: Property_getUserMedia",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_property__indexedDB",
    "title": "Scanjs rules: Property_indexedDB",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_property__localStorage",
    "title": "Scanjs rules: Property_localStorage",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_property__mgmt",
    "title": "Scanjs rules: Property_mgmt",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_property__sessionStorage",
    "title": "Scanjs rules: Property_sessionStorage",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_cognitive-complexity",
    "title": "Sonarjs: Cognitive complexity",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_max-switch-cases",
    "title": "Sonarjs: Max switch cases",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-all-duplicated-branches",
    "title": "Sonarjs: No all duplicated branches",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-collapsible-if",
    "title": "Sonarjs: No collapsible if",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-collection-size-mischeck",
    "title": "Sonarjs: No collection size mischeck",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-duplicate-string",
    "title": "Sonarjs: No duplicate string",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-duplicated-branches",
    "title": "Sonarjs: No duplicated branches",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-element-overwrite",
    "title": "Sonarjs: No element overwrite",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-extra-arguments",
    "title": "Sonarjs: No extra arguments",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-identical-conditions",
    "title": "Sonarjs: No identical conditions",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-identical-functions",
    "title": "Sonarjs: No identical functions",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-identical-expressions",
    "title": "Sonarjs: No identical expressions",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-inverted-boolean-check",
    "title": "Sonarjs: No inverted boolean check",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-one-iteration-loop",
    "title": "Sonarjs: No one iteration loop",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-redundant-boolean",
    "title": "Sonarjs: No redundant boolean",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-redundant-jump",
    "title": "Sonarjs: No redundant jump",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-same-line-conditional",
    "title": "Sonarjs: No same line conditional",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-small-switch",
    "title": "Sonarjs: No small switch",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-unused-collection",
    "title": "Sonarjs: No unused collection",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-use-of-empty-return-value",
    "title": "Sonarjs: No use of empty return value",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_no-useless-catch",
    "title": "Sonarjs: No useless catch",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_prefer-immediate-return",
    "title": "Sonarjs: Prefer immediate return",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_prefer-object-literal",
    "title": "Sonarjs: Prefer object literal",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_prefer-single-boolean-return",
    "title": "Sonarjs: Prefer single boolean return",
    "timeToFix": 5
  },
  {
    "patternId": "sonarjs_prefer-while",
    "title": "Sonarjs: Prefer while",
    "timeToFix": 5
  },
  {
    "patternId": "sort-imports-es6-autofix_sort-imports-es6",
    "title": "Sort imports es6 autofix: Sort imports es6",
    "description": "Enforce sorted import declarations within modules",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreCase",
        "description": "ignoreCase"
      },
      {
        "name": "memberSyntaxSortOrder",
        "description": "memberSyntaxSortOrder"
      },
      {
        "name": "ignoreMemberSort",
        "description": "ignoreMemberSort"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_adjacent-overload-signatures",
    "title": "@typescript eslint: Adjacent overload signatures",
    "description": "Require that member overloads be consecutive",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_array-type",
    "title": "@typescript eslint: Array type",
    "description": "Requires using either `T[]` or `Array<T>` for arrays",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_await-thenable",
    "title": "@typescript eslint: Await thenable",
    "description": "Disallows awaiting a value that is not a Thenable",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_ban-ts-comment",
    "title": "@typescript eslint: Ban ts comment",
    "description": "Bans `// @ts-<directive>` comments from being used",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ts-expect-error",
        "description": "ts-expect-error"
      },
      {
        "name": "ts-ignore",
        "description": "ts-ignore"
      },
      {
        "name": "ts-nocheck",
        "description": "ts-nocheck"
      },
      {
        "name": "ts-check",
        "description": "ts-check"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_ban-ts-ignore",
    "title": "@typescript eslint: Ban ts ignore",
    "description": "Bans “// @ts-ignore” comments from being used",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_ban-types",
    "title": "@typescript eslint: Ban types",
    "description": "Bans specific types from being used",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_brace-style",
    "title": "@typescript eslint: Brace style",
    "description": "Enforce consistent brace style for blocks",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowSingleLine",
        "description": "allowSingleLine"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_camelcase",
    "title": "@typescript eslint: Camelcase",
    "description": "Enforce camelCase naming convention",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      },
      {
        "name": "ignoreImports",
        "description": "ignoreImports"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_class-name-casing",
    "title": "@typescript eslint: Class name casing",
    "description": "Require PascalCased class and interface names",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowUnderscorePrefix",
        "description": "allowUnderscorePrefix"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_class-literal-property-style",
    "title": "@typescript eslint: Class literal property style",
    "description": "Ensures that literals on classes are exposed in a consistent style",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_comma-spacing",
    "title": "@typescript eslint: Comma spacing",
    "description": "Enforces consistent spacing before and after commas",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_consistent-type-assertions",
    "title": "@typescript eslint: Consistent type assertions",
    "description": "Enforces consistent usage of type assertions",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_consistent-type-definitions",
    "title": "@typescript eslint: Consistent type definitions",
    "description": "Consistent with type definition either `interface` or `type`",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_default-param-last",
    "title": "@typescript eslint: Default param last",
    "description": "Enforce default parameters to be last",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_dot-notation",
    "title": "@typescript eslint: Dot notation",
    "description": "Enforce dot notation whenever possible",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowKeywords",
        "description": "allowKeywords"
      },
      {
        "name": "allowPattern",
        "description": "allowPattern"
      },
      {
        "name": "allowPrivateClassPropertyAccess",
        "description": "allowPrivateClassPropertyAccess"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_explicit-function-return-type",
    "title": "@typescript eslint: Explicit function return type",
    "description": "Require explicit return types on functions and class methods",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_explicit-member-accessibility",
    "title": "@typescript eslint: Explicit member accessibility",
    "description": "Require explicit accessibility modifiers on class properties and methods",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_explicit-module-boundary-types",
    "title": "@typescript eslint: Explicit module boundary types",
    "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_func-call-spacing",
    "title": "@typescript eslint: Func call spacing",
    "description": "Require or disallow spacing between function identifiers and their invocations",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_generic-type-naming",
    "title": "@typescript eslint: Generic type naming",
    "description": "Enforces naming of generic type variables",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_indent",
    "title": "@typescript eslint: Indent",
    "description": "Enforce consistent indentation",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SwitchCase",
        "description": "SwitchCase"
      },
      {
        "name": "flatTernaryExpressions",
        "description": "flatTernaryExpressions"
      },
      {
        "name": "ignoreComments",
        "description": "ignoreComments"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_init-declarations",
    "title": "@typescript eslint: Init declarations",
    "description": "Require or disallow initialization in variable declarations",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_interface-name-prefix",
    "title": "@typescript eslint: Interface name prefix",
    "description": "Require that interface names should or should not prefixed with `I`",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_keyword-spacing",
    "title": "@typescript eslint: Keyword spacing",
    "description": "Enforce consistent spacing before and after keywords",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_member-delimiter-style",
    "title": "@typescript eslint: Member delimiter style",
    "description": "Require a specific member delimiter style for interfaces and type literals",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_member-naming",
    "title": "@typescript eslint: Member naming",
    "description": "Enforces naming conventions for class members by visibility",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_member-ordering",
    "title": "@typescript eslint: Member ordering",
    "description": "Require a consistent member declaration order",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_method-signature-style",
    "title": "@typescript eslint: Method signature style",
    "description": "Enforces using a particular method signature syntax.",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_naming-convention",
    "title": "@typescript eslint: Naming convention",
    "description": "Enforces naming conventions for everything across a codebase",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-array-constructor",
    "title": "@typescript eslint: No array constructor",
    "description": "Disallow generic `Array` constructors",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-base-to-string",
    "title": "@typescript eslint: No base to string",
    "description": "Requires that `.toString()` is only called on objects which provide useful information when stringified",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreTaggedTemplateExpressions",
        "description": "ignoreTaggedTemplateExpressions"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_no-dupe-class-members",
    "title": "@typescript eslint: No dupe class members",
    "description": "Disallow duplicate class members",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-dynamic-delete",
    "title": "@typescript eslint: No dynamic delete",
    "description": "Disallow the delete operator with computed key expressions",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-empty-function",
    "title": "@typescript eslint: No empty function",
    "description": "Disallow empty functions",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-empty-interface",
    "title": "@typescript eslint: No empty interface",
    "description": "Disallow the declaration of empty interfaces",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-explicit-any",
    "title": "@typescript eslint: No explicit any",
    "description": "Disallow usage of the `any` type",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-extra-non-null-assertion",
    "title": "@typescript eslint: No extra non null assertion",
    "description": "Disallow extra non-null assertion",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-extra-parens",
    "title": "@typescript eslint: No extra parens",
    "description": "Disallow unnecessary parentheses",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-extra-semi",
    "title": "@typescript eslint: No extra semi",
    "description": "Disallow unnecessary semicolons",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-extraneous-class",
    "title": "@typescript eslint: No extraneous class",
    "description": "Forbids the use of classes as namespaces",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-floating-promises",
    "title": "@typescript eslint: No floating promises",
    "description": "Requires Promise-like values to be handled appropriately",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-for-in-array",
    "title": "@typescript eslint: No for in array",
    "description": "Disallow iterating over an array with a for-in loop",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-implied-eval",
    "title": "@typescript eslint: No implied eval",
    "description": "Disallow the use of `eval()`-like methods",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-inferrable-types",
    "title": "@typescript eslint: No inferrable types",
    "description": "Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-invalid-void-type",
    "title": "@typescript eslint: No invalid void type",
    "description": "Disallows usage of `void` type outside of generic or return types",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-magic-numbers",
    "title": "@typescript eslint: No magic numbers",
    "description": "Disallow magic numbers",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "detectObjects",
        "description": "detectObjects"
      },
      {
        "name": "enforceConst",
        "description": "enforceConst"
      },
      {
        "name": "ignoreArrayIndexes",
        "description": "ignoreArrayIndexes"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_no-misused-new",
    "title": "@typescript eslint: No misused new",
    "description": "Enforce valid definition of `new` and `constructor`",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-misused-promises",
    "title": "@typescript eslint: No misused promises",
    "description": "Avoid using promises in places not designed to handle them",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-namespace",
    "title": "@typescript eslint: No namespace",
    "description": "Disallow the use of custom TypeScript modules and namespaces",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-non-null-asserted-optional-chain",
    "title": "@typescript eslint: No non null asserted optional chain",
    "description": "Disallows using a non-null assertion after an optional chain expression",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-non-null-assertion",
    "title": "@typescript eslint: No non null assertion",
    "description": "Disallows non-null assertions using the `!` postfix operator",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-parameter-properties",
    "title": "@typescript eslint: No parameter properties",
    "description": "Disallow the use of parameter properties in class constructors",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-require-imports",
    "title": "@typescript eslint: No require imports",
    "description": "Disallows invocation of `require()`",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-this-alias",
    "title": "@typescript eslint: No this alias",
    "description": "Disallow aliasing `this`",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-throw-literal",
    "title": "@typescript eslint: No throw literal",
    "description": "Disallow throwing literals as exceptions",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-type-alias",
    "title": "@typescript eslint: No type alias",
    "description": "Disallow the use of type aliases",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unnecessary-boolean-literal-compare",
    "title": "@typescript eslint: No unnecessary boolean literal compare",
    "description": "Flags unnecessary equality comparisons against boolean literals",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unnecessary-condition",
    "title": "@typescript eslint: No unnecessary condition",
    "description": "Prevents conditionals where the type is always truthy or always falsy",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unnecessary-qualifier",
    "title": "@typescript eslint: No unnecessary qualifier",
    "description": "Warns when a namespace qualifier is unnecessary",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unnecessary-type-arguments",
    "title": "@typescript eslint: No unnecessary type arguments",
    "description": "Enforces that type arguments will not be used if not required",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unnecessary-type-assertion",
    "title": "@typescript eslint: No unnecessary type assertion",
    "description": "Warns if a type assertion does not change the type of an expression",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unsafe-assignment",
    "title": "@typescript eslint: No unsafe assignment",
    "description": "Disallows assigning any to variables and properties",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unsafe-call",
    "title": "@typescript eslint: No unsafe call",
    "description": "Disallows calling an any type value",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unsafe-member-access",
    "title": "@typescript eslint: No unsafe member access",
    "description": "Disallows member access on any typed variables",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unsafe-return",
    "title": "@typescript eslint: No unsafe return",
    "description": "Disallows returning any from a function",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-untyped-public-signature",
    "title": "@typescript eslint: No untyped public signature",
    "description": "Disallow untyped public methods",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unused-expressions",
    "title": "@typescript eslint: No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "allowShortCircuit"
      },
      {
        "name": "allowTernary",
        "description": "allowTernary"
      },
      {
        "name": "allowTaggedTemplates",
        "description": "allowTaggedTemplates"
      }
    ]
  },
  {
    "patternId": "@typescript-eslint_no-unused-vars-experimental",
    "title": "@typescript eslint: No unused vars experimental",
    "description": "Disallow unused variables and arguments",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-unused-vars",
    "title": "@typescript eslint: No unused vars",
    "description": "Disallow unused variables",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-use-before-define",
    "title": "@typescript eslint: No use before define",
    "description": "Disallow the use of variables before they are defined",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-useless-constructor",
    "title": "@typescript eslint: No useless constructor",
    "description": "Disallow unnecessary constructors",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_no-var-requires",
    "title": "@typescript eslint: No var requires",
    "description": "Disallows the use of require statements except in import statements",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-as-const",
    "title": "@typescript eslint: Prefer as const",
    "description": "Prefer usage of `as const` over literal type",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-for-of",
    "title": "@typescript eslint: Prefer for of",
    "description": "Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-function-type",
    "title": "@typescript eslint: Prefer function type",
    "description": "Use function types instead of interfaces with call signatures",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-includes",
    "title": "@typescript eslint: Prefer includes",
    "description": "Enforce `includes` method over `indexOf` method",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-namespace-keyword",
    "title": "@typescript eslint: Prefer namespace keyword",
    "description": "Require the use of the `namespace` keyword instead of the `module` keyword to declare custom TypeScript modules",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-nullish-coalescing",
    "title": "@typescript eslint: Prefer nullish coalescing",
    "description": "Enforce the usage of the nullish coalescing operator instead of logical chaining",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-optional-chain",
    "title": "@typescript eslint: Prefer optional chain",
    "description": "Prefer using concise optional chain expressions instead of chained logical ands",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-readonly-parameter-types",
    "title": "@typescript eslint: Prefer readonly parameter types",
    "description": "Requires that function parameters are typed as readonly to prevent accidental mutation of inputs",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-readonly",
    "title": "@typescript eslint: Prefer readonly",
    "description": "Requires that private members are marked as `readonly` if they're never modified outside of the constructor",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-reduce-type-parameter",
    "title": "@typescript eslint: Prefer reduce type parameter",
    "description": "Prefer using type parameter when calling `Array#reduce` instead of casting",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-regexp-exec",
    "title": "@typescript eslint: Prefer regexp exec",
    "description": "Enforce that `RegExp#exec` is used instead of `String#match` if no global flag is provided",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-string-starts-ends-with",
    "title": "@typescript eslint: Prefer string starts ends with",
    "description": "Enforce the use of `String#startsWith` and `String#endsWith` instead of other equivalent methods of checking substrings",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_prefer-ts-expect-error",
    "title": "@typescript eslint: Prefer ts expect error",
    "description": "Recommends using `// @ts-expect-error` over `// @ts-ignore`",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_promise-function-async",
    "title": "@typescript eslint: Promise function async",
    "description": "Requires any function or method that returns a Promise to be marked async",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_quotes",
    "title": "@typescript eslint: Quotes",
    "description": "Enforce the consistent use of either backticks, double, or single quotes",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_require-array-sort-compare",
    "title": "@typescript eslint: Require array sort compare",
    "description": "Requires `Array#sort` calls to always provide a `compareFunction`",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_require-await",
    "title": "@typescript eslint: Require await",
    "description": "Disallow async functions which have no `await` expression",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_restrict-plus-operands",
    "title": "@typescript eslint: Restrict plus operands",
    "description": "When adding two variables, operands must both be of type number or of type string",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_restrict-template-expressions",
    "title": "@typescript eslint: Restrict template expressions",
    "description": "Enforce template literal expressions to be of string type",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_return-await",
    "title": "@typescript eslint: Return await",
    "description": "Enforces consistent returning of awaited values",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_semi",
    "title": "@typescript eslint: Semi",
    "description": "Require or disallow semicolons instead of ASI",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_space-before-function-paren",
    "title": "@typescript eslint: Space before function paren",
    "description": "Enforces consistent spacing before function parenthesis",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_strict-boolean-expressions",
    "title": "@typescript eslint: Strict boolean expressions",
    "description": "Restricts the types allowed in boolean expressions",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_switch-exhaustiveness-check",
    "title": "@typescript eslint: Switch exhaustiveness check",
    "description": "Exhaustiveness checking in switch with union type",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_triple-slash-reference",
    "title": "@typescript eslint: Triple slash reference",
    "description": "Sets preference level for triple slash directives versus ES6-style import declarations",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_type-annotation-spacing",
    "title": "@typescript eslint: Type annotation spacing",
    "description": "Require consistent spacing around type annotations",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_typedef",
    "title": "@typescript eslint: Typedef",
    "description": "Requires type annotations to exist",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_unbound-method",
    "title": "@typescript eslint: Unbound method",
    "description": "Enforces unbound methods are called with their expected scope",
    "timeToFix": 5
  },
  {
    "patternId": "@typescript-eslint_unified-signatures",
    "title": "@typescript eslint: Unified signatures",
    "description": "Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter",
    "timeToFix": 5
  },
  {
    "patternId": "vue_array-bracket-spacing",
    "title": "Vue: Array bracket spacing",
    "description": "Enforce consistent spacing inside array brackets",
    "timeToFix": 5
  },
  {
    "patternId": "vue_arrow-spacing",
    "title": "Vue: Arrow spacing",
    "description": "Enforce consistent spacing before and after the arrow in arrow functions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ]
  },
  {
    "patternId": "vue_attribute-hyphenation",
    "title": "Vue: Attribute hyphenation",
    "description": "Enforce attribute naming style on custom components in template",
    "timeToFix": 5
  },
  {
    "patternId": "vue_attributes-order",
    "title": "Vue: Attributes order",
    "description": "Enforce order of attributes",
    "timeToFix": 5
  },
  {
    "patternId": "vue_block-spacing",
    "title": "Vue: Block spacing",
    "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
    "timeToFix": 5
  },
  {
    "patternId": "vue_brace-style",
    "title": "Vue: Brace style",
    "description": "Enforce consistent brace style for blocks",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowSingleLine",
        "description": "allowSingleLine"
      }
    ]
  },
  {
    "patternId": "vue_camelcase",
    "title": "Vue: Camelcase",
    "description": "Enforce camelcase naming convention",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      },
      {
        "name": "ignoreImports",
        "description": "ignoreImports"
      }
    ]
  },
  {
    "patternId": "vue_comma-dangle",
    "title": "Vue: Comma dangle",
    "description": "Require or disallow trailing commas",
    "timeToFix": 5
  },
  {
    "patternId": "vue_comment-directive",
    "title": "Vue: Comment directive",
    "description": "Support comment-directives in `<template>`",
    "timeToFix": 5
  },
  {
    "patternId": "vue_component-definition-name-casing",
    "title": "Vue: Component definition name casing",
    "description": "Enforce specific casing for component definition name",
    "timeToFix": 5
  },
  {
    "patternId": "vue_component-name-in-template-casing",
    "title": "Vue: Component name in template casing",
    "description": "Enforce specific casing for the component naming style in template",
    "timeToFix": 5
  },
  {
    "patternId": "vue_component-tags-order",
    "title": "Vue: Component tags order",
    "description": "Enforce order of component top-level elements",
    "timeToFix": 5
  },
  {
    "patternId": "vue_dot-location",
    "title": "Vue: Dot location",
    "description": "Enforce consistent newlines before and after dots",
    "timeToFix": 5
  },
  {
    "patternId": "vue_eqeqeq",
    "title": "Vue: Eqeqeq",
    "description": "Require the use of `===` and `!==`",
    "timeToFix": 5
  },
  {
    "patternId": "vue_html-closing-bracket-newline",
    "title": "Vue: Html closing bracket newline",
    "description": "Require or disallow a line break before tag's closing brackets",
    "timeToFix": 5
  },
  {
    "patternId": "vue_html-closing-bracket-spacing",
    "title": "Vue: Html closing bracket spacing",
    "description": "Require or disallow a space before tag's closing brackets",
    "timeToFix": 5
  },
  {
    "patternId": "vue_html-end-tags",
    "title": "Vue: Html end tags",
    "description": "Enforce end tag style",
    "timeToFix": 5
  },
  {
    "patternId": "vue_html-indent",
    "title": "Vue: Html indent",
    "description": "Enforce consistent indentation in `<template>`",
    "timeToFix": 5
  },
  {
    "patternId": "vue_html-quotes",
    "title": "Vue: Html quotes",
    "description": "Enforce quotes style of HTML attributes",
    "timeToFix": 5
  },
  {
    "patternId": "vue_html-self-closing",
    "title": "Vue: Html self closing",
    "description": "Enforce self-closing style",
    "timeToFix": 5
  },
  {
    "patternId": "vue_jsx-uses-vars",
    "title": "Vue: Jsx uses vars",
    "description": "Prevent variables used in JSX to be marked as unused",
    "timeToFix": 5
  },
  {
    "patternId": "vue_key-spacing",
    "title": "Vue: Key spacing",
    "description": "Enforce consistent spacing between keys and values in object literal properties",
    "timeToFix": 5
  },
  {
    "patternId": "vue_keyword-spacing",
    "title": "Vue: Keyword spacing",
    "description": "Enforce consistent spacing before and after keywords",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ]
  },
  {
    "patternId": "vue_match-component-file-name",
    "title": "Vue: Match component file name",
    "description": "Require component name property to match its file name",
    "timeToFix": 5
  },
  {
    "patternId": "vue_max-attributes-per-line",
    "title": "Vue: Max attributes per line",
    "description": "Enforce the maximum number of attributes per line",
    "timeToFix": 5
  },
  {
    "patternId": "vue_max-len",
    "title": "Vue: Max len",
    "description": "Enforce a maximum line length",
    "timeToFix": 5
  },
  {
    "patternId": "vue_multiline-html-element-content-newline",
    "title": "Vue: Multiline html element content newline",
    "description": "Require a line break before and after the contents of a multiline element",
    "timeToFix": 5
  },
  {
    "patternId": "vue_mustache-interpolation-spacing",
    "title": "Vue: Mustache interpolation spacing",
    "description": "Enforce unified spacing in mustache interpolations",
    "timeToFix": 5
  },
  {
    "patternId": "vue_name-property-casing",
    "title": "Vue: Name property casing",
    "description": "Enforce specific casing for the name property in Vue components",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-async-in-computed-properties",
    "title": "Vue: No async in computed properties",
    "description": "Disallow asynchronous actions in computed properties",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-boolean-default",
    "title": "Vue: No boolean default",
    "description": "Disallow boolean defaults",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-confusing-v-for-v-if",
    "title": "Vue: No confusing v for v if",
    "description": "Disallow confusing `v-for` and `v-if` on the same element",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-deprecated-scope-attribute",
    "title": "Vue: No deprecated scope attribute",
    "description": "Disallow deprecated `scope` attribute (in Vue.js 2.5.0+)",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-deprecated-slot-attribute",
    "title": "Vue: No deprecated slot attribute",
    "description": "Disallow deprecated `slot` attribute (in Vue.js 2.6.0+)",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-deprecated-slot-scope-attribute",
    "title": "Vue: No deprecated slot scope attribute",
    "description": "Disallow deprecated `slot-scope` attribute (in Vue.js 2.6.0+)",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-dupe-keys",
    "title": "Vue: No dupe keys",
    "description": "Disallow duplication of field names",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-duplicate-attributes",
    "title": "Vue: No duplicate attributes",
    "description": "Disallow duplication of attributes",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-empty-pattern",
    "title": "Vue: No empty pattern",
    "description": "Disallow empty destructuring patterns",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-irregular-whitespace",
    "title": "Vue: No irregular whitespace",
    "description": "Disallow irregular whitespace",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "skipComments",
        "description": "skipComments"
      },
      {
        "name": "skipStrings",
        "description": "skipStrings"
      },
      {
        "name": "skipTemplates",
        "description": "skipTemplates"
      },
      {
        "name": "skipRegExps",
        "description": "skipRegExps"
      },
      {
        "name": "skipHTMLAttributeValues",
        "description": "skipHTMLAttributeValues"
      },
      {
        "name": "skipHTMLTextContents",
        "description": "skipHTMLTextContents"
      }
    ]
  },
  {
    "patternId": "vue_no-multi-spaces",
    "title": "Vue: No multi spaces",
    "description": "Disallow multiple spaces",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-parsing-error",
    "title": "Vue: No parsing error",
    "description": "Disallow parsing errors in `<template>`",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-reserved-component-names",
    "title": "Vue: No reserved component names",
    "description": "Disallow the use of reserved names in component definitions",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-reserved-keys",
    "title": "Vue: No reserved keys",
    "description": "Disallow overwriting reserved keys",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-restricted-syntax",
    "title": "Vue: No restricted syntax",
    "description": "Disallow specified syntax",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-shared-component-data",
    "title": "Vue: No shared component data",
    "description": "Enforce component's data property to be a function",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-side-effects-in-computed-properties",
    "title": "Vue: No side effects in computed properties",
    "description": "Disallow side effects in computed properties",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-spaces-around-equal-signs-in-attribute",
    "title": "Vue: No spaces around equal signs in attribute",
    "description": "Disallow spaces around equal signs in attribute",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-static-inline-styles",
    "title": "Vue: No static inline styles",
    "description": "Disallow static inline `style` attributes",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-template-key",
    "title": "Vue: No template key",
    "description": "Disallow `key` attribute on `<template>`",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-template-shadow",
    "title": "Vue: No template shadow",
    "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-textarea-mustache",
    "title": "Vue: No textarea mustache",
    "description": "Disallow mustaches in `<textarea>`",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-unsupported-features",
    "title": "Vue: No unsupported features",
    "description": "Disallow unsupported Vue.js syntax on the specified version",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-unused-components",
    "title": "Vue: No unused components",
    "description": "Disallow registering components that are not used inside templates",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-unused-vars",
    "title": "Vue: No unused vars",
    "description": "Disallow unused variable definitions of v-for directives or scope attributes",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-use-v-if-with-v-for",
    "title": "Vue: No use v if with v for",
    "description": "Disallow use v-if on the same element as v-for",
    "timeToFix": 5
  },
  {
    "patternId": "vue_no-v-html",
    "title": "Vue: No v html",
    "description": "Disallow use of v-html to prevent XSS attack",
    "timeToFix": 5
  },
  {
    "patternId": "vue_object-curly-spacing",
    "title": "Vue: Object curly spacing",
    "description": "Enforce consistent spacing inside braces",
    "timeToFix": 5
  },
  {
    "patternId": "vue_order-in-components",
    "title": "Vue: Order in components",
    "description": "Enforce order of properties in components",
    "timeToFix": 5
  },
  {
    "patternId": "vue_padding-line-between-blocks",
    "title": "Vue: Padding line between blocks",
    "description": "Require or disallow padding lines between blocks",
    "timeToFix": 5
  },
  {
    "patternId": "vue_prop-name-casing",
    "title": "Vue: Prop name casing",
    "description": "Enforce specific casing for the Prop name in Vue components",
    "timeToFix": 5
  },
  {
    "patternId": "vue_require-component-is",
    "title": "Vue: Require component is",
    "description": "Require `v-bind:is` of `<component>` elements",
    "timeToFix": 5
  },
  {
    "patternId": "vue_require-default-prop",
    "title": "Vue: Require default prop",
    "description": "Require default value for props",
    "timeToFix": 5
  },
  {
    "patternId": "vue_require-direct-export",
    "title": "Vue: Require direct export",
    "description": "Require the component to be directly exported",
    "timeToFix": 5
  },
  {
    "patternId": "vue_require-name-property",
    "title": "Vue: Require name property",
    "description": "Require a name property in Vue components",
    "timeToFix": 5
  },
  {
    "patternId": "vue_require-prop-type-constructor",
    "title": "Vue: Require prop type constructor",
    "description": "Require prop type to be a constructor",
    "timeToFix": 5
  },
  {
    "patternId": "vue_require-prop-types",
    "title": "Vue: Require prop types",
    "description": "Require type definitions in props",
    "timeToFix": 5
  },
  {
    "patternId": "vue_require-render-return",
    "title": "Vue: Require render return",
    "description": "Enforce render function to always return value",
    "timeToFix": 5
  },
  {
    "patternId": "vue_require-v-for-key",
    "title": "Vue: Require v for key",
    "description": "Require `v-bind:key` with `v-for` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_require-valid-default-prop",
    "title": "Vue: Require valid default prop",
    "description": "Enforce props default values to be valid",
    "timeToFix": 5
  },
  {
    "patternId": "vue_return-in-computed-property",
    "title": "Vue: Return in computed property",
    "description": "Enforce that a return statement is present in computed property",
    "timeToFix": 5
  },
  {
    "patternId": "vue_script-indent",
    "title": "Vue: Script indent",
    "description": "Enforce consistent indentation in `<script>`",
    "timeToFix": 5
  },
  {
    "patternId": "vue_singleline-html-element-content-newline",
    "title": "Vue: Singleline html element content newline",
    "description": "Require a line break before and after the contents of a singleline element",
    "timeToFix": 5
  },
  {
    "patternId": "vue_sort-keys",
    "title": "Vue: Sort keys",
    "description": "Enforce sort-keys in a manner that is compatible with order-in-components",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "minKeys",
        "description": "minKeys"
      },
      {
        "name": "natural",
        "description": "natural"
      },
      {
        "name": "runOutsideVue",
        "description": "runOutsideVue"
      }
    ]
  },
  {
    "patternId": "vue_space-infix-ops",
    "title": "Vue: Space infix ops",
    "description": "Require spacing around infix operators",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "int32Hint",
        "description": "int32Hint"
      }
    ]
  },
  {
    "patternId": "vue_space-unary-ops",
    "title": "Vue: Space unary ops",
    "description": "Enforce consistent spacing before or after unary operators",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "words",
        "description": "words"
      },
      {
        "name": "nonwords",
        "description": "nonwords"
      }
    ]
  },
  {
    "patternId": "vue_static-class-names-order",
    "title": "Vue: Static class names order",
    "description": "Enforce static class names order",
    "timeToFix": 5
  },
  {
    "patternId": "vue_this-in-template",
    "title": "Vue: This in template",
    "description": "Disallow usage of `this` in template",
    "timeToFix": 5
  },
  {
    "patternId": "vue_use-v-on-exact",
    "title": "Vue: Use v on exact",
    "description": "Enforce usage of `exact` modifier on `v-on`",
    "timeToFix": 5
  },
  {
    "patternId": "vue_v-bind-style",
    "title": "Vue: V bind style",
    "description": "Enforce `v-bind` directive style",
    "timeToFix": 5
  },
  {
    "patternId": "vue_v-on-function-call",
    "title": "Vue: V on function call",
    "description": "Enforce or forbid parentheses after method calls without arguments in `v-on` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_v-on-style",
    "title": "Vue: V on style",
    "description": "Enforce `v-on` directive style",
    "timeToFix": 5
  },
  {
    "patternId": "vue_v-slot-style",
    "title": "Vue: V slot style",
    "description": "Enforce `v-slot` directive style",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-template-root",
    "title": "Vue: Valid template root",
    "description": "Enforce valid template root",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-bind-sync",
    "title": "Vue: Valid v bind sync",
    "description": "Enforce valid `.sync` modifier on `v-bind` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-bind",
    "title": "Vue: Valid v bind",
    "description": "Enforce valid `v-bind` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-cloak",
    "title": "Vue: Valid v cloak",
    "description": "Enforce valid `v-cloak` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-else-if",
    "title": "Vue: Valid v else if",
    "description": "Enforce valid `v-else-if` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-else",
    "title": "Vue: Valid v else",
    "description": "Enforce valid `v-else` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-for",
    "title": "Vue: Valid v for",
    "description": "Enforce valid `v-for` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-html",
    "title": "Vue: Valid v html",
    "description": "Enforce valid `v-html` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-if",
    "title": "Vue: Valid v if",
    "description": "Enforce valid `v-if` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-model",
    "title": "Vue: Valid v model",
    "description": "Enforce valid `v-model` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-on",
    "title": "Vue: Valid v on",
    "description": "Enforce valid `v-on` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-once",
    "title": "Vue: Valid v once",
    "description": "Enforce valid `v-once` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-pre",
    "title": "Vue: Valid v pre",
    "description": "Enforce valid `v-pre` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-show",
    "title": "Vue: Valid v show",
    "description": "Enforce valid `v-show` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-slot",
    "title": "Vue: Valid v slot",
    "description": "Enforce valid `v-slot` directives",
    "timeToFix": 5
  },
  {
    "patternId": "vue_valid-v-text",
    "title": "Vue: Valid v text",
    "description": "Enforce valid `v-text` directives",
    "timeToFix": 5
  },
  {
    "patternId": "xss_no-location-href-assign",
    "title": "Xss: No location href assign",
    "description": "Disallow location.href assignment (prevent possible XSS)",
    "timeToFix": 5
  },
  {
    "patternId": "xss_no-mixed-html",
    "title": "Xss: No mixed html",
    "timeToFix": 5
  },
  {
    "patternId": "JSON format",
    "title": "JSON format"
  },
  {
    "patternId": "JSON sorting",
    "title": "JSON sorting"
  }
]
