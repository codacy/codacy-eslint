[
  {
    "parameters": [
      {
        "name": "getWithoutSet",
        "description": "getWithoutSet"
      },
      {
        "name": "setWithoutGet",
        "description": "setWithoutGet"
      },
      {
        "name": "enforceForClassMembers",
        "description": "enforceForClassMembers"
      }
    ],
    "patternId": "accessor-pairs",
    "title": "Accessor pairs",
    "description": "Enforce getter and setter pairs in objects and classes",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowImplicit",
        "description": "allowImplicit"
      },
      {
        "name": "checkForEach",
        "description": "checkForEach"
      },
      {
        "name": "allowVoid",
        "description": "allowVoid"
      }
    ],
    "patternId": "array-callback-return",
    "title": "Array callback return",
    "description": "Enforce `return` statements in callbacks of array methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "arrow-body-style",
    "title": "Arrow body style",
    "description": "Require braces around arrow function bodies",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "block-scoped-var",
    "title": "Block scoped var",
    "description": "Enforce the use of variables within the scope they are defined",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      },
      {
        "name": "ignoreImports",
        "description": "ignoreImports"
      },
      {
        "name": "ignoreGlobals",
        "description": "ignoreGlobals"
      }
    ],
    "patternId": "camelcase",
    "title": "Camelcase",
    "description": "Enforce camelcase naming convention",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "capitalized-comments",
    "title": "Capitalized comments",
    "description": "Enforce or disallow capitalization of the first letter of a comment",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForClassFields",
        "description": "enforceForClassFields"
      }
    ],
    "patternId": "class-methods-use-this",
    "title": "Class methods use this",
    "description": "Enforce that class methods utilize `this`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "complexity",
    "title": "Complexity",
    "description": "Enforce a maximum cyclomatic complexity allowed in a program",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "treatUndefinedAsUnspecified",
        "description": "treatUndefinedAsUnspecified"
      }
    ],
    "patternId": "consistent-return",
    "title": "Consistent return",
    "description": "Require `return` statements to either always or never specify values",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "consistent-this",
    "title": "Consistent this",
    "description": "Enforce consistent naming when capturing the current execution context",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "constructor-super",
    "title": "Constructor super",
    "description": "Require `super()` calls in constructors",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "curly",
    "title": "Curly",
    "description": "Enforce consistent brace style for all control statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "default-case",
    "title": "Default case",
    "description": "Require `default` cases in `switch` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "default-case-last",
    "title": "Default case last",
    "description": "Enforce default clauses in switch statements to be last",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "default-param-last",
    "title": "Default param last",
    "description": "Enforce default parameters to be last",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowKeywords",
        "description": "allowKeywords"
      },
      {
        "name": "allowPattern",
        "description": "allowPattern"
      }
    ],
    "patternId": "dot-notation",
    "title": "Dot notation",
    "description": "Enforce dot notation whenever possible",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "eqeqeq",
    "title": "Eqeqeq",
    "description": "Require the use of `===` and `!==`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "for-direction",
    "title": "For direction",
    "description": "Enforce \"for\" loop update clause moving the counter in the right direction",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "func-name-matching",
    "title": "Func name matching",
    "description": "Require function names to match the name of the variable or property to which they are assigned",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "func-names",
    "title": "Func names",
    "description": "Require or disallow named `function` expressions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "allowArrowFunctions",
        "description": "allowArrowFunctions"
      }
    ],
    "patternId": "func-style",
    "title": "Func style",
    "description": "Enforce the consistent use of either `function` declarations or expressions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowImplicit",
        "description": "allowImplicit"
      }
    ],
    "patternId": "getter-return",
    "title": "Getter return",
    "description": "Enforce `return` statements in getters",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "grouped-accessor-pairs",
    "title": "Grouped accessor pairs",
    "description": "Require grouped accessor pairs in object literals and classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "guard-for-in",
    "title": "Guard for in",
    "description": "Require `for-in` loops to include an `if` statement",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "id-denylist",
    "title": "Id denylist",
    "description": "Disallow specified identifiers",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "min",
        "description": "min"
      }
    ],
    "patternId": "id-length",
    "title": "Id length",
    "description": "Enforce minimum and maximum identifier lengths",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "properties",
        "description": "properties"
      },
      {
        "name": "classFields",
        "description": "classFields"
      },
      {
        "name": "onlyDeclarations",
        "description": "onlyDeclarations"
      },
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      }
    ],
    "patternId": "id-match",
    "title": "Id match",
    "description": "Require identifiers to match a specified regular expression",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "init-declarations",
    "title": "Init declarations",
    "description": "Require or disallow initialization in variable declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "line-comment-position",
    "title": "Line comment position",
    "description": "Enforce position of line comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "logical-assignment-operators",
    "title": "Logical assignment operators",
    "description": "Require or disallow logical assignment operator shorthand",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-classes-per-file",
    "title": "Max classes per file",
    "description": "Enforce a maximum number of classes per file",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-depth",
    "title": "Max depth",
    "description": "Enforce a maximum depth that blocks can be nested",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-lines",
    "title": "Max lines",
    "description": "Enforce a maximum number of lines per file",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-lines-per-function",
    "title": "Max lines per function",
    "description": "Enforce a maximum number of lines of code in a function",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "max-nested-callbacks",
    "title": "Max nested callbacks",
    "description": "Enforce a maximum depth that callbacks can be nested",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-params",
    "title": "Max params",
    "description": "Enforce a maximum number of parameters in function definitions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "max-statements",
    "title": "Max statements",
    "description": "Enforce a maximum number of statements allowed in function blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "multiline-comment-style",
    "title": "Multiline comment style",
    "description": "Enforce a particular style for multiline comments",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "newIsCap",
        "description": "newIsCap"
      },
      {
        "name": "capIsNew",
        "description": "capIsNew"
      },
      {
        "name": "properties",
        "description": "properties"
      }
    ],
    "patternId": "new-cap",
    "title": "New cap",
    "description": "Require constructor names to begin with a capital letter",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-alert",
    "title": "No alert",
    "description": "Disallow the use of `alert`, `confirm`, and `prompt`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-array-constructor",
    "title": "No array constructor",
    "description": "Disallow `Array` constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-async-promise-executor",
    "title": "No async promise executor",
    "description": "Disallow using an async function as a Promise executor",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-await-in-loop",
    "title": "No await in loop",
    "description": "Disallow `await` inside of loops",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "int32Hint",
        "description": "int32Hint"
      }
    ],
    "patternId": "no-bitwise",
    "title": "No bitwise",
    "description": "Disallow bitwise operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-caller",
    "title": "No caller",
    "description": "Disallow the use of `arguments.caller` or `arguments.callee`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-case-declarations",
    "title": "No case declarations",
    "description": "Disallow lexical declarations in case clauses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-class-assign",
    "title": "No class assign",
    "description": "Disallow reassigning class members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-compare-neg-zero",
    "title": "No compare neg zero",
    "description": "Disallow comparing against -0",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "no-cond-assign",
    "title": "No cond assign",
    "description": "Disallow assignment operators in conditional expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-console",
    "title": "No console",
    "description": "Disallow the use of `console`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-const-assign",
    "title": "No const assign",
    "description": "Disallow reassigning `const` variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-constant-binary-expression",
    "title": "No constant binary expression",
    "description": "Disallow expressions where the operation doesn't affect the value",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkLoops",
        "description": "checkLoops"
      }
    ],
    "patternId": "no-constant-condition",
    "title": "No constant condition",
    "description": "Disallow constant expressions in conditions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-constructor-return",
    "title": "No constructor return",
    "description": "Disallow returning value from constructor",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-continue",
    "title": "No continue",
    "description": "Disallow `continue` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-control-regex",
    "title": "No control regex",
    "description": "Disallow control characters in regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-debugger",
    "title": "No debugger",
    "description": "Disallow the use of `debugger`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-delete-var",
    "title": "No delete var",
    "description": "Disallow deleting variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-div-regex",
    "title": "No div regex",
    "description": "Disallow equal signs explicitly at the beginning of regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-dupe-args",
    "title": "No dupe args",
    "description": "Disallow duplicate arguments in `function` definitions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-dupe-class-members",
    "title": "No dupe class members",
    "description": "Disallow duplicate class members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-dupe-else-if",
    "title": "No dupe else if",
    "description": "Disallow duplicate conditions in if-else-if chains",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-dupe-keys",
    "title": "No dupe keys",
    "description": "Disallow duplicate keys in object literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-duplicate-case",
    "title": "No duplicate case",
    "description": "Disallow duplicate case labels",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "includeExports",
        "description": "includeExports"
      }
    ],
    "patternId": "no-duplicate-imports",
    "title": "No duplicate imports",
    "description": "Disallow duplicate module imports",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowElseIf",
        "description": "allowElseIf"
      }
    ],
    "patternId": "no-else-return",
    "title": "No else return",
    "description": "Disallow `else` blocks after `return` statements in `if` statements",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowEmptyCatch",
        "description": "allowEmptyCatch"
      }
    ],
    "patternId": "no-empty",
    "title": "No empty",
    "description": "Disallow empty block statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-empty-character-class",
    "title": "No empty character class",
    "description": "Disallow empty character classes in regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-empty-function",
    "title": "No empty function",
    "description": "Disallow empty functions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowObjectPatternsAsParameters",
        "description": "allowObjectPatternsAsParameters"
      }
    ],
    "patternId": "no-empty-pattern",
    "title": "No empty pattern",
    "description": "Disallow empty destructuring patterns",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-empty-static-block",
    "title": "No empty static block",
    "description": "Disallow empty static blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-eq-null",
    "title": "No eq null",
    "description": "Disallow `null` comparisons without type-checking operators",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowIndirect",
        "description": "allowIndirect"
      }
    ],
    "patternId": "no-eval",
    "title": "No eval",
    "description": "Disallow the use of `eval()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-ex-assign",
    "title": "No ex assign",
    "description": "Disallow reassigning exceptions in `catch` clauses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-extend-native",
    "title": "No extend native",
    "description": "Disallow extending native types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-extra-bind",
    "title": "No extra bind",
    "description": "Disallow unnecessary calls to `.bind()`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForLogicalOperands",
        "description": "enforceForLogicalOperands"
      }
    ],
    "patternId": "no-extra-boolean-cast",
    "title": "No extra boolean cast",
    "description": "Disallow unnecessary boolean casts",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-extra-label",
    "title": "No extra label",
    "description": "Disallow unnecessary labels",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "commentPattern",
        "description": "commentPattern"
      },
      {
        "name": "allowEmptyCase",
        "description": "allowEmptyCase"
      }
    ],
    "patternId": "no-fallthrough",
    "title": "No fallthrough",
    "description": "Disallow fallthrough of `case` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-func-assign",
    "title": "No func assign",
    "description": "Disallow reassigning `function` declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-global-assign",
    "title": "No global assign",
    "description": "Disallow assignments to native objects or read-only global variables",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "boolean",
        "description": "boolean"
      },
      {
        "name": "number",
        "description": "number"
      },
      {
        "name": "string",
        "description": "string"
      },
      {
        "name": "disallowTemplateShorthand",
        "description": "disallowTemplateShorthand"
      }
    ],
    "patternId": "no-implicit-coercion",
    "title": "No implicit coercion",
    "description": "Disallow shorthand type conversions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "lexicalBindings",
        "description": "lexicalBindings"
      }
    ],
    "patternId": "no-implicit-globals",
    "title": "No implicit globals",
    "description": "Disallow declarations in the global scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-implied-eval",
    "title": "No implied eval",
    "description": "Disallow the use of `eval()`-like methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-import-assign",
    "title": "No import assign",
    "description": "Disallow assigning to imported bindings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-inline-comments",
    "title": "No inline comments",
    "description": "Disallow inline comments after code",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "no-inner-declarations",
    "title": "No inner declarations",
    "description": "Disallow variable or `function` declarations in nested blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-invalid-regexp",
    "title": "No invalid regexp",
    "description": "Disallow invalid regular expression strings in `RegExp` constructors",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "capIsConstructor",
        "description": "capIsConstructor"
      }
    ],
    "patternId": "no-invalid-this",
    "title": "No invalid this",
    "description": "Disallow use of `this` in contexts where the value of `this` is `undefined`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "skipComments",
        "description": "skipComments"
      },
      {
        "name": "skipStrings",
        "description": "skipStrings"
      },
      {
        "name": "skipTemplates",
        "description": "skipTemplates"
      },
      {
        "name": "skipRegExps",
        "description": "skipRegExps"
      },
      {
        "name": "skipJSXText",
        "description": "skipJSXText"
      }
    ],
    "patternId": "no-irregular-whitespace",
    "title": "No irregular whitespace",
    "description": "Disallow irregular whitespace",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-iterator",
    "title": "No iterator",
    "description": "Disallow the use of the `__iterator__` property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-label-var",
    "title": "No label var",
    "description": "Disallow labels that share a name with a variable",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowLoop",
        "description": "allowLoop"
      },
      {
        "name": "allowSwitch",
        "description": "allowSwitch"
      }
    ],
    "patternId": "no-labels",
    "title": "No labels",
    "description": "Disallow labeled statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-lone-blocks",
    "title": "No lone blocks",
    "description": "Disallow unnecessary nested blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-lonely-if",
    "title": "No lonely if",
    "description": "Disallow `if` statements as the only statement in `else` blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-loop-func",
    "title": "No loop func",
    "description": "Disallow function declarations that contain unsafe references inside loop statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-loss-of-precision",
    "title": "No loss of precision",
    "description": "Disallow literal numbers that lose precision",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "detectObjects",
        "description": "detectObjects"
      },
      {
        "name": "enforceConst",
        "description": "enforceConst"
      },
      {
        "name": "ignoreArrayIndexes",
        "description": "ignoreArrayIndexes"
      },
      {
        "name": "ignoreDefaultValues",
        "description": "ignoreDefaultValues"
      },
      {
        "name": "ignoreClassFieldInitialValues",
        "description": "ignoreClassFieldInitialValues"
      }
    ],
    "patternId": "no-magic-numbers",
    "title": "No magic numbers",
    "description": "Disallow magic numbers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-misleading-character-class",
    "title": "No misleading character class",
    "description": "Disallow characters which are made with multiple code points in character class syntax",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreNonDeclaration",
        "description": "ignoreNonDeclaration"
      }
    ],
    "patternId": "no-multi-assign",
    "title": "No multi assign",
    "description": "Disallow use of chained assignment expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-multi-str",
    "title": "No multi str",
    "description": "Disallow multiline strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-negated-condition",
    "title": "No negated condition",
    "description": "Disallow negated conditions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-nested-ternary",
    "title": "No nested ternary",
    "description": "Disallow nested ternary expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new",
    "title": "No new",
    "description": "Disallow `new` operators outside of assignments or comparisons",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new-func",
    "title": "No new func",
    "description": "Disallow `new` operators with the `Function` object",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new-native-nonconstructor",
    "title": "No new native nonconstructor",
    "description": "Disallow `new` operators with global non-constructor functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new-symbol",
    "title": "No new symbol",
    "description": "Disallow `new` operators with the `Symbol` object",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-new-wrappers",
    "title": "No new wrappers",
    "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-nonoctal-decimal-escape",
    "title": "No nonoctal decimal escape",
    "description": "Disallow `\\8` and `\\9` escape sequences in string literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-obj-calls",
    "title": "No obj calls",
    "description": "Disallow calling global object properties as functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-object-constructor",
    "title": "No object constructor",
    "description": "Disallow calls to the `Object` constructor without an argument",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-octal",
    "title": "No octal",
    "description": "Disallow octal literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-octal-escape",
    "title": "No octal escape",
    "description": "Disallow octal escape sequences in string literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-param-reassign",
    "title": "No param reassign",
    "description": "Disallow reassigning `function` parameters",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowForLoopAfterthoughts",
        "description": "allowForLoopAfterthoughts"
      }
    ],
    "patternId": "no-plusplus",
    "title": "No plusplus",
    "description": "Disallow the unary operators `++` and `--`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowVoid",
        "description": "allowVoid"
      }
    ],
    "patternId": "no-promise-executor-return",
    "title": "No promise executor return",
    "description": "Disallow returning values from Promise executor functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-proto",
    "title": "No proto",
    "description": "Disallow the use of the `__proto__` property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-prototype-builtins",
    "title": "No prototype builtins",
    "description": "Disallow calling some `Object.prototype` methods directly on objects",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "builtinGlobals",
        "description": "builtinGlobals"
      }
    ],
    "patternId": "no-redeclare",
    "title": "No redeclare",
    "description": "Disallow variable redeclaration",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-regex-spaces",
    "title": "No regex spaces",
    "description": "Disallow multiple spaces in regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-restricted-exports",
    "title": "No restricted exports",
    "description": "Disallow specified names in exports",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-restricted-globals",
    "title": "No restricted globals",
    "description": "Disallow specified global variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-restricted-imports",
    "title": "No restricted imports",
    "description": "Disallow specified modules when loaded by `import`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-restricted-properties",
    "title": "No restricted properties",
    "description": "Disallow certain properties on certain objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-restricted-syntax",
    "title": "No restricted syntax",
    "description": "Disallow specified syntax",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "no-return-assign",
    "title": "No return assign",
    "description": "Disallow assignment operators in `return` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-script-url",
    "title": "No script url",
    "description": "Disallow `javascript:` urls",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "props",
        "description": "props"
      }
    ],
    "patternId": "no-self-assign",
    "title": "No self assign",
    "description": "Disallow assignments where both sides are exactly the same",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-self-compare",
    "title": "No self compare",
    "description": "Disallow comparisons where both sides are exactly the same",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowInParentheses",
        "description": "allowInParentheses"
      }
    ],
    "patternId": "no-sequences",
    "title": "No sequences",
    "description": "Disallow comma operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-setter-return",
    "title": "No setter return",
    "description": "Disallow returning values from setters",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "builtinGlobals",
        "description": "builtinGlobals"
      },
      {
        "name": "hoist",
        "description": "hoist"
      },
      {
        "name": "ignoreOnInitialization",
        "description": "ignoreOnInitialization"
      }
    ],
    "patternId": "no-shadow",
    "title": "No shadow",
    "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-shadow-restricted-names",
    "title": "No shadow restricted names",
    "description": "Disallow identifiers from shadowing restricted names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-sparse-arrays",
    "title": "No sparse arrays",
    "description": "Disallow sparse arrays",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-template-curly-in-string",
    "title": "No template curly in string",
    "description": "Disallow template literal placeholder syntax in regular strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-ternary",
    "title": "No ternary",
    "description": "Disallow ternary operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-this-before-super",
    "title": "No this before super",
    "description": "Disallow `this`/`super` before calling `super()` in constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-throw-literal",
    "title": "No throw literal",
    "description": "Disallow throwing literals as exceptions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "typeof",
        "description": "typeof"
      }
    ],
    "patternId": "no-undef",
    "title": "No undef",
    "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-undef-init",
    "title": "No undef init",
    "description": "Disallow initializing variables to `undefined`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-undefined",
    "title": "No undefined",
    "description": "Disallow the use of `undefined` as an identifier",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowAfterThis",
        "description": "allowAfterThis"
      },
      {
        "name": "allowAfterSuper",
        "description": "allowAfterSuper"
      },
      {
        "name": "allowAfterThisConstructor",
        "description": "allowAfterThisConstructor"
      },
      {
        "name": "enforceInMethodNames",
        "description": "enforceInMethodNames"
      },
      {
        "name": "allowFunctionParams",
        "description": "allowFunctionParams"
      },
      {
        "name": "enforceInClassFields",
        "description": "enforceInClassFields"
      },
      {
        "name": "allowInArrayDestructuring",
        "description": "allowInArrayDestructuring"
      },
      {
        "name": "allowInObjectDestructuring",
        "description": "allowInObjectDestructuring"
      }
    ],
    "patternId": "no-underscore-dangle",
    "title": "No underscore dangle",
    "description": "Disallow dangling underscores in identifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unexpected-multiline",
    "title": "No unexpected multiline",
    "description": "Disallow confusing multiline expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unmodified-loop-condition",
    "title": "No unmodified loop condition",
    "description": "Disallow unmodified loop conditions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "defaultAssignment",
        "description": "defaultAssignment"
      }
    ],
    "patternId": "no-unneeded-ternary",
    "title": "No unneeded ternary",
    "description": "Disallow ternary operators when simpler alternatives exist",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unreachable",
    "title": "No unreachable",
    "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unreachable-loop",
    "title": "No unreachable loop",
    "description": "Disallow loops with a body that allows only one iteration",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unsafe-finally",
    "title": "No unsafe finally",
    "description": "Disallow control flow statements in `finally` blocks",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForOrderingRelations",
        "description": "enforceForOrderingRelations"
      }
    ],
    "patternId": "no-unsafe-negation",
    "title": "No unsafe negation",
    "description": "Disallow negating the left operand of relational operators",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "disallowArithmeticOperators",
        "description": "disallowArithmeticOperators"
      }
    ],
    "patternId": "no-unsafe-optional-chaining",
    "title": "No unsafe optional chaining",
    "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "allowShortCircuit"
      },
      {
        "name": "allowTernary",
        "description": "allowTernary"
      },
      {
        "name": "allowTaggedTemplates",
        "description": "allowTaggedTemplates"
      },
      {
        "name": "enforceForJSX",
        "description": "enforceForJSX"
      }
    ],
    "patternId": "no-unused-expressions",
    "title": "No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unused-labels",
    "title": "No unused labels",
    "description": "Disallow unused labels",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unused-private-class-members",
    "title": "No unused private class members",
    "description": "Disallow unused private class members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unused-vars",
    "title": "No unused vars",
    "description": "Disallow unused variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-use-before-define",
    "title": "No use before define",
    "description": "Disallow the use of variables before they are defined",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-backreference",
    "title": "No useless backreference",
    "description": "Disallow useless backreferences in regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-call",
    "title": "No useless call",
    "description": "Disallow unnecessary calls to `.call()` and `.apply()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-catch",
    "title": "No useless catch",
    "description": "Disallow unnecessary `catch` clauses",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForClassMembers",
        "description": "enforceForClassMembers"
      }
    ],
    "patternId": "no-useless-computed-key",
    "title": "No useless computed key",
    "description": "Disallow unnecessary computed property keys in objects and classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-concat",
    "title": "No useless concat",
    "description": "Disallow unnecessary concatenation of literals or template literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-constructor",
    "title": "No useless constructor",
    "description": "Disallow unnecessary constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-escape",
    "title": "No useless escape",
    "description": "Disallow unnecessary escape characters",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      },
      {
        "name": "ignoreImport",
        "description": "ignoreImport"
      },
      {
        "name": "ignoreExport",
        "description": "ignoreExport"
      }
    ],
    "patternId": "no-useless-rename",
    "title": "No useless rename",
    "description": "Disallow renaming import, export, and destructured assignments to the same name",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-useless-return",
    "title": "No useless return",
    "description": "Disallow redundant return statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-var",
    "title": "No var",
    "description": "Require `let` or `const` instead of `var`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowAsStatement",
        "description": "allowAsStatement"
      }
    ],
    "patternId": "no-void",
    "title": "No void",
    "description": "Disallow `void` operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-warning-comments",
    "title": "No warning comments",
    "description": "Disallow specified warning terms in comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-with",
    "title": "No with",
    "description": "Disallow `with` statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "object-shorthand",
    "title": "Object shorthand",
    "description": "Require or disallow method and property shorthand syntax for object literals",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "one-var",
    "title": "One var",
    "description": "Enforce variables to be declared either together or separately in functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "operator-assignment",
    "title": "Operator assignment",
    "description": "Require or disallow assignment operator shorthand where possible",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowNamedFunctions",
        "description": "allowNamedFunctions"
      },
      {
        "name": "allowUnboundThis",
        "description": "allowUnboundThis"
      }
    ],
    "patternId": "prefer-arrow-callback",
    "title": "Prefer arrow callback",
    "description": "Require using arrow functions for callbacks",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "destructuring",
        "description": "destructuring"
      },
      {
        "name": "ignoreReadBeforeAssign",
        "description": "ignoreReadBeforeAssign"
      }
    ],
    "patternId": "prefer-const",
    "title": "Prefer const",
    "description": "Require `const` declarations for variables that are never reassigned after declared",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-destructuring",
    "title": "Prefer destructuring",
    "description": "Require destructuring from arrays and/or objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-exponentiation-operator",
    "title": "Prefer exponentiation operator",
    "description": "Disallow the use of `Math.pow` in favor of the `**` operator",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-named-capture-group",
    "title": "Prefer named capture group",
    "description": "Enforce using named capture group in regular expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-numeric-literals",
    "title": "Prefer numeric literals",
    "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-object-has-own",
    "title": "Prefer object has own",
    "description": "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-object-spread",
    "title": "Prefer object spread",
    "description": "Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowEmptyReject",
        "description": "allowEmptyReject"
      }
    ],
    "patternId": "prefer-promise-reject-errors",
    "title": "Prefer promise reject errors",
    "description": "Require using Error objects as Promise rejection reasons",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "disallowRedundantWrapping",
        "description": "disallowRedundantWrapping"
      }
    ],
    "patternId": "prefer-regex-literals",
    "title": "Prefer regex literals",
    "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-rest-params",
    "title": "Prefer rest params",
    "description": "Require rest parameters instead of `arguments`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-spread",
    "title": "Prefer spread",
    "description": "Require spread operators instead of `.apply()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-template",
    "title": "Prefer template",
    "description": "Require template literals instead of string concatenation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "radix",
    "title": "Radix",
    "description": "Enforce the consistent use of the radix argument when using `parseInt()`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowProperties",
        "description": "allowProperties"
      }
    ],
    "patternId": "require-atomic-updates",
    "title": "Require atomic updates",
    "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "require-await",
    "title": "Require await",
    "description": "Disallow async functions which have no `await` expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "require-unicode-regexp",
    "title": "Require unicode regexp",
    "description": "Enforce the use of `u` or `v` flag on RegExp",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "require-yield",
    "title": "Require yield",
    "description": "Require generator functions to contain `yield`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreCase",
        "description": "ignoreCase"
      },
      {
        "name": "ignoreDeclarationSort",
        "description": "ignoreDeclarationSort"
      },
      {
        "name": "ignoreMemberSort",
        "description": "ignoreMemberSort"
      },
      {
        "name": "allowSeparatedGroups",
        "description": "allowSeparatedGroups"
      }
    ],
    "patternId": "sort-imports",
    "title": "Sort imports",
    "description": "Enforce sorted import declarations within modules",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      },
      {
        "name": "minKeys",
        "description": "minKeys"
      },
      {
        "name": "allowLineSeparatedGroups",
        "description": "allowLineSeparatedGroups"
      }
    ],
    "patternId": "sort-keys",
    "title": "Sort keys",
    "description": "Require object keys to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreCase",
        "description": "ignoreCase"
      }
    ],
    "patternId": "sort-vars",
    "title": "Sort vars",
    "description": "Require variables within the same declaration block to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "strict",
    "title": "Strict",
    "description": "Require or disallow strict mode directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "symbol-description",
    "title": "Symbol description",
    "description": "Require symbol descriptions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicode-bom",
    "title": "Unicode bom",
    "description": "Require or disallow Unicode byte order mark (BOM)",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForSwitchCase",
        "description": "enforceForSwitchCase"
      },
      {
        "name": "enforceForIndexOf",
        "description": "enforceForIndexOf"
      }
    ],
    "patternId": "use-isnan",
    "title": "Use isnan",
    "description": "Require calls to `isNaN()` when checking for `NaN`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "requireStringLiterals",
        "description": "requireStringLiterals"
      }
    ],
    "patternId": "valid-typeof",
    "title": "Valid typeof",
    "description": "Enforce comparing `typeof` expressions against valid strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vars-on-top",
    "title": "Vars on top",
    "description": "Require `var` declarations be placed at the top of their containing scope",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "exceptRange",
        "description": "exceptRange"
      },
      {
        "name": "onlyEquality",
        "description": "onlyEquality"
      }
    ],
    "patternId": "yoda",
    "title": "Yoda",
    "description": "Require or disallow \"Yoda\" conditions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_component-class-suffix",
    "title": "@angular eslint: Component class suffix",
    "description": "Classes decorated with @Component must have suffix \"Component\" (or custom) in their name. See more at https://angular.io/styleguide#style-02-03",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_component-max-inline-declarations",
    "title": "@angular eslint: Component max inline declarations",
    "description": "Enforces a maximum number of lines in inline template, styles and animations. See more at https://angular.io/guide/styleguide#style-05-04",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_component-selector",
    "title": "@angular eslint: Component selector",
    "description": "Component selectors should follow given naming rules. See more at https://angular.io/guide/styleguide#style-02-07, https://angular.io/guide/styleguide#style-05-02\n      and https://angular.io/guide/styleguide#style-05-03.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_consistent-component-styles",
    "title": "@angular eslint: Consistent component styles",
    "description": "Ensures consistent usage of `styles`/`styleUrls`/`styleUrl` within Component metadata",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_contextual-decorator",
    "title": "@angular eslint: Contextual decorator",
    "description": "Ensures that classes use contextual decorators in its body",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_contextual-lifecycle",
    "title": "@angular eslint: Contextual lifecycle",
    "description": "Ensures that lifecycle methods are used in a correct context",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_directive-class-suffix",
    "title": "@angular eslint: Directive class suffix",
    "description": "Classes decorated with @Directive must have suffix \"Directive\" (or custom) in their name. See more at https://angular.io/styleguide#style-02-03",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_directive-selector",
    "title": "@angular eslint: Directive selector",
    "description": "Directive selectors should follow given naming rules. See more at https://angular.io/guide/styleguide#style-02-06 and https://angular.io/guide/styleguide#style-02-08.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-async-lifecycle-method",
    "title": "@angular eslint: No async lifecycle method",
    "description": "Angular Lifecycle methods should not be async. Angular does not wait for async lifecycle but the code incorrectly suggests it does.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-attribute-decorator",
    "title": "@angular eslint: No attribute decorator",
    "description": "The @Attribute decorator is used to obtain a single value for an attribute. This is a much less common use-case than getting a stream of values (using @Input), so often the @Attribute decorator is mistakenly used when @Input was what was intended. This rule disallows usage of @Attribute decorator altogether in order to prevent these mistakes.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-conflicting-lifecycle",
    "title": "@angular eslint: No conflicting lifecycle",
    "description": "Ensures that directives not implement conflicting lifecycle interfaces.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-empty-lifecycle-method",
    "title": "@angular eslint: No empty lifecycle method",
    "description": "Disallows declaring empty lifecycle methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-forward-ref",
    "title": "@angular eslint: No forward ref",
    "description": "Disallows usage of `forwardRef` references for DI",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowStatic",
        "description": "allowStatic"
      }
    ],
    "patternId": "@angular-eslint_no-host-metadata-property",
    "title": "@angular eslint: No host metadata property",
    "description": "Disallows usage of the `host` metadata property. See more at https://angular.io/styleguide#style-06-03",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-input-prefix",
    "title": "@angular eslint: No input prefix",
    "description": "Ensures that input bindings, including aliases, are not named or prefixed by the configured disallowed prefixes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-input-rename",
    "title": "@angular eslint: No input rename",
    "description": "Ensures that input bindings are not aliased",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-inputs-metadata-property",
    "title": "@angular eslint: No inputs metadata property",
    "description": "Disallows usage of the `inputs` metadata property. See more at https://angular.io/styleguide#style-05-12",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-lifecycle-call",
    "title": "@angular eslint: No lifecycle call",
    "description": "Disallows explicit calls to lifecycle methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-output-native",
    "title": "@angular eslint: No output native",
    "description": "Ensures that output bindings, including aliases, are not named as standard DOM events",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-output-on-prefix",
    "title": "@angular eslint: No output on prefix",
    "description": "Ensures that output bindings, including aliases, are not named \"on\", nor prefixed with it. See more at https://angular.io/guide/styleguide#style-05-16",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-output-rename",
    "title": "@angular eslint: No output rename",
    "description": "Ensures that output bindings are not aliased",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-outputs-metadata-property",
    "title": "@angular eslint: No outputs metadata property",
    "description": "Disallows usage of the `outputs` metadata property. See more at https://angular.io/styleguide#style-05-12",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-pipe-impure",
    "title": "@angular eslint: No pipe impure",
    "description": "Disallows the declaration of impure pipes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_no-queries-metadata-property",
    "title": "@angular eslint: No queries metadata property",
    "description": "Disallows usage of the `queries` metadata property. See more at https://angular.io/styleguide#style-05-12.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_pipe-prefix",
    "title": "@angular eslint: Pipe prefix",
    "description": "Enforce consistent prefix for pipes.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_prefer-on-push-component-change-detection",
    "title": "@angular eslint: Prefer on push component change detection",
    "description": "Ensures component's `changeDetection` is set to `ChangeDetectionStrategy.OnPush`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_prefer-standalone",
    "title": "@angular eslint: Prefer standalone",
    "description": "Ensures component, directive and pipe `standalone` property is set to `true` in the component decorator",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_prefer-output-readonly",
    "title": "@angular eslint: Prefer output readonly",
    "description": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_relative-url-prefix",
    "title": "@angular eslint: Relative url prefix",
    "description": "The ./ and ../ prefix is standard syntax for relative URLs; don't depend on Angular's current ability to do without that prefix. See more at https://angular.io/styleguide#style-05-04",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "requireDescription",
        "description": "requireDescription"
      },
      {
        "name": "requireMeaning",
        "description": "requireMeaning"
      }
    ],
    "patternId": "@angular-eslint_require-localize-metadata",
    "title": "@angular eslint: Require localize metadata",
    "description": "Ensures that $localize tagged messages contain helpful metadata to aid with translations.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_sort-lifecycle-methods",
    "title": "@angular eslint: Sort lifecycle methods",
    "description": "Ensures that lifecycle methods are declared in order of execution",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "locale",
        "description": "locale"
      }
    ],
    "patternId": "@angular-eslint_sort-ngmodule-metadata-arrays",
    "title": "@angular eslint: Sort ngmodule metadata arrays",
    "description": "Ensures ASC alphabetical order for `NgModule` metadata arrays for easy visual scanning",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_use-component-selector",
    "title": "@angular eslint: Use component selector",
    "description": "Component selector must be declared",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_use-component-view-encapsulation",
    "title": "@angular eslint: Use component view encapsulation",
    "description": "Disallows using `ViewEncapsulation.None`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_use-injectable-provided-in",
    "title": "@angular eslint: Use injectable provided in",
    "description": "Using the `providedIn` property makes `Injectables` tree-shakable",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_use-lifecycle-interface",
    "title": "@angular eslint: Use lifecycle interface",
    "description": "Ensures that classes implement lifecycle interfaces corresponding to the declared lifecycle methods. See more at https://angular.io/styleguide#style-09-01",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@angular-eslint_use-pipe-transform-interface",
    "title": "@angular eslint: Use pipe transform interface",
    "description": "Ensures that `Pipes` implement `PipeTransform` interface",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "newIsCap",
        "description": "newIsCap"
      },
      {
        "name": "capIsNew",
        "description": "capIsNew"
      },
      {
        "name": "properties",
        "description": "properties"
      }
    ],
    "patternId": "@babel_new-cap",
    "title": "@babel: New cap",
    "description": "Require constructor names to begin with a capital letter",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "capIsConstructor",
        "description": "capIsConstructor"
      }
    ],
    "patternId": "@babel_no-invalid-this",
    "title": "@babel: No invalid this",
    "description": "Disallow use of `this` in contexts where the value of `this` is `undefined`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "typeof",
        "description": "typeof"
      }
    ],
    "patternId": "@babel_no-undef",
    "title": "@babel: No undef",
    "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "allowShortCircuit"
      },
      {
        "name": "allowTernary",
        "description": "allowTernary"
      },
      {
        "name": "allowTaggedTemplates",
        "description": "allowTaggedTemplates"
      },
      {
        "name": "enforceForJSX",
        "description": "enforceForJSX"
      }
    ],
    "patternId": "@babel_no-unused-expressions",
    "title": "@babel: No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_consistent-component-name",
    "title": "@lwc: [Lwc] Consistent component name",
    "description": "Ensure component class name matches file name",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-api-reassignments",
    "title": "@lwc: [Lwc] No api reassignments",
    "description": "Prevent public property reassignments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-async-await",
    "title": "@lwc: [Lwc] No async await",
    "description": "Disallow usage of the async-await syntax",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-async-operation",
    "title": "@lwc: [Lwc] No async operation",
    "description": "Restrict usage of async operations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-attributes-during-construction",
    "title": "@lwc: [Lwc] No attributes during construction",
    "description": "No attributes during construction",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-deprecated",
    "title": "@lwc: [Lwc] No deprecated",
    "description": "Disallow usage of deprecated LWC APIs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-document-query",
    "title": "@lwc: [Lwc] No document query",
    "description": "Disallow DOM query at the document level.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-for-of",
    "title": "@lwc: [Lwc] No for of",
    "description": "Disallow usage of the for-of syntax",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-inner-html",
    "title": "@lwc: [Lwc] No inner html",
    "description": "Disallow usage of \"innerHtml\"",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-leading-uppercase-api-name",
    "title": "@lwc: [Lwc] No leading uppercase api name",
    "description": "Disallow public property to start with an upper case character",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-leaky-event-listeners",
    "title": "@lwc: [Lwc] No leaky event listeners",
    "description": "Prevent event listeners from leaking memory",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowBareImports",
        "description": "allowBareImports"
      },
      {
        "name": "allowExports",
        "description": "allowExports"
      }
    ],
    "patternId": "@lwc_lwc_no-disallowed-lwc-imports",
    "title": "@lwc: [Lwc] No disallowed lwc imports",
    "description": "Restrict unexpected imports from the lwc package",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-template-children",
    "title": "@lwc: [Lwc] No template children",
    "description": "Prevent accessing the immediate children of this.template",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-rest-parameter",
    "title": "@lwc: [Lwc] No rest parameter",
    "description": "Disallow usage of the rest parameter syntax",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_prefer-custom-event",
    "title": "@lwc: [Lwc] Prefer custom event",
    "description": "Suggest usage of \"CustomEvent\" over \"Event\" constructor",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_valid-api",
    "title": "@lwc: [Lwc] Valid api",
    "description": "Validate api decorator usage",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_valid-track",
    "title": "@lwc: [Lwc] Valid track",
    "description": "Validate track decorator usage",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_valid-wire",
    "title": "@lwc: [Lwc] Valid wire",
    "description": "Validate wire decorator usage",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-restricted-browser-globals-during-ssr",
    "title": "@lwc: [Lwc] No restricted browser globals during ssr",
    "description": "Disallow access to global browser APIs during SSR",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-unsupported-ssr-properties",
    "title": "@lwc: [Lwc] No unsupported ssr properties",
    "description": "Disallow access of unsupported properties in SSR",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@lwc_lwc_no-node-env-in-ssr",
    "title": "@lwc: [Lwc] No node env in ssr",
    "description": "Disallow access of process.env.NODE_ENV in SSR",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_aura_aura-api",
    "title": "@salesforce: [Aura] Aura api",
    "description": "Validate Aura APIs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_aura_ecma-intrinsics",
    "title": "@salesforce: [Aura] Ecma intrinsics",
    "description": "Validate JavaScript intrinsic APIs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_aura_getevt-markup-prefix",
    "title": "@salesforce: [Aura] Getevt markup prefix",
    "description": "Verify the presence of the 'markup://' prefix for events accessed via $A.getEvt()",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_aura_no-deprecated-aura-error",
    "title": "@salesforce: [Aura] No deprecated aura error",
    "description": "Prevent usage of $A.error",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_aura_no-deprecated-component-creation",
    "title": "@salesforce: [Aura] No deprecated component creation",
    "description": "Prevent usage of deprecated component creation methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_aura_no-deprecated-event-creation",
    "title": "@salesforce: [Aura] No deprecated event creation",
    "description": "Prevent usage of deprecated event creation methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_aura_secure-document",
    "title": "@salesforce: [Aura] Secure document",
    "description": "Validate secure document public APIs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_aura_secure-window",
    "title": "@salesforce: [Aura] Secure window",
    "description": "Validate secure window public APIs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_lightning_no-aura-localization-service",
    "title": "@salesforce: [Lightning] No aura localization service",
    "description": "Disallow usage of \"$A.localizationService\"",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_lightning_no-moment",
    "title": "@salesforce: [Lightning] No moment",
    "description": "Prohibit usage of \"moment\" library",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_lightning_prefer-i18n-service",
    "title": "@salesforce: [Lightning] Prefer i18n service",
    "description": "Suggest usage of \"@salesforce/i18n-service\" over \"Intl\" constructor",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@salesforce_lightning_valid-apex-method-invocation",
    "title": "@salesforce: [Lightning] Valid apex method invocation",
    "description": "Enforce invoking Apex methods with the right arguments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_binary-assignment-parens",
    "title": "@shopify: Binary assignment parens",
    "description": "Enforce (or disallow) assignments of binary, boolean-producing expressions to be wrapped in parentheses.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_class-property-semi",
    "title": "@shopify: Class property semi",
    "description": "Require (or disallow) semicolons for class properties.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_images-no-direct-imports",
    "title": "@shopify: Images no direct imports",
    "description": "Prefer importing image files from the index file of the directory instead of the direct path to the image file.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_jest_no-all-mocks-methods",
    "title": "@shopify: [Jest] No all mocks methods",
    "description": "Disallows jest allMocks methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_jest_no-snapshots",
    "title": "@shopify: [Jest] No snapshots",
    "description": "Disallows jest snapshots.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_jsx-no-complex-expressions",
    "title": "@shopify: Jsx no complex expressions",
    "description": "Disallow complex expressions embedded in in JSX.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_jsx-no-hardcoded-content",
    "title": "@shopify: Jsx no hardcoded content",
    "description": "Disallow hardcoded content in JSX.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_jsx-prefer-fragment-wrappers",
    "title": "@shopify: Jsx prefer fragment wrappers",
    "description": "Disallow useless wrapping elements in favour of fragment shorthand in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_no-ancestor-directory-import",
    "title": "@shopify: No ancestor directory import",
    "description": "Prefer that imports from within a directory extend to the file from where they are importing without relying on an index file.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_no-namespace-imports",
    "title": "@shopify: No namespace imports",
    "description": "Prevent namespace import declarations.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_no-useless-computed-properties",
    "title": "@shopify: No useless computed properties",
    "description": "Prevent the usage of unnecessary computed properties.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_no-fully-static-classes",
    "title": "@shopify: No fully static classes",
    "description": "Prevent the declaration of classes consisting only of static members.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_polaris-prefer-sectioned-prop",
    "title": "@shopify: Polaris prefer sectioned prop",
    "description": "Prefer the use of the `sectioned` props in Polaris components instead of wrapping all contents in a `Section` component.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_polaris-no-bare-stack-item",
    "title": "@shopify: Polaris no bare stack item",
    "description": "Disallow the use of Polaris’s `Stack.Item` and `LegacyStack.Item` without any custom props.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_prefer-class-properties",
    "title": "@shopify: Prefer class properties",
    "description": "Prefer class properties to assignment of literals in constructors.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_prefer-early-return",
    "title": "@shopify: Prefer early return",
    "description": "Prefer early returns over full-body conditional wrapping in function declarations.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_prefer-module-scope-constants",
    "title": "@shopify: Prefer module scope constants",
    "description": "Prefer that screaming snake case variables always be defined using `const`, and always appear at module scope.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_prefer-twine",
    "title": "@shopify: Prefer twine",
    "description": "Prefer Twine over Bindings as the name for twine imports.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_react-hooks-strict-return",
    "title": "@shopify: React hooks strict return",
    "description": "Restrict the number of returned items from React hooks.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_react-initialize-state",
    "title": "@shopify: React initialize state",
    "description": "Require that React component state be initialized when it has a non-empty type.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_react-no-multiple-render-methods",
    "title": "@shopify: React no multiple render methods",
    "description": "Disallow multiple render methods in React component classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_react-prefer-private-members",
    "title": "@shopify: React prefer private members",
    "description": "Disallow public members within React component classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_react-require-autocomplete",
    "title": "@shopify: React require autocomplete",
    "description": "Require autocomplete attribute on certain input types.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_react-type-state",
    "title": "@shopify: React type state",
    "description": "Require that React component state be typed in TypeScript.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_restrict-full-import",
    "title": "@shopify: Restrict full import",
    "description": "Prevent importing the entirety of a package.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_sinon-no-restricted-features",
    "title": "@shopify: Sinon no restricted features",
    "description": "Restrict the use of specified sinon features.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_sinon-prefer-meaningful-assertions",
    "title": "@shopify: Sinon prefer meaningful assertions",
    "description": "Require the use of meaningful sinon assertions through sinon.assert or sinon-chai.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_strict-component-boundaries",
    "title": "@shopify: Strict component boundaries",
    "description": "Prevent module imports between components.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_typescript_prefer-pascal-case-enums",
    "title": "@shopify: [Typescript] Prefer pascal case enums",
    "description": "Enforce Pascal case when naming enums.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_typescript_prefer-singular-enums",
    "title": "@shopify: [Typescript] Prefer singular enums",
    "description": "Prefer singular TypeScript enums.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_typescript_prefer-build-client-schema",
    "title": "@shopify: [Typescript] Prefer build client schema",
    "description": "Prefer buildClientSchema for schema building",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@shopify_webpack_no-unnamed-dynamic-imports",
    "title": "@shopify: [Webpack] No unnamed dynamic imports",
    "description": "Require that all dynamic imports contain a `webpackChunkName` comment.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_array-bracket-newline",
    "title": "@stylistic: Array bracket newline",
    "description": "Enforce linebreaks after opening and before closing array brackets",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_array-bracket-spacing",
    "title": "@stylistic: Array bracket spacing",
    "description": "Enforce consistent spacing inside array brackets",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_array-element-newline",
    "title": "@stylistic: Array element newline",
    "description": "Enforce line breaks after each array element",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "requireForBlockBody",
        "description": "requireForBlockBody"
      }
    ],
    "patternId": "@stylistic_arrow-parens",
    "title": "@stylistic: Arrow parens",
    "description": "Require parentheses around arrow function arguments",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "@stylistic_arrow-spacing",
    "title": "@stylistic: Arrow spacing",
    "description": "Enforce consistent spacing before and after the arrow in arrow functions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_block-spacing",
    "title": "@stylistic: Block spacing",
    "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "allowSingleLine",
        "description": "allowSingleLine"
      }
    ],
    "patternId": "@stylistic_brace-style",
    "title": "@stylistic: Brace style",
    "description": "Enforce consistent brace style for blocks",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_comma-dangle",
    "title": "@stylistic: Comma dangle",
    "description": "Require or disallow trailing commas",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "@stylistic_comma-spacing",
    "title": "@stylistic: Comma spacing",
    "description": "Enforce consistent spacing before and after commas",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_comma-style",
    "title": "@stylistic: Comma style",
    "description": "Enforce consistent comma style",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "enforceForClassMembers",
        "description": "enforceForClassMembers"
      }
    ],
    "patternId": "@stylistic_computed-property-spacing",
    "title": "@stylistic: Computed property spacing",
    "description": "Enforce consistent spacing inside computed property brackets",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_dot-location",
    "title": "@stylistic: Dot location",
    "description": "Enforce consistent newlines before and after dots",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_eol-last",
    "title": "@stylistic: Eol last",
    "description": "Require or disallow newline at the end of files",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_func-call-spacing",
    "title": "@stylistic: Func call spacing",
    "description": "Require or disallow spacing between function identifiers and their invocations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_function-call-argument-newline",
    "title": "@stylistic: Function call argument newline",
    "description": "Enforce line breaks between arguments of a function call",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_function-call-spacing",
    "title": "@stylistic: Function call spacing",
    "description": "Require or disallow spacing between function identifiers and their invocations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_function-paren-newline",
    "title": "@stylistic: Function paren newline",
    "description": "Enforce consistent line breaks inside function parentheses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_generator-star-spacing",
    "title": "@stylistic: Generator star spacing",
    "description": "Enforce consistent spacing around `*` operators in generator functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_implicit-arrow-linebreak",
    "title": "@stylistic: Implicit arrow linebreak",
    "description": "Enforce the location of arrow function bodies",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "SwitchCase",
        "description": "SwitchCase"
      },
      {
        "name": "flatTernaryExpressions",
        "description": "flatTernaryExpressions"
      },
      {
        "name": "offsetTernaryExpressions",
        "description": "offsetTernaryExpressions"
      },
      {
        "name": "ignoreComments",
        "description": "ignoreComments"
      },
      {
        "name": "VariableDeclarator",
        "description": "VariableDeclarator"
      },
      {
        "name": "outerIIFEBody",
        "description": "outerIIFEBody"
      },
      {
        "name": "MemberExpression",
        "description": "MemberExpression"
      },
      {
        "name": "FunctionDeclaration",
        "description": "FunctionDeclaration"
      },
      {
        "name": "FunctionExpression",
        "description": "FunctionExpression"
      },
      {
        "name": "CallExpression",
        "description": "CallExpression"
      },
      {
        "name": "ArrayExpression",
        "description": "ArrayExpression"
      },
      {
        "name": "ObjectExpression",
        "description": "ObjectExpression"
      },
      {
        "name": "ImportDeclaration",
        "description": "ImportDeclaration"
      },
      {
        "name": "ignoredNodes",
        "description": "ignoredNodes"
      }
    ],
    "patternId": "@stylistic_indent",
    "title": "@stylistic: Indent",
    "description": "Enforce consistent indentation",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_jsx-quotes",
    "title": "@stylistic: Jsx quotes",
    "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_key-spacing",
    "title": "@stylistic: Key spacing",
    "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "@stylistic_keyword-spacing",
    "title": "@stylistic: Keyword spacing",
    "description": "Enforce consistent spacing before and after keywords",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_linebreak-style",
    "title": "@stylistic: Linebreak style",
    "description": "Enforce consistent linebreak style",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "beforeBlockComment",
        "description": "beforeBlockComment"
      },
      {
        "name": "afterBlockComment",
        "description": "afterBlockComment"
      },
      {
        "name": "beforeLineComment",
        "description": "beforeLineComment"
      },
      {
        "name": "afterLineComment",
        "description": "afterLineComment"
      },
      {
        "name": "allowBlockStart",
        "description": "allowBlockStart"
      },
      {
        "name": "allowBlockEnd",
        "description": "allowBlockEnd"
      }
    ],
    "patternId": "@stylistic_lines-around-comment",
    "title": "@stylistic: Lines around comment",
    "description": "Require empty lines around comments",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "exceptAfterSingleLine",
        "description": "exceptAfterSingleLine"
      },
      {
        "name": "exceptAfterOverload",
        "description": "exceptAfterOverload"
      }
    ],
    "patternId": "@stylistic_lines-between-class-members",
    "title": "@stylistic: Lines between class members",
    "description": "Require or disallow an empty line between class members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_max-len",
    "title": "@stylistic: Max len",
    "description": "Enforce a maximum line length",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "max",
        "description": "max"
      }
    ],
    "patternId": "@stylistic_max-statements-per-line",
    "title": "@stylistic: Max statements per line",
    "description": "Enforce a maximum number of statements allowed per line",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "ignoreJSX",
        "description": "ignoreJSX"
      }
    ],
    "patternId": "@stylistic_multiline-ternary",
    "title": "@stylistic: Multiline ternary",
    "description": "Enforce newlines between operands of ternary expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_new-parens",
    "title": "@stylistic: New parens",
    "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreChainWithDepth",
        "description": "ignoreChainWithDepth"
      }
    ],
    "patternId": "@stylistic_newline-per-chained-call",
    "title": "@stylistic: Newline per chained call",
    "description": "Require a newline after each call in a method chain",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowParens",
        "description": "allowParens"
      },
      {
        "name": "onlyOneSimpleParam",
        "description": "onlyOneSimpleParam"
      }
    ],
    "patternId": "@stylistic_no-confusing-arrow",
    "title": "@stylistic: No confusing arrow",
    "description": "Disallow arrow functions where they could be confused with comparisons",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_no-extra-parens",
    "title": "@stylistic: No extra parens",
    "description": "Disallow unnecessary parentheses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_no-extra-semi",
    "title": "@stylistic: No extra semi",
    "description": "Disallow unnecessary semicolons",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_no-floating-decimal",
    "title": "@stylistic: No floating decimal",
    "description": "Disallow leading or trailing decimal points in numeric literals",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowSamePrecedence",
        "description": "allowSamePrecedence"
      }
    ],
    "patternId": "@stylistic_no-mixed-operators",
    "title": "@stylistic: No mixed operators",
    "description": "Disallow mixed binary operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_no-mixed-spaces-and-tabs",
    "title": "@stylistic: No mixed spaces and tabs",
    "description": "Disallow mixed spaces and tabs for indentation",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreEOLComments",
        "description": "ignoreEOLComments"
      },
      {
        "name": "includeTabs",
        "description": "includeTabs"
      }
    ],
    "patternId": "@stylistic_no-multi-spaces",
    "title": "@stylistic: No multi spaces",
    "description": "Disallow multiple spaces",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_no-multiple-empty-lines",
    "title": "@stylistic: No multiple empty lines",
    "description": "Disallow multiple empty lines",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowIndentationTabs",
        "description": "allowIndentationTabs"
      }
    ],
    "patternId": "@stylistic_no-tabs",
    "title": "@stylistic: No tabs",
    "description": "Disallow all tabs",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "skipBlankLines",
        "description": "skipBlankLines"
      },
      {
        "name": "ignoreComments",
        "description": "ignoreComments"
      }
    ],
    "patternId": "@stylistic_no-trailing-spaces",
    "title": "@stylistic: No trailing spaces",
    "description": "Disallow trailing whitespace at the end of lines",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_no-whitespace-before-property",
    "title": "@stylistic: No whitespace before property",
    "description": "Disallow whitespace before properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_nonblock-statement-body-position",
    "title": "@stylistic: Nonblock statement body position",
    "description": "Enforce the location of single-line statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_object-curly-newline",
    "title": "@stylistic: Object curly newline",
    "description": "Enforce consistent line breaks after opening and before closing braces",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_object-curly-spacing",
    "title": "@stylistic: Object curly spacing",
    "description": "Enforce consistent spacing inside braces",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowAllPropertiesOnSameLine",
        "description": "allowAllPropertiesOnSameLine"
      },
      {
        "name": "allowMultiplePropertiesPerLine",
        "description": "allowMultiplePropertiesPerLine"
      }
    ],
    "patternId": "@stylistic_object-property-newline",
    "title": "@stylistic: Object property newline",
    "description": "Enforce placing object properties on separate lines",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_one-var-declaration-per-line",
    "title": "@stylistic: One var declaration per line",
    "description": "Require or disallow newlines around variable declarations",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_operator-linebreak",
    "title": "@stylistic: Operator linebreak",
    "description": "Enforce consistent linebreak style for operators",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "allowSingleLineBlocks",
        "description": "allowSingleLineBlocks"
      }
    ],
    "patternId": "@stylistic_padded-blocks",
    "title": "@stylistic: Padded blocks",
    "description": "Require or disallow padding within blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_padding-line-between-statements",
    "title": "@stylistic: Padding line between statements",
    "description": "Require or disallow padding lines between statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_quote-props",
    "title": "@stylistic: Quote props",
    "description": "Require quotes around object literal, type literal, interfaces and enums property names",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "avoidEscape",
        "description": "avoidEscape"
      },
      {
        "name": "allowTemplateLiterals",
        "description": "allowTemplateLiterals"
      }
    ],
    "patternId": "@stylistic_quotes",
    "title": "@stylistic: Quotes",
    "description": "Enforce the consistent use of either backticks, double, or single quotes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_rest-spread-spacing",
    "title": "@stylistic: Rest spread spacing",
    "description": "Enforce spacing between rest and spread operators and their expressions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_semi",
    "title": "@stylistic: Semi",
    "description": "Require or disallow semicolons instead of ASI",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "@stylistic_semi-spacing",
    "title": "@stylistic: Semi spacing",
    "description": "Enforce consistent spacing before and after semicolons",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_semi-style",
    "title": "@stylistic: Semi style",
    "description": "Enforce location of semicolons",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_space-before-blocks",
    "title": "@stylistic: Space before blocks",
    "description": "Enforce consistent spacing before blocks",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_space-before-function-paren",
    "title": "@stylistic: Space before function paren",
    "description": "Enforce consistent spacing before function parenthesis",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_space-in-parens",
    "title": "@stylistic: Space in parens",
    "description": "Enforce consistent spacing inside parentheses",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "int32Hint",
        "description": "int32Hint"
      }
    ],
    "patternId": "@stylistic_space-infix-ops",
    "title": "@stylistic: Space infix ops",
    "description": "Require spacing around infix operators",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "words",
        "description": "words"
      },
      {
        "name": "nonwords",
        "description": "nonwords"
      }
    ],
    "patternId": "@stylistic_space-unary-ops",
    "title": "@stylistic: Space unary ops",
    "description": "Enforce consistent spacing before or after unary operators",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "@stylistic_spaced-comment",
    "title": "@stylistic: Spaced comment",
    "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "@stylistic_switch-colon-spacing",
    "title": "@stylistic: Switch colon spacing",
    "description": "Enforce spacing around colons of switch statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_template-curly-spacing",
    "title": "@stylistic: Template curly spacing",
    "description": "Require or disallow spacing around embedded expressions of template strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_template-tag-spacing",
    "title": "@stylistic: Template tag spacing",
    "description": "Require or disallow spacing between template tags and their literals",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "functionPrototypeMethods",
        "description": "functionPrototypeMethods"
      }
    ],
    "patternId": "@stylistic_wrap-iife",
    "title": "@stylistic: Wrap iife",
    "description": "Require parentheses around immediate `function` invocations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_wrap-regex",
    "title": "@stylistic: Wrap regex",
    "description": "Require parenthesis around regex literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_yield-star-spacing",
    "title": "@stylistic: Yield star spacing",
    "description": "Require or disallow spacing around the `*` in `yield*` expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-child-element-spacing",
    "title": "@stylistic: Jsx child element spacing",
    "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-closing-bracket-location",
    "title": "@stylistic: Jsx closing bracket location",
    "description": "Enforce closing bracket location in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-closing-tag-location",
    "title": "@stylistic: Jsx closing tag location",
    "description": "Enforce closing tag location for multiline JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-curly-brace-presence",
    "title": "@stylistic: Jsx curly brace presence",
    "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-curly-newline",
    "title": "@stylistic: Jsx curly newline",
    "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-curly-spacing",
    "title": "@stylistic: Jsx curly spacing",
    "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-equals-spacing",
    "title": "@stylistic: Jsx equals spacing",
    "description": "Enforce or disallow spaces around equal signs in JSX attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-first-prop-new-line",
    "title": "@stylistic: Jsx first prop new line",
    "description": "Enforce proper position of the first property in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-indent",
    "title": "@stylistic: Jsx indent",
    "description": "Enforce JSX indentation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-indent-props",
    "title": "@stylistic: Jsx indent props",
    "description": "Enforce props indentation in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-max-props-per-line",
    "title": "@stylistic: Jsx max props per line",
    "description": "Enforce maximum of props on a single line in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "prevent",
        "description": "prevent"
      },
      {
        "name": "allowMultilines",
        "description": "allowMultilines"
      }
    ],
    "patternId": "@stylistic_jsx-newline",
    "title": "@stylistic: Jsx newline",
    "description": "Require or prevent a new line after jsx elements and expressions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-one-expression-per-line",
    "title": "@stylistic: Jsx one expression per line",
    "description": "Require one JSX element per line",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-pascal-case",
    "title": "@stylistic: Jsx pascal case",
    "description": "Enforce PascalCase for user-defined JSX components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-props-no-multi-spaces",
    "title": "@stylistic: Jsx props no multi spaces",
    "description": "Disallow multiple spaces between inline JSX props",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "component",
        "description": "component"
      },
      {
        "name": "html",
        "description": "html"
      }
    ],
    "patternId": "@stylistic_jsx-self-closing-comp",
    "title": "@stylistic: Jsx self closing comp",
    "description": "Disallow extra closing tags for components without children",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "multiline",
        "description": "multiline"
      },
      {
        "name": "locale",
        "description": "locale"
      }
    ],
    "patternId": "@stylistic_jsx-sort-props",
    "title": "@stylistic: Jsx sort props",
    "description": "Enforce props alphabetical sorting",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-tag-spacing",
    "title": "@stylistic: Jsx tag spacing",
    "description": "Enforce whitespace in and around the JSX opening and closing brackets",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_jsx-wrap-multilines",
    "title": "@stylistic: Jsx wrap multilines",
    "description": "Disallow missing parentheses around multiline JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_member-delimiter-style",
    "title": "@stylistic: Member delimiter style",
    "description": "Require a specific member delimiter style for interfaces and type literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_type-annotation-spacing",
    "title": "@stylistic: Type annotation spacing",
    "description": "Require consistent spacing around type annotations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_indent-binary-ops",
    "title": "@stylistic: Indent binary ops",
    "description": "Indentation for binary operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_type-generic-spacing",
    "title": "@stylistic: Type generic spacing",
    "description": "Enforces consistent spacing inside TypeScript type generics",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@stylistic_type-named-tuple-spacing",
    "title": "@stylistic: Type named tuple spacing",
    "description": "Expect space before the type declaration in the named tuple",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@tanstack_query_exhaustive-deps",
    "title": "@tanstack: [Query] Exhaustive deps",
    "description": "Exhaustive deps rule for useQuery",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@tanstack_query_stable-query-client",
    "title": "@tanstack: [Query] Stable query client",
    "description": "Makes sure that QueryClient is stable",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@tanstack_query_no-rest-destructuring",
    "title": "@tanstack: [Query] No rest destructuring",
    "description": "Disallows rest destructuring in queries",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_adjacent-overload-signatures",
    "title": "@typescript eslint: Adjacent overload signatures",
    "description": "Require that function overload signatures be consecutive",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_array-type",
    "title": "@typescript eslint: Array type",
    "description": "Require consistently using either `T[]` or `Array<T>` for arrays",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_await-thenable",
    "title": "@typescript eslint: Await thenable",
    "description": "Disallow awaiting a value that is not a Thenable",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "minimumDescriptionLength",
        "description": "minimumDescriptionLength"
      }
    ],
    "patternId": "@typescript-eslint_ban-ts-comment",
    "title": "@typescript eslint: Ban ts comment",
    "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_ban-tslint-comment",
    "title": "@typescript eslint: Ban tslint comment",
    "description": "Disallow `// tslint:<rule-flag>` comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_ban-types",
    "title": "@typescript eslint: Ban types",
    "description": "Disallow certain types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_class-literal-property-style",
    "title": "@typescript eslint: Class literal property style",
    "description": "Enforce that literals on classes are exposed in a consistent style",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForClassFields",
        "description": "enforceForClassFields"
      }
    ],
    "patternId": "@typescript-eslint_class-methods-use-this",
    "title": "@typescript eslint: Class methods use this",
    "description": "Enforce that class methods utilize `this`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_consistent-generic-constructors",
    "title": "@typescript eslint: Consistent generic constructors",
    "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_consistent-indexed-object-style",
    "title": "@typescript eslint: Consistent indexed object style",
    "description": "Require or disallow the `Record` type",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "treatUndefinedAsUnspecified",
        "description": "treatUndefinedAsUnspecified"
      }
    ],
    "patternId": "@typescript-eslint_consistent-return",
    "title": "@typescript eslint: Consistent return",
    "description": "Require `return` statements to either always or never specify values",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_consistent-type-assertions",
    "title": "@typescript eslint: Consistent type assertions",
    "description": "Enforce consistent usage of type assertions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_consistent-type-definitions",
    "title": "@typescript eslint: Consistent type definitions",
    "description": "Enforce type definitions to consistently use either `interface` or `type`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_consistent-type-exports",
    "title": "@typescript eslint: Consistent type exports",
    "description": "Enforce consistent usage of type exports",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_default-param-last",
    "title": "@typescript eslint: Default param last",
    "description": "Enforce default parameters to be last",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowKeywords",
        "description": "allowKeywords"
      },
      {
        "name": "allowPattern",
        "description": "allowPattern"
      },
      {
        "name": "allowPrivateClassPropertyAccess",
        "description": "allowPrivateClassPropertyAccess"
      },
      {
        "name": "allowProtectedClassPropertyAccess",
        "description": "allowProtectedClassPropertyAccess"
      },
      {
        "name": "allowIndexSignaturePropertyAccess",
        "description": "allowIndexSignaturePropertyAccess"
      }
    ],
    "patternId": "@typescript-eslint_dot-notation",
    "title": "@typescript eslint: Dot notation",
    "description": "Enforce dot notation whenever possible",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_explicit-function-return-type",
    "title": "@typescript eslint: Explicit function return type",
    "description": "Require explicit return types on functions and class methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_explicit-member-accessibility",
    "title": "@typescript eslint: Explicit member accessibility",
    "description": "Require explicit accessibility modifiers on class properties and methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_explicit-module-boundary-types",
    "title": "@typescript eslint: Explicit module boundary types",
    "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_init-declarations",
    "title": "@typescript eslint: Init declarations",
    "description": "Require or disallow initialization in variable declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_max-params",
    "title": "@typescript eslint: Max params",
    "description": "Enforce a maximum number of parameters in function definitions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_member-ordering",
    "title": "@typescript eslint: Member ordering",
    "description": "Require a consistent member declaration order",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_method-signature-style",
    "title": "@typescript eslint: Method signature style",
    "description": "Enforce using a particular method signature syntax",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_naming-convention",
    "title": "@typescript eslint: Naming convention",
    "description": "Enforce naming conventions for everything across a codebase",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-array-constructor",
    "title": "@typescript eslint: No array constructor",
    "description": "Disallow generic `Array` constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-array-delete",
    "title": "@typescript eslint: No array delete",
    "description": "Disallow using the `delete` operator on array values",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-base-to-string",
    "title": "@typescript eslint: No base to string",
    "description": "Require `.toString()` to only be called on objects which provide useful information when stringified",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-confusing-non-null-assertion",
    "title": "@typescript eslint: No confusing non null assertion",
    "description": "Disallow non-null assertion in locations that may be confusing",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-confusing-void-expression",
    "title": "@typescript eslint: No confusing void expression",
    "description": "Require expressions of type void to appear in statement position",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-dupe-class-members",
    "title": "@typescript eslint: No dupe class members",
    "description": "Disallow duplicate class members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-duplicate-enum-values",
    "title": "@typescript eslint: No duplicate enum values",
    "description": "Disallow duplicate enum member values",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-duplicate-type-constituents",
    "title": "@typescript eslint: No duplicate type constituents",
    "description": "Disallow duplicate constituents of union or intersection types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-dynamic-delete",
    "title": "@typescript eslint: No dynamic delete",
    "description": "Disallow using the `delete` operator on computed key expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-empty-function",
    "title": "@typescript eslint: No empty function",
    "description": "Disallow empty functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-empty-interface",
    "title": "@typescript eslint: No empty interface",
    "description": "Disallow the declaration of empty interfaces",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-explicit-any",
    "title": "@typescript eslint: No explicit any",
    "description": "Disallow the `any` type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-extra-non-null-assertion",
    "title": "@typescript eslint: No extra non null assertion",
    "description": "Disallow extra non-null assertions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-extraneous-class",
    "title": "@typescript eslint: No extraneous class",
    "description": "Disallow classes used as namespaces",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-floating-promises",
    "title": "@typescript eslint: No floating promises",
    "description": "Require Promise-like statements to be handled appropriately",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-for-in-array",
    "title": "@typescript eslint: No for in array",
    "description": "Disallow iterating over an array with a for-in loop",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-implied-eval",
    "title": "@typescript eslint: No implied eval",
    "description": "Disallow the use of `eval()`-like methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-import-type-side-effects",
    "title": "@typescript eslint: No import type side effects",
    "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-inferrable-types",
    "title": "@typescript eslint: No inferrable types",
    "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "capIsConstructor",
        "description": "capIsConstructor"
      }
    ],
    "patternId": "@typescript-eslint_no-invalid-this",
    "title": "@typescript eslint: No invalid this",
    "description": "Disallow `this` keywords outside of classes or class-like objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-invalid-void-type",
    "title": "@typescript eslint: No invalid void type",
    "description": "Disallow `void` type outside of generic or return types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-loop-func",
    "title": "@typescript eslint: No loop func",
    "description": "Disallow function declarations that contain unsafe references inside loop statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-loss-of-precision",
    "title": "@typescript eslint: No loss of precision",
    "description": "Disallow literal numbers that lose precision",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "detectObjects",
        "description": "detectObjects"
      },
      {
        "name": "enforceConst",
        "description": "enforceConst"
      },
      {
        "name": "ignoreArrayIndexes",
        "description": "ignoreArrayIndexes"
      },
      {
        "name": "ignoreDefaultValues",
        "description": "ignoreDefaultValues"
      },
      {
        "name": "ignoreClassFieldInitialValues",
        "description": "ignoreClassFieldInitialValues"
      }
    ],
    "patternId": "@typescript-eslint_no-magic-numbers",
    "title": "@typescript eslint: No magic numbers",
    "description": "Disallow magic numbers",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkNever",
        "description": "checkNever"
      }
    ],
    "patternId": "@typescript-eslint_no-meaningless-void-operator",
    "title": "@typescript eslint: No meaningless void operator",
    "description": "Disallow the `void` operator except when used to discard a value",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-misused-new",
    "title": "@typescript eslint: No misused new",
    "description": "Enforce valid definition of `new` and `constructor`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-misused-promises",
    "title": "@typescript eslint: No misused promises",
    "description": "Disallow Promises in places not designed to handle them",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-mixed-enums",
    "title": "@typescript eslint: No mixed enums",
    "description": "Disallow enums from having both number and string members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-namespace",
    "title": "@typescript eslint: No namespace",
    "description": "Disallow TypeScript namespaces",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-non-null-asserted-nullish-coalescing",
    "title": "@typescript eslint: No non null asserted nullish coalescing",
    "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-non-null-asserted-optional-chain",
    "title": "@typescript eslint: No non null asserted optional chain",
    "description": "Disallow non-null assertions after an optional chain expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-non-null-assertion",
    "title": "@typescript eslint: No non null assertion",
    "description": "Disallow non-null assertions using the `!` postfix operator",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-redeclare",
    "title": "@typescript eslint: No redeclare",
    "description": "Disallow variable redeclaration",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-redundant-type-constituents",
    "title": "@typescript eslint: No redundant type constituents",
    "description": "Disallow members of unions and intersections that do nothing or override type information",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-require-imports",
    "title": "@typescript eslint: No require imports",
    "description": "Disallow invocation of `require()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-restricted-imports",
    "title": "@typescript eslint: No restricted imports",
    "description": "Disallow specified modules when loaded by `import`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-shadow",
    "title": "@typescript eslint: No shadow",
    "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-this-alias",
    "title": "@typescript eslint: No this alias",
    "description": "Disallow aliasing `this`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unnecessary-boolean-literal-compare",
    "title": "@typescript eslint: No unnecessary boolean literal compare",
    "description": "Disallow unnecessary equality comparisons against boolean literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unnecessary-condition",
    "title": "@typescript eslint: No unnecessary condition",
    "description": "Disallow conditionals where the type is always truthy or always falsy",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unnecessary-qualifier",
    "title": "@typescript eslint: No unnecessary qualifier",
    "description": "Disallow unnecessary namespace qualifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unnecessary-type-arguments",
    "title": "@typescript eslint: No unnecessary type arguments",
    "description": "Disallow type arguments that are equal to the default",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unnecessary-type-assertion",
    "title": "@typescript eslint: No unnecessary type assertion",
    "description": "Disallow type assertions that do not change the type of an expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unnecessary-type-constraint",
    "title": "@typescript eslint: No unnecessary type constraint",
    "description": "Disallow unnecessary constraints on generic types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unsafe-argument",
    "title": "@typescript eslint: No unsafe argument",
    "description": "Disallow calling a function with a value with type `any`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unsafe-assignment",
    "title": "@typescript eslint: No unsafe assignment",
    "description": "Disallow assigning a value with type `any` to variables and properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unsafe-call",
    "title": "@typescript eslint: No unsafe call",
    "description": "Disallow calling a value with type `any`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unsafe-declaration-merging",
    "title": "@typescript eslint: No unsafe declaration merging",
    "description": "Disallow unsafe declaration merging",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unsafe-enum-comparison",
    "title": "@typescript eslint: No unsafe enum comparison",
    "description": "Disallow comparing an enum value with a non-enum value",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unsafe-member-access",
    "title": "@typescript eslint: No unsafe member access",
    "description": "Disallow member access on a value with type `any`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unsafe-return",
    "title": "@typescript eslint: No unsafe return",
    "description": "Disallow returning a value with type `any` from a function",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unsafe-unary-minus",
    "title": "@typescript eslint: No unsafe unary minus",
    "description": "Require unary negation to take a number",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "allowShortCircuit"
      },
      {
        "name": "allowTernary",
        "description": "allowTernary"
      },
      {
        "name": "allowTaggedTemplates",
        "description": "allowTaggedTemplates"
      },
      {
        "name": "enforceForJSX",
        "description": "enforceForJSX"
      }
    ],
    "patternId": "@typescript-eslint_no-unused-expressions",
    "title": "@typescript eslint: No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-unused-vars",
    "title": "@typescript eslint: No unused vars",
    "description": "Disallow unused variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-use-before-define",
    "title": "@typescript eslint: No use before define",
    "description": "Disallow the use of variables before they are defined",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-useless-constructor",
    "title": "@typescript eslint: No useless constructor",
    "description": "Disallow unnecessary constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-useless-empty-export",
    "title": "@typescript eslint: No useless empty export",
    "description": "Disallow empty exports that don't change anything in a module file",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-useless-template-literals",
    "title": "@typescript eslint: No useless template literals",
    "description": "Disallow unnecessary template literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_no-var-requires",
    "title": "@typescript eslint: No var requires",
    "description": "Disallow `require` statements except in import statements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_non-nullable-type-assertion-style",
    "title": "@typescript eslint: Non nullable type assertion style",
    "description": "Enforce non-null assertions over explicit type casts",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_only-throw-error",
    "title": "@typescript eslint: Only throw error",
    "description": "Disallow throwing non-`Error` values as exceptions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_parameter-properties",
    "title": "@typescript eslint: Parameter properties",
    "description": "Require or disallow parameter properties in class constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-as-const",
    "title": "@typescript eslint: Prefer as const",
    "description": "Enforce the use of `as const` over literal type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-destructuring",
    "title": "@typescript eslint: Prefer destructuring",
    "description": "Require destructuring from arrays and/or objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-enum-initializers",
    "title": "@typescript eslint: Prefer enum initializers",
    "description": "Require each enum member value to be explicitly initialized",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-find",
    "title": "@typescript eslint: Prefer find",
    "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-for-of",
    "title": "@typescript eslint: Prefer for of",
    "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-function-type",
    "title": "@typescript eslint: Prefer function type",
    "description": "Enforce using function types instead of interfaces with call signatures",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-includes",
    "title": "@typescript eslint: Prefer includes",
    "description": "Enforce `includes` method over `indexOf` method",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-literal-enum-member",
    "title": "@typescript eslint: Prefer literal enum member",
    "description": "Require all enum members to be literal values",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-namespace-keyword",
    "title": "@typescript eslint: Prefer namespace keyword",
    "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-nullish-coalescing",
    "title": "@typescript eslint: Prefer nullish coalescing",
    "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-optional-chain",
    "title": "@typescript eslint: Prefer optional chain",
    "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-promise-reject-errors",
    "title": "@typescript eslint: Prefer promise reject errors",
    "description": "Require using Error objects as Promise rejection reasons",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-readonly",
    "title": "@typescript eslint: Prefer readonly",
    "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-readonly-parameter-types",
    "title": "@typescript eslint: Prefer readonly parameter types",
    "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-reduce-type-parameter",
    "title": "@typescript eslint: Prefer reduce type parameter",
    "description": "Enforce using type parameter when calling `Array#reduce` instead of casting",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-regexp-exec",
    "title": "@typescript eslint: Prefer regexp exec",
    "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-return-this-type",
    "title": "@typescript eslint: Prefer return this type",
    "description": "Enforce that `this` is used when only `this` type is returned",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-string-starts-ends-with",
    "title": "@typescript eslint: Prefer string starts ends with",
    "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_prefer-ts-expect-error",
    "title": "@typescript eslint: Prefer ts expect error",
    "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_promise-function-async",
    "title": "@typescript eslint: Promise function async",
    "description": "Require any function or method that returns a Promise to be marked async",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_require-array-sort-compare",
    "title": "@typescript eslint: Require array sort compare",
    "description": "Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_require-await",
    "title": "@typescript eslint: Require await",
    "description": "Disallow async functions which have no `await` expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_restrict-plus-operands",
    "title": "@typescript eslint: Restrict plus operands",
    "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_restrict-template-expressions",
    "title": "@typescript eslint: Restrict template expressions",
    "description": "Enforce template literal expressions to be of `string` type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_return-await",
    "title": "@typescript eslint: Return await",
    "description": "Enforce consistent returning of awaited values",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_sort-type-constituents",
    "title": "@typescript eslint: Sort type constituents",
    "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_strict-boolean-expressions",
    "title": "@typescript eslint: Strict boolean expressions",
    "description": "Disallow certain types in boolean expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_switch-exhaustiveness-check",
    "title": "@typescript eslint: Switch exhaustiveness check",
    "description": "Require switch-case statements to be exhaustive",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_triple-slash-reference",
    "title": "@typescript eslint: Triple slash reference",
    "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_typedef",
    "title": "@typescript eslint: Typedef",
    "description": "Require type annotations in certain places",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_unbound-method",
    "title": "@typescript eslint: Unbound method",
    "description": "Enforce unbound methods are called with their expected scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_unified-signatures",
    "title": "@typescript eslint: Unified signatures",
    "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "@typescript-eslint_use-unknown-in-catch-callback-variable",
    "title": "@typescript eslint: Use unknown in catch callback variable",
    "description": "Enforce typing arguments in `.catch()` callbacks as `unknown`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_require-bucket-encryption",
    "title": "Awscdk: Require bucket encryption",
    "description": "Encryption should be enabled for all S3 buckets",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_require-bucket-private",
    "title": "Awscdk: Require bucket private",
    "description": "Buckets should not be public",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_no-public-ingress",
    "title": "Awscdk: No public ingress",
    "description": "Security Group rules should not allow access from anywhere",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_no-iam-star-actions",
    "title": "Awscdk: No iam star actions",
    "description": "Buckets should not be public",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_no-iam-admin-permissions",
    "title": "Awscdk: No iam admin permissions",
    "description": "Buckets should not be public",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_no-policy-allow-kms-decrypt",
    "title": "Awscdk: No policy allow kms decrypt",
    "description": "Buckets should not be public",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_require-bucket-ssl",
    "title": "Awscdk: Require bucket ssl",
    "description": "This checks whether S3 buckets have policies that require requests to use Secure Socket Layer (SSL)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_require-dynamodb-ptr",
    "title": "Awscdk: Require dynamodb ptr",
    "description": "DynamoDB tables should have point-in-time recovery enabled.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_require-sns-topic-encryption",
    "title": "Awscdk: Require sns topic encryption",
    "description": "SNS Topics should be encrypted at rest using AWS KMS",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_require-dynamodb-autoscale",
    "title": "Awscdk: Require dynamodb autoscale",
    "description": "This control passes if the table uses either on-demand capacity mode or provisioned mode\n      with auto scaling configured.\n\n      Scaling capacity with demand avoids throttling exceptions, which helps to maintain availability of your applications.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_no-rds-public-access",
    "title": "Awscdk: No rds public access",
    "description": "AWS RDS instances should not be publicly available",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_no-kms-key-delete",
    "title": "Awscdk: No kms key delete",
    "description": "KMS Keys should not be scheduled for deletion",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_no-s3-public-write",
    "title": "Awscdk: No s3 public write",
    "description": "Buckets should not allow public write access",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_no-s3-public-read",
    "title": "Awscdk: No s3 public read",
    "description": "Buckets should not allow public read access",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_require-cloudfront-default-root-object",
    "title": "Awscdk: Require cloudfront default root object",
    "description": "This control checks whether an Amazon CloudFront distribution is configured to return a specific object that is the default root object.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "awscdk_no-redshift-public-access",
    "title": "Awscdk: No redshift public access",
    "description": "AWS Redshift instances should not be publicly available",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_collection-model",
    "title": "Backbone: Collection model",
    "description": "Require all collections to declare model",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_defaults-on-top",
    "title": "Backbone: Defaults on top",
    "description": "Require defaults to be on top of the model",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_event-scope",
    "title": "Backbone: Event scope",
    "description": "Verify that scope is passed into event handlers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_events-on-top",
    "title": "Backbone: Events on top",
    "description": "Events should be the first thing registered in the View",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_initialize-on-top",
    "title": "Backbone: Initialize on top",
    "description": "Requires initialize to be the first property of Backbone Views/Models/Collections",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_model-defaults",
    "title": "Backbone: Model defaults",
    "description": "Require all models to have defaults section",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-changed-set",
    "title": "Backbone: No changed set",
    "description": "Prevent setting changed attribute of the model in views",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-collection-models",
    "title": "Backbone: No collection models",
    "description": "Prevent access to models property of collections",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-constructor",
    "title": "Backbone: No constructor",
    "description": "Prevent overloading of constructor",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-el-assign",
    "title": "Backbone: No el assign",
    "description": "Prevent assigning el or $el inside views",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-model-attributes",
    "title": "Backbone: No model attributes",
    "description": "Prevent access to attributes collection inside models",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-native-jquery",
    "title": "Backbone: No native jquery",
    "description": "Prevent usage of $ in the views",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-silent",
    "title": "Backbone: No silent",
    "description": "Prevent using silent option in functions that cause events",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-view-collection-models",
    "title": "Backbone: No view collection models",
    "description": "Prevent access to collection's models property inside views",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-view-model-attributes",
    "title": "Backbone: No view model attributes",
    "description": "Prevent access to model's attributes collection inside views",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-view-onoff-binding",
    "title": "Backbone: No view onoff binding",
    "description": "Prevent using on/off bindings inside views",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_no-view-qualified-jquery",
    "title": "Backbone: No view qualified jquery",
    "description": "Prevent usage of global $ to reach view elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "backbone_render-return",
    "title": "Backbone: Render return",
    "description": "Enforces render function to always return this",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cdk_ban-lambda-runtimes",
    "title": "Cdk: Ban lambda runtimes",
    "description": "Bans specific lambda runtimes from being used",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cdk_ban-reserved-words",
    "title": "Cdk: Ban reserved words",
    "description": "Bans specific words from being used",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cdk_construct-ctor",
    "title": "Cdk: Construct ctor",
    "description": "Ensure a uniform construct constructors signature",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cdk_filename-match-regex",
    "title": "Cdk: Filename match regex",
    "description": "Enforces all linted files to match a certain pattern",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cdk_no-static-import",
    "title": "Cdk: No static import",
    "description": "Enforce cdk guidelines",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cdk_construct-props-struct-name",
    "title": "Cdk: Construct props struct name",
    "description": "Ensure a uniform construct constructors signature",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cdk_public-static-property-all-caps",
    "title": "Cdk: Public static property all caps",
    "description": "Enforces all static properties must be named using ALL_CAPS",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cdk_stack-props-struct-name",
    "title": "Cdk: Stack props struct name",
    "description": "Ensure a uniform stack constructors signature",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cdk_prefer-type-only-imports",
    "title": "Cdk: Prefer type only imports",
    "description": "Enforce type only imports",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "chai-expect_no-inner-compare",
    "title": "Chai expect: No inner compare",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "chai-expect_no-inner-literal",
    "title": "Chai expect: No inner literal",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "chai-expect_missing-assertion",
    "title": "Chai expect: Missing assertion",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "chai-expect_terminating-properties",
    "title": "Chai expect: Terminating properties",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "enforceForJSX",
        "description": "enforceForJSX"
      }
    ],
    "patternId": "chai-friendly_no-unused-expressions",
    "title": "Chai friendly: No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "codeceptjs_no-actor-in-scenario",
    "title": "Codeceptjs: No actor in scenario",
    "description": "Disallow the use of Actor directly in Scenarios in favor of page objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "codeceptjs_no-exclusive-tests",
    "title": "Codeceptjs: No exclusive tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "codeceptjs_no-skipped-tests",
    "title": "Codeceptjs: No skipped tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "codeceptjs_no-pause-in-scenario",
    "title": "Codeceptjs: No pause in scenario",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "compat_compat",
    "title": "Compat: Compat",
    "description": "Ensure cross-browser API compatibility",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "css-modules_no-unused-class",
    "title": "Css modules: No unused class",
    "description": "Checks that you are using all css/scss/less classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "css-modules_no-undef-class",
    "title": "Css modules: No undef class",
    "description": "Checks that you are using the existent css/scss/less classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cypress_no-assigning-return-values",
    "title": "Cypress: No assigning return values",
    "description": "Prevent assigning return values of cy calls",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "methods",
        "description": "methods"
      }
    ],
    "patternId": "cypress_unsafe-to-chain-command",
    "title": "Cypress: Unsafe to chain command",
    "description": "Actions should be in the end of chains, not in the middle",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cypress_no-unnecessary-waiting",
    "title": "Cypress: No unnecessary waiting",
    "description": "Prevent waiting for arbitrary time periods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cypress_no-async-tests",
    "title": "Cypress: No async tests",
    "description": "Prevent using async/await in Cypress test cases",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cypress_assertion-before-screenshot",
    "title": "Cypress: Assertion before screenshot",
    "description": "Assert on the page state before taking a screenshot, so the screenshot is consistent",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cypress_require-data-selectors",
    "title": "Cypress: Require data selectors",
    "description": "Use data-* attributes to provide context to your selectors and insulate them from CSS or JS changes https://docs.cypress.io/guides/references/best-practices.html#Selecting-Elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cypress_no-force",
    "title": "Cypress: No force",
    "description": "Disallow using of 'force: true' option for click and type calls",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "cypress_no-pause",
    "title": "Cypress: No pause",
    "description": "Disallow using of 'cy.pause' calls",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "deprecation_deprecation",
    "title": "Deprecation: Deprecation",
    "description": "Do not use deprecated APIs.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_alias-model-in-controller",
    "title": "Ember: Alias model in controller",
    "description": "Enforce aliasing model in controllers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_avoid-leaking-state-in-ember-objects",
    "title": "Ember: Avoid leaking state in ember objects",
    "description": "Disallow state leakage",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_avoid-using-needs-in-controllers",
    "title": "Ember: Avoid using needs in controllers",
    "description": "Disallow using `needs` in controllers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_classic-decorator-hooks",
    "title": "Ember: Classic decorator hooks",
    "description": "Enforce using correct hooks for both classic and non-classic classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_classic-decorator-no-classic-methods",
    "title": "Ember: Classic decorator no classic methods",
    "description": "Disallow usage of classic APIs such as `get`/`set` in classes that aren't explicitly decorated with `@classic`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_closure-actions",
    "title": "Ember: Closure actions",
    "description": "Enforce usage of closure actions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_computed-property-getters",
    "title": "Ember: Computed property getters",
    "description": "Enforce the consistent use of getters in computed properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_jquery-ember-run",
    "title": "Ember: Jquery ember run",
    "description": "Disallow usage of jQuery without an Ember run loop",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowSimpleArrowFunction",
        "description": "allowSimpleArrowFunction"
      }
    ],
    "patternId": "ember_named-functions-in-promises",
    "title": "Ember: Named functions in promises",
    "description": "Enforce usage of named functions in promises",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_new-module-imports",
    "title": "Ember: New module imports",
    "description": "Enforce using \"New Module Imports\" from Ember RFC #176",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-actions-hash",
    "title": "Ember: No actions hash",
    "description": "Disallow the actions hash in components, controllers, and routes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-array-prototype-extensions",
    "title": "Ember: No array prototype extensions",
    "description": "Disallow usage of Ember's `Array` prototype extensions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "onlyThisContexts",
        "description": "onlyThisContexts"
      }
    ],
    "patternId": "ember_no-arrow-function-computed-properties",
    "title": "Ember: No arrow function computed properties",
    "description": "Disallow arrow functions in computed properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-assignment-of-untracked-properties-used-in-tracking-contexts",
    "title": "Ember: No assignment of untracked properties used in tracking contexts",
    "description": "Disallow assignment of untracked properties that are used as computed property dependencies",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-at-ember-render-modifiers",
    "title": "Ember: No at ember render modifiers",
    "description": "Disallow importing from @ember/render-modifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-attrs-in-components",
    "title": "Ember: No attrs in components",
    "description": "Disallow usage of `this.attrs` in components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-attrs-snapshot",
    "title": "Ember: No attrs snapshot",
    "description": "Disallow use of attrs snapshot in the `didReceiveAttrs` and `didUpdateAttrs` component hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-capital-letters-in-routes",
    "title": "Ember: No capital letters in routes",
    "description": "Disallow routes with uppercased letters in router.js",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-classic-classes",
    "title": "Ember: No classic classes",
    "description": "Disallow \"classic\" classes in favor of native JS classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-classic-components",
    "title": "Ember: No classic components",
    "description": "Enforce using Glimmer components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-component-lifecycle-hooks",
    "title": "Ember: No component lifecycle hooks",
    "description": "Disallow usage of \"classic\" ember component lifecycle hooks. Render modifiers or custom functional modifiers should be used instead.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreClassic",
        "description": "ignoreClassic"
      }
    ],
    "patternId": "ember_no-computed-properties-in-native-classes",
    "title": "Ember: No computed properties in native classes",
    "description": "Disallow using computed properties in native classes",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowControllerFor",
        "description": "allowControllerFor"
      }
    ],
    "patternId": "ember_no-controller-access-in-routes",
    "title": "Ember: No controller access in routes",
    "description": "Disallow routes from accessing the controller outside of setupController/resetController",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-controllers",
    "title": "Ember: No controllers",
    "description": "Disallow non-essential controllers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-current-route-name",
    "title": "Ember: No current route name",
    "description": "Disallow usage of the `currentRouteName()` test helper",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-deeply-nested-dependent-keys-with-each",
    "title": "Ember: No deeply nested dependent keys with each",
    "description": "Disallow usage of deeply-nested computed property dependent keys with `@each`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-deprecated-router-transition-methods",
    "title": "Ember: No deprecated router transition methods",
    "description": "Enforce usage of router service transition methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-duplicate-dependent-keys",
    "title": "Ember: No duplicate dependent keys",
    "description": "Disallow repeating computed property dependent keys",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-ember-super-in-es-classes",
    "title": "Ember: No ember super in es classes",
    "description": "Disallow use of `this._super` in ES class methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-ember-testing-in-module-scope",
    "title": "Ember: No ember testing in module scope",
    "description": "Disallow use of `Ember.testing` in module scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-empty-attrs",
    "title": "Ember: No empty attrs",
    "description": "Disallow usage of empty attributes in Ember Data models",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-empty-glimmer-component-classes",
    "title": "Ember: No empty glimmer component classes",
    "description": "Disallow empty backing classes for Glimmer components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-function-prototype-extensions",
    "title": "Ember: No function prototype extensions",
    "description": "Disallow usage of Ember's `function` prototype extensions",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "catchSafeObjects",
        "description": "catchSafeObjects"
      },
      {
        "name": "catchUnsafeObjects",
        "description": "catchUnsafeObjects"
      }
    ],
    "patternId": "ember_no-get-with-default",
    "title": "Ember: No get with default",
    "description": "Disallow usage of the Ember's `getWithDefault` function",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreGetProperties",
        "description": "ignoreGetProperties"
      },
      {
        "name": "ignoreNestedPaths",
        "description": "ignoreNestedPaths"
      },
      {
        "name": "useOptionalChaining",
        "description": "useOptionalChaining"
      },
      {
        "name": "catchSafeObjects",
        "description": "catchSafeObjects"
      },
      {
        "name": "catchUnsafeObjects",
        "description": "catchUnsafeObjects"
      },
      {
        "name": "useAt",
        "description": "useAt"
      }
    ],
    "patternId": "ember_no-get",
    "title": "Ember: No get",
    "description": "Require using ES5 getters instead of Ember's `get` / `getProperties` functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-global-jquery",
    "title": "Ember: No global jquery",
    "description": "Disallow usage of global jQuery object",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-html-safe",
    "title": "Ember: No html safe",
    "description": "Disallow the use of `htmlSafe`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-implicit-injections",
    "title": "Ember: No implicit injections",
    "description": "Enforce usage of implicit service injections",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-implicit-service-injection-argument",
    "title": "Ember: No implicit service injection argument",
    "description": "Disallow omitting the injected service name argument",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-incorrect-calls-with-inline-anonymous-functions",
    "title": "Ember: No incorrect calls with inline anonymous functions",
    "description": "Disallow inline anonymous functions as arguments to `debounce`, `once`, and `scheduleOnce`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-incorrect-computed-macros",
    "title": "Ember: No incorrect computed macros",
    "description": "Disallow incorrect usage of computed property macros",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-invalid-debug-function-arguments",
    "title": "Ember: No invalid debug function arguments",
    "description": "Disallow usages of Ember's `assert()` / `warn()` / `deprecate()` functions that have the arguments passed in the wrong order.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-invalid-dependent-keys",
    "title": "Ember: No invalid dependent keys",
    "description": "Disallow invalid dependent keys in computed properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-invalid-test-waiters",
    "title": "Ember: No invalid test waiters",
    "description": "Disallow incorrect usage of test waiter APIs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-jquery",
    "title": "Ember: No jquery",
    "description": "Disallow any usage of jQuery",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-legacy-test-waiters",
    "title": "Ember: No legacy test waiters",
    "description": "Disallow the use of the legacy test waiter APIs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-mixins",
    "title": "Ember: No mixins",
    "description": "Disallow the usage of mixins",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-new-mixins",
    "title": "Ember: No new mixins",
    "description": "Disallow the creation of new mixins",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-noop-setup-on-error-in-before",
    "title": "Ember: No noop setup on error in before",
    "description": "Disallows using no-op setupOnerror in `before` or `beforeEach`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-observers",
    "title": "Ember: No observers",
    "description": "Disallow usage of observers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-old-shims",
    "title": "Ember: No old shims",
    "description": "Disallow usage of old shims for modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-on-calls-in-components",
    "title": "Ember: No on calls in components",
    "description": "Disallow usage of `on` to call lifecycle hooks in components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-pause-test",
    "title": "Ember: No pause test",
    "description": "Disallow usage of the `pauseTest` helper in tests",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "catchRouterMicrolib",
        "description": "catchRouterMicrolib"
      },
      {
        "name": "catchRouterMain",
        "description": "catchRouterMain"
      }
    ],
    "patternId": "ember_no-private-routing-service",
    "title": "Ember: No private routing service",
    "description": "Disallow injecting the private routing service",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-proxies",
    "title": "Ember: No proxies",
    "description": "Disallow using array or object proxies",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-replace-test-comments",
    "title": "Ember: No replace test comments",
    "description": "Disallow 'Replace this with your real tests' comments in test files",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-restricted-resolver-tests",
    "title": "Ember: No restricted resolver tests",
    "description": "Disallow the use of patterns that use the restricted resolver in tests",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "paths",
        "description": "paths"
      },
      {
        "name": "services",
        "description": "services"
      },
      {
        "name": "message",
        "description": "message"
      }
    ],
    "patternId": "ember_no-restricted-service-injections",
    "title": "Ember: No restricted service injections",
    "description": "Disallow injecting certain services under certain paths",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-runloop",
    "title": "Ember: No runloop",
    "description": "Disallow usage of `@ember/runloop` functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-settled-after-test-helper",
    "title": "Ember: No settled after test helper",
    "description": "Disallow usage of `await settled()` right after test helper that calls it internally",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-shadow-route-definition",
    "title": "Ember: No shadow route definition",
    "description": "Enforce no route path definition shadowing",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "catchEvents",
        "description": "catchEvents"
      },
      {
        "name": "checkPlainGetters",
        "description": "checkPlainGetters"
      }
    ],
    "patternId": "ember_no-side-effects",
    "title": "Ember: No side effects",
    "description": "Disallow unexpected side effects in computed properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-string-prototype-extensions",
    "title": "Ember: No string prototype extensions",
    "description": "Disallow usage of `String` prototype extensions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-test-and-then",
    "title": "Ember: No test and then",
    "description": "Disallow usage of the `andThen` test wait helper",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-test-import-export",
    "title": "Ember: No test import export",
    "description": "Disallow importing of \"-test.js\" in a test file and exporting from a test file",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-test-module-for",
    "title": "Ember: No test module for",
    "description": "Disallow usage of `moduleFor`, `moduleForComponent`, etc",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-test-support-import",
    "title": "Ember: No test support import",
    "description": "Disallow importing of \"test-support\" files in production code.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-test-this-render",
    "title": "Ember: No test this render",
    "description": "Disallow usage of the `this.render` in tests, recommending to use @ember/test-helpers' `render` instead.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-tracked-properties-from-args",
    "title": "Ember: No tracked properties from args",
    "description": "Disallow creating @tracked properties from this.args",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-try-invoke",
    "title": "Ember: No try invoke",
    "description": "Disallow usage of the Ember's `tryInvoke` util",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-unnecessary-index-route",
    "title": "Ember: No unnecessary index route",
    "description": "Disallow unnecessary `index` route definition",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-unnecessary-route-path-option",
    "title": "Ember: No unnecessary route path option",
    "description": "Disallow unnecessary usage of the route `path` option",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-unnecessary-service-injection-argument",
    "title": "Ember: No unnecessary service injection argument",
    "description": "Disallow unnecessary argument when injecting services",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-unused-services",
    "title": "Ember: No unused services",
    "description": "Disallow unused service injections (see rule doc for limitations)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_no-volatile-computed-properties",
    "title": "Ember: No volatile computed properties",
    "description": "Disallow volatile computed properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_order-in-components",
    "title": "Ember: Order in components",
    "description": "Enforce proper order of properties in components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_order-in-controllers",
    "title": "Ember: Order in controllers",
    "description": "Enforce proper order of properties in controllers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_order-in-models",
    "title": "Ember: Order in models",
    "description": "Enforce proper order of properties in models",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_order-in-routes",
    "title": "Ember: Order in routes",
    "description": "Enforce proper order of properties in routes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_prefer-ember-test-helpers",
    "title": "Ember: Prefer ember test helpers",
    "description": "Enforce usage of `@ember/test-helpers` methods over native window methods",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "includeNativeGetters",
        "description": "includeNativeGetters"
      }
    ],
    "patternId": "ember_require-computed-macros",
    "title": "Ember: Require computed macros",
    "description": "Require using computed property macros when possible",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowDynamicKeys",
        "description": "allowDynamicKeys"
      },
      {
        "name": "requireServiceNames",
        "description": "requireServiceNames"
      }
    ],
    "patternId": "ember_require-computed-property-dependencies",
    "title": "Ember: Require computed property dependencies",
    "description": "Require dependencies to be declared statically in computed properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_require-fetch-import",
    "title": "Ember: Require fetch import",
    "description": "Enforce explicit import for `fetch()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_require-return-from-computed",
    "title": "Ember: Require return from computed",
    "description": "Disallow missing return statements in computed properties",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkInitOnly",
        "description": "checkInitOnly"
      },
      {
        "name": "checkNativeClasses",
        "description": "checkNativeClasses"
      }
    ],
    "patternId": "ember_require-super-in-lifecycle-hooks",
    "title": "Ember: Require super in lifecycle hooks",
    "description": "Require super to be called in lifecycle hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_require-tagless-components",
    "title": "Ember: Require tagless components",
    "description": "Disallow using the wrapper element of a component",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_require-valid-css-selector-in-test-helpers",
    "title": "Ember: Require valid css selector in test helpers",
    "description": "Disallow using invalid CSS selectors in test helpers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_route-path-style",
    "title": "Ember: Route path style",
    "description": "Enforce usage of kebab-case (instead of snake_case or camelCase) in route paths",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_routes-segments-snake-case",
    "title": "Ember: Routes segments snake case",
    "description": "Enforce usage of snake_cased dynamic segments in routes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_template-no-let-reference",
    "title": "Ember: Template no let reference",
    "description": "Disallow referencing let variables in \\<template\\>",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_use-brace-expansion",
    "title": "Ember: Use brace expansion",
    "description": "Enforce usage of brace expansion in computed property dependent keys",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember_use-ember-data-rfc-395-imports",
    "title": "Ember: Use ember data rfc 395 imports",
    "description": "Enforce usage of `@ember-data/` package imports instead `ember-data`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreThisExpressions",
        "description": "ignoreThisExpressions"
      },
      {
        "name": "ignoreNonThisExpressions",
        "description": "ignoreNonThisExpressions"
      }
    ],
    "patternId": "ember_use-ember-get-and-set",
    "title": "Ember: Use ember get and set",
    "description": "Enforce usage of `Ember.get` and `Ember.set`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "exceptAfterSingleLine",
        "description": "exceptAfterSingleLine"
      }
    ],
    "patternId": "ember-suave_lines-between-object-properties",
    "title": "Ember suave: Lines between object properties",
    "description": "Require or disallow an empty line between object properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember-suave_no-const-outside-module-scope",
    "title": "Ember suave: No const outside module scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember-suave_no-direct-property-access",
    "title": "Ember suave: No direct property access",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ember-suave_require-access-in-comments",
    "title": "Ember suave: Require access in comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-accessor-properties",
    "title": "Es x: No accessor properties",
    "description": "Disallow accessor properties.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-arbitrary-module-namespace-names",
    "title": "Es x: No arbitrary module namespace names",
    "description": "Disallow arbitrary module namespace names.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-from",
    "title": "Es x: No array from",
    "description": "Disallow the `Array.from` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-isarray",
    "title": "Es x: No array isarray",
    "description": "Disallow the `Array.isArray` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-of",
    "title": "Es x: No array of",
    "description": "Disallow the `Array.of` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-copywithin",
    "title": "Es x: No array prototype copywithin",
    "description": "Disallow the `Array.prototype.copyWithin` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-entries",
    "title": "Es x: No array prototype entries",
    "description": "Disallow the `Array.prototype.entries` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-every",
    "title": "Es x: No array prototype every",
    "description": "Disallow the `Array.prototype.every` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-fill",
    "title": "Es x: No array prototype fill",
    "description": "Disallow the `Array.prototype.fill` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-filter",
    "title": "Es x: No array prototype filter",
    "description": "Disallow the `Array.prototype.filter` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-find",
    "title": "Es x: No array prototype find",
    "description": "Disallow the `Array.prototype.find` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-findindex",
    "title": "Es x: No array prototype findindex",
    "description": "Disallow the `Array.prototype.findIndex` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-findlast-findlastindex",
    "title": "Es x: No array prototype findlast findlastindex",
    "description": "Disallow the `Array.prototype.{findLast,findLastIndex}` methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-flat",
    "title": "Es x: No array prototype flat",
    "description": "Disallow the `Array.prototype.{flat,flatMap}` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-foreach",
    "title": "Es x: No array prototype foreach",
    "description": "Disallow the `Array.prototype.forEach` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-includes",
    "title": "Es x: No array prototype includes",
    "description": "Disallow the `Array.prototype.includes` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-indexof",
    "title": "Es x: No array prototype indexof",
    "description": "Disallow the `Array.prototype.indexOf` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-keys",
    "title": "Es x: No array prototype keys",
    "description": "Disallow the `Array.prototype.keys` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-lastindexof",
    "title": "Es x: No array prototype lastindexof",
    "description": "Disallow the `Array.prototype.lastIndexOf` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-map",
    "title": "Es x: No array prototype map",
    "description": "Disallow the `Array.prototype.map` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-reduce",
    "title": "Es x: No array prototype reduce",
    "description": "Disallow the `Array.prototype.reduce` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-reduceright",
    "title": "Es x: No array prototype reduceright",
    "description": "Disallow the `Array.prototype.reduceRight` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-some",
    "title": "Es x: No array prototype some",
    "description": "Disallow the `Array.prototype.some` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-toreversed",
    "title": "Es x: No array prototype toreversed",
    "description": "Disallow the `Array.prototype.toReversed` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-tosorted",
    "title": "Es x: No array prototype tosorted",
    "description": "Disallow the `Array.prototype.toSorted` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-tospliced",
    "title": "Es x: No array prototype tospliced",
    "description": "Disallow the `Array.prototype.toSpliced` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-values",
    "title": "Es x: No array prototype values",
    "description": "Disallow the `Array.prototype.values` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-prototype-with",
    "title": "Es x: No array prototype with",
    "description": "Disallow the `Array.prototype.with` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-array-string-prototype-at",
    "title": "Es x: No array string prototype at",
    "description": "Disallow the `{Array,String}.prototype.at()` methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-arraybuffer-prototype-transfer",
    "title": "Es x: No arraybuffer prototype transfer",
    "description": "Disallow the `ArrayBuffer.prototype.transfer` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-arrow-functions",
    "title": "Es x: No arrow functions",
    "description": "Disallow arrow function expressions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-async-functions",
    "title": "Es x: No async functions",
    "description": "Disallow async function declarations.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-async-iteration",
    "title": "Es x: No async iteration",
    "description": "Disallow async iteration.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-atomics",
    "title": "Es x: No atomics",
    "description": "Disallow the `Atomics` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-atomics-waitasync",
    "title": "Es x: No atomics waitasync",
    "description": "Disallow the `Atomics.waitAsync` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-bigint",
    "title": "Es x: No bigint",
    "description": "Disallow `bigint` syntax and built-ins",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-binary-numeric-literals",
    "title": "Es x: No binary numeric literals",
    "description": "Disallow binary numeric literals.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-block-scoped-functions",
    "title": "Es x: No block scoped functions",
    "description": "Disallow block-scoped function declarations.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-block-scoped-variables",
    "title": "Es x: No block scoped variables",
    "description": "Disallow block-scoped variable declarations.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-class-fields",
    "title": "Es x: No class fields",
    "description": "Disallow class fields.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-class-static-block",
    "title": "Es x: No class static block",
    "description": "Disallow class static block.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-classes",
    "title": "Es x: No classes",
    "description": "Disallow class declarations.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-computed-properties",
    "title": "Es x: No computed properties",
    "description": "Disallow computed properties.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-date-now",
    "title": "Es x: No date now",
    "description": "Disallow the `Date.now` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-date-prototype-getyear-setyear",
    "title": "Es x: No date prototype getyear setyear",
    "description": "Disallow the `Date.prototype.{getYear,setYear}` methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-date-prototype-togmtstring",
    "title": "Es x: No date prototype togmtstring",
    "description": "Disallow the `Date.prototype.toGMTString` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-default-parameters",
    "title": "Es x: No default parameters",
    "description": "Disallow default parameters.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-destructuring",
    "title": "Es x: No destructuring",
    "description": "Disallow destructuring.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-dynamic-import",
    "title": "Es x: No dynamic import",
    "description": "Disallow `import()` syntax",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-error-cause",
    "title": "Es x: No error cause",
    "description": "Disallow Error Cause.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-escape-unescape",
    "title": "Es x: No escape unescape",
    "description": "Disallow `escape` and `unescape`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-exponential-operators",
    "title": "Es x: No exponential operators",
    "description": "Disallow exponential operators.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-export-ns-from",
    "title": "Es x: No export ns from",
    "description": "Disallow `export * as ns`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-for-of-loops",
    "title": "Es x: No for of loops",
    "description": "Disallow `for-of` statements.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-function-declarations-in-if-statement-clauses-without-block",
    "title": "Es x: No function declarations in if statement clauses without block",
    "description": "Disallow function declarations in if statement clauses without using blocks.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-function-prototype-bind",
    "title": "Es x: No function prototype bind",
    "description": "Disallow the `Function.prototype.bind` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-generators",
    "title": "Es x: No generators",
    "description": "Disallow generator function declarations.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-global-this",
    "title": "Es x: No global this",
    "description": "Disallow the `globalThis` variable",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-hashbang",
    "title": "Es x: No hashbang",
    "description": "Disallow Hashbang comments.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-import-meta",
    "title": "Es x: No import meta",
    "description": "Disallow `import.meta` meta property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-initializers-in-for-in",
    "title": "Es x: No initializers in for in",
    "description": "Disallow initializers in for-in heads.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-datetimeformat-prototype-formatrange",
    "title": "Es x: No intl datetimeformat prototype formatrange",
    "description": "Disallow the `Intl.DateTimeFormat.prototype.formatRange` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-datetimeformat-prototype-formattoparts",
    "title": "Es x: No intl datetimeformat prototype formattoparts",
    "description": "Disallow the `DateTimeFormat.prototype.formatToParts` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-displaynames",
    "title": "Es x: No intl displaynames",
    "description": "Disallow the `Intl.DisplayNames` object.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-getcanonicallocales",
    "title": "Es x: No intl getcanonicallocales",
    "description": "Disallow the `Intl.getCanonicalLocales` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-listformat",
    "title": "Es x: No intl listformat",
    "description": "Disallow the `Intl.ListFormat` object.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-locale",
    "title": "Es x: No intl locale",
    "description": "Disallow the `Intl.Locale` object.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-numberformat-prototype-formatrange",
    "title": "Es x: No intl numberformat prototype formatrange",
    "description": "Disallow the `NumberFormat.prototype.formatRange` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-numberformat-prototype-formatrangetoparts",
    "title": "Es x: No intl numberformat prototype formatrangetoparts",
    "description": "Disallow the `NumberFormat.prototype.formatRangeToParts` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-numberformat-prototype-formattoparts",
    "title": "Es x: No intl numberformat prototype formattoparts",
    "description": "Disallow the `NumberFormat.prototype.formatToParts` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-pluralrules",
    "title": "Es x: No intl pluralrules",
    "description": "Disallow the `Intl.PluralRules` object.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-pluralrules-prototype-selectrange",
    "title": "Es x: No intl pluralrules prototype selectrange",
    "description": "Disallow the `PluralRules.prototype.selectRange` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-relativetimeformat",
    "title": "Es x: No intl relativetimeformat",
    "description": "Disallow the `Intl.RelativeTimeFormat` object.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-segmenter",
    "title": "Es x: No intl segmenter",
    "description": "Disallow the `Intl.Segmenter` object.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-intl-supportedvaluesof",
    "title": "Es x: No intl supportedvaluesof",
    "description": "Disallow the `Intl.supportedValuesOf` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-json",
    "title": "Es x: No json",
    "description": "Disallow the `JSON` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-json-superset",
    "title": "Es x: No json superset",
    "description": "Disallow `\\u2028` and `\\u2029` in string literals.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-keyword-properties",
    "title": "Es x: No keyword properties",
    "description": "Disallow reserved words as property names.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-labelled-function-declarations",
    "title": "Es x: No labelled function declarations",
    "description": "Disallow labelled function declarations.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-legacy-object-prototype-accessor-methods",
    "title": "Es x: No legacy object prototype accessor methods",
    "description": "Disallow legacy `Object.prototype` accessor methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-logical-assignment-operators",
    "title": "Es x: No logical assignment operators",
    "description": "Disallow logical assignment operators.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-malformed-template-literals",
    "title": "Es x: No malformed template literals",
    "description": "Disallow template literals with invalid escape sequences.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-map",
    "title": "Es x: No map",
    "description": "Disallow the `Map` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-acosh",
    "title": "Es x: No math acosh",
    "description": "Disallow the `Math.acosh` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-asinh",
    "title": "Es x: No math asinh",
    "description": "Disallow the `Math.asinh` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-atanh",
    "title": "Es x: No math atanh",
    "description": "Disallow the `Math.atanh` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-cbrt",
    "title": "Es x: No math cbrt",
    "description": "Disallow the `Math.cbrt` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-clz32",
    "title": "Es x: No math clz32",
    "description": "Disallow the `Math.clz32` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-cosh",
    "title": "Es x: No math cosh",
    "description": "Disallow the `Math.cosh` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-expm1",
    "title": "Es x: No math expm1",
    "description": "Disallow the `Math.expm1` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-fround",
    "title": "Es x: No math fround",
    "description": "Disallow the `Math.fround` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-hypot",
    "title": "Es x: No math hypot",
    "description": "Disallow the `Math.hypot` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-imul",
    "title": "Es x: No math imul",
    "description": "Disallow the `Math.imul` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-log1p",
    "title": "Es x: No math log1p",
    "description": "Disallow the `Math.log1p` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-log2",
    "title": "Es x: No math log2",
    "description": "Disallow the `Math.log2` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-log10",
    "title": "Es x: No math log10",
    "description": "Disallow the `Math.log10` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-sign",
    "title": "Es x: No math sign",
    "description": "Disallow the `Math.sign` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-sinh",
    "title": "Es x: No math sinh",
    "description": "Disallow the `Math.sinh` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-tanh",
    "title": "Es x: No math tanh",
    "description": "Disallow the `Math.tanh` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-math-trunc",
    "title": "Es x: No math trunc",
    "description": "Disallow the `Math.trunc` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-modules",
    "title": "Es x: No modules",
    "description": "Disallow modules.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-new-target",
    "title": "Es x: No new target",
    "description": "Disallow `new.target` meta property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-nullish-coalescing-operators",
    "title": "Es x: No nullish coalescing operators",
    "description": "Disallow nullish coalescing operators.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-number-epsilon",
    "title": "Es x: No number epsilon",
    "description": "Disallow the `Number.EPSILON` property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-number-isfinite",
    "title": "Es x: No number isfinite",
    "description": "Disallow the `Number.isFinite` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-number-isinteger",
    "title": "Es x: No number isinteger",
    "description": "Disallow the `Number.isInteger` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-number-isnan",
    "title": "Es x: No number isnan",
    "description": "Disallow the `Number.isNaN` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-number-issafeinteger",
    "title": "Es x: No number issafeinteger",
    "description": "Disallow the `Number.isSafeInteger` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-number-maxsafeinteger",
    "title": "Es x: No number maxsafeinteger",
    "description": "Disallow the `Number.MAX_SAFE_INTEGER` property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-number-minsafeinteger",
    "title": "Es x: No number minsafeinteger",
    "description": "Disallow the `Number.MIN_SAFE_INTEGER` property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-number-parsefloat",
    "title": "Es x: No number parsefloat",
    "description": "Disallow the `Number.parseFloat` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-number-parseint",
    "title": "Es x: No number parseint",
    "description": "Disallow the `Number.parseInt` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-numeric-separators",
    "title": "Es x: No numeric separators",
    "description": "Disallow numeric separators.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-assign",
    "title": "Es x: No object assign",
    "description": "Disallow the `Object.assign` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-create",
    "title": "Es x: No object create",
    "description": "Disallow the `Object.create` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-defineproperties",
    "title": "Es x: No object defineproperties",
    "description": "Disallow the `Object.defineProperties` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-defineproperty",
    "title": "Es x: No object defineproperty",
    "description": "Disallow the `Object.defineProperty` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-entries",
    "title": "Es x: No object entries",
    "description": "Disallow the `Object.entries` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-freeze",
    "title": "Es x: No object freeze",
    "description": "Disallow the `Object.freeze` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-fromentries",
    "title": "Es x: No object fromentries",
    "description": "Disallow the `Object.fromEntries` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-getownpropertydescriptor",
    "title": "Es x: No object getownpropertydescriptor",
    "description": "Disallow the `Object.getOwnPropertyDescriptor` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-getownpropertydescriptors",
    "title": "Es x: No object getownpropertydescriptors",
    "description": "Disallow the `Object.getOwnPropertyDescriptors` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-getownpropertynames",
    "title": "Es x: No object getownpropertynames",
    "description": "Disallow the `Object.getOwnPropertyNames` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-getownpropertysymbols",
    "title": "Es x: No object getownpropertysymbols",
    "description": "Disallow the `Object.getOwnPropertySymbols` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-getprototypeof",
    "title": "Es x: No object getprototypeof",
    "description": "Disallow the `Object.getPrototypeOf` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-hasown",
    "title": "Es x: No object hasown",
    "description": "Disallow the `Object.hasOwn` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-is",
    "title": "Es x: No object is",
    "description": "Disallow the `Object.is` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-isextensible",
    "title": "Es x: No object isextensible",
    "description": "Disallow the `Object.isExtensible` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-isfrozen",
    "title": "Es x: No object isfrozen",
    "description": "Disallow the `Object.isFrozen` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-issealed",
    "title": "Es x: No object issealed",
    "description": "Disallow the `Object.isSealed` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-keys",
    "title": "Es x: No object keys",
    "description": "Disallow the `Object.keys` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-map-groupby",
    "title": "Es x: No object map groupby",
    "description": "Disallow the `{Object,Map}.groupBy()` function (array grouping).",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-preventextensions",
    "title": "Es x: No object preventextensions",
    "description": "Disallow the `Object.preventExtensions` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-seal",
    "title": "Es x: No object seal",
    "description": "Disallow the `Object.seal` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-setprototypeof",
    "title": "Es x: No object setprototypeof",
    "description": "Disallow the `Object.setPrototypeOf` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-super-properties",
    "title": "Es x: No object super properties",
    "description": "Disallow `super` property accesses in object literals.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-object-values",
    "title": "Es x: No object values",
    "description": "Disallow the `Object.values` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-octal-numeric-literals",
    "title": "Es x: No octal numeric literals",
    "description": "Disallow octal numeric literals.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-optional-catch-binding",
    "title": "Es x: No optional catch binding",
    "description": "Disallow optional `catch` binding.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-optional-chaining",
    "title": "Es x: No optional chaining",
    "description": "Disallow optional chaining.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-private-in",
    "title": "Es x: No private in",
    "description": "Disallow `#x in obj`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-promise",
    "title": "Es x: No promise",
    "description": "Disallow the `Promise` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-promise-all-settled",
    "title": "Es x: No promise all settled",
    "description": "Disallow `Promise.allSettled` function",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-promise-any",
    "title": "Es x: No promise any",
    "description": "Disallow `Promise.any` function and `AggregateError` class",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-promise-prototype-finally",
    "title": "Es x: No promise prototype finally",
    "description": "Disallow the `Promise.prototype.finally` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-promise-withresolvers",
    "title": "Es x: No promise withresolvers",
    "description": "Disallow the `Promise.withResolvers()` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-property-shorthands",
    "title": "Es x: No property shorthands",
    "description": "Disallow property shorthands.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-proxy",
    "title": "Es x: No proxy",
    "description": "Disallow the `Proxy` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-reflect",
    "title": "Es x: No reflect",
    "description": "Disallow the `Reflect` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-d-flag",
    "title": "Es x: No regexp d flag",
    "description": "Disallow RegExp `d` flag.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-lookbehind-assertions",
    "title": "Es x: No regexp lookbehind assertions",
    "description": "Disallow RegExp lookbehind assertions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-named-capture-groups",
    "title": "Es x: No regexp named capture groups",
    "description": "Disallow RegExp named capture groups.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-prototype-compile",
    "title": "Es x: No regexp prototype compile",
    "description": "Disallow the `RegExp.prototype.compile` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-prototype-flags",
    "title": "Es x: No regexp prototype flags",
    "description": "Disallow the `RegExp.prototype.flags` property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-s-flag",
    "title": "Es x: No regexp s flag",
    "description": "Disallow RegExp `s` flag.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-u-flag",
    "title": "Es x: No regexp u flag",
    "description": "Disallow RegExp `u` flag.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-unicode-property-escapes",
    "title": "Es x: No regexp unicode property escapes",
    "description": "Disallow RegExp Unicode property escape sequences.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-unicode-property-escapes-2019",
    "title": "Es x: No regexp unicode property escapes 2019",
    "description": "Disallow the new values of RegExp Unicode property escape sequences in ES2019",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-unicode-property-escapes-2020",
    "title": "Es x: No regexp unicode property escapes 2020",
    "description": "Disallow the new values of RegExp Unicode property escape sequences in ES2020",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-unicode-property-escapes-2021",
    "title": "Es x: No regexp unicode property escapes 2021",
    "description": "Disallow the new values of RegExp Unicode property escape sequences in ES2021",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-unicode-property-escapes-2022",
    "title": "Es x: No regexp unicode property escapes 2022",
    "description": "Disallow the new values of RegExp Unicode property escape sequences in ES2022",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-unicode-property-escapes-2023",
    "title": "Es x: No regexp unicode property escapes 2023",
    "description": "Disallow the new values of RegExp Unicode property escape sequences in ES2023",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-v-flag",
    "title": "Es x: No regexp v flag",
    "description": "Disallow RegExp `v` flag.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-regexp-y-flag",
    "title": "Es x: No regexp y flag",
    "description": "Disallow RegExp `y` flag.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-resizable-and-growable-arraybuffers",
    "title": "Es x: No resizable and growable arraybuffers",
    "description": "Disallow resizable and growable ArrayBuffers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-rest-parameters",
    "title": "Es x: No rest parameters",
    "description": "Disallow rest parameters.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-rest-spread-properties",
    "title": "Es x: No rest spread properties",
    "description": "Disallow rest/spread properties.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-set",
    "title": "Es x: No set",
    "description": "Disallow the `Set` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-shadow-catch-param",
    "title": "Es x: No shadow catch param",
    "description": "Disallow identifiers from shadowing catch parameter names.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-shared-array-buffer",
    "title": "Es x: No shared array buffer",
    "description": "Disallow the `SharedArrayBuffer` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-spread-elements",
    "title": "Es x: No spread elements",
    "description": "Disallow spread elements.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-create-html-methods",
    "title": "Es x: No string create html methods",
    "description": "Disallow HTML creation methods of string instances.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-fromcodepoint",
    "title": "Es x: No string fromcodepoint",
    "description": "Disallow the `String.fromCodePoint` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-codepointat",
    "title": "Es x: No string prototype codepointat",
    "description": "Disallow the `String.prototype.codePointAt` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-endswith",
    "title": "Es x: No string prototype endswith",
    "description": "Disallow the `String.prototype.endsWith` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-includes",
    "title": "Es x: No string prototype includes",
    "description": "Disallow the `String.prototype.includes` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-iswellformed-towellformed",
    "title": "Es x: No string prototype iswellformed towellformed",
    "description": "Disallow the `String.prototype.{isWellFormed,toWellFormed}` methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-matchall",
    "title": "Es x: No string prototype matchall",
    "description": "Disallow the `String.prototype.matchAll` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-normalize",
    "title": "Es x: No string prototype normalize",
    "description": "Disallow the `String.prototype.normalize` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-padstart-padend",
    "title": "Es x: No string prototype padstart padend",
    "description": "Disallow the `String.prototype.{padStart,padEnd}` methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-repeat",
    "title": "Es x: No string prototype repeat",
    "description": "Disallow the `String.prototype.repeat` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-replaceall",
    "title": "Es x: No string prototype replaceall",
    "description": "Disallow the `String.prototype.replaceAll` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-startswith",
    "title": "Es x: No string prototype startswith",
    "description": "Disallow the `String.prototype.startsWith` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-substr",
    "title": "Es x: No string prototype substr",
    "description": "Disallow the `String.prototype.substr` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-trim",
    "title": "Es x: No string prototype trim",
    "description": "Disallow the `String.prototype.trim` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-trimleft-trimright",
    "title": "Es x: No string prototype trimleft trimright",
    "description": "Disallow the `String.prototype.{trimLeft,trimRight}` methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-prototype-trimstart-trimend",
    "title": "Es x: No string prototype trimstart trimend",
    "description": "Disallow the `String.prototype.{trimStart,trimEnd}` methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-string-raw",
    "title": "Es x: No string raw",
    "description": "Disallow the `String.raw` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-subclassing-builtins",
    "title": "Es x: No subclassing builtins",
    "description": "Disallow the subclassing of the built-in classes.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-symbol",
    "title": "Es x: No symbol",
    "description": "Disallow the `Symbol` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-symbol-prototype-description",
    "title": "Es x: No symbol prototype description",
    "description": "Disallow the `Symbol.prototype.description` property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-template-literals",
    "title": "Es x: No template literals",
    "description": "Disallow template literals.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-top-level-await",
    "title": "Es x: No top level await",
    "description": "Disallow top-level `await`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-trailing-commas",
    "title": "Es x: No trailing commas",
    "description": "Disallow trailing commas in array/object literals.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-trailing-function-commas",
    "title": "Es x: No trailing function commas",
    "description": "Disallow trailing commas in parameter/argument lists.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-typed-arrays",
    "title": "Es x: No typed arrays",
    "description": "Disallow ES2015 typed arrays.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-unicode-codepoint-escapes",
    "title": "Es x: No unicode codepoint escapes",
    "description": "Disallow Unicode code point escape sequences.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-weak-map",
    "title": "Es x: No weak map",
    "description": "Disallow the `WeakMap` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-weak-set",
    "title": "Es x: No weak set",
    "description": "Disallow the `WeakSet` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "es-x_no-weakrefs",
    "title": "Es x: No weakrefs",
    "description": "Disallow the `WeakRef` and `FinalizationRegistry` class.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_consistent-output",
    "title": "Eslint plugin: Consistent output",
    "description": "Enforce consistent use of `output` assertions in rule tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_fixer-return",
    "title": "Eslint plugin: Fixer return",
    "description": "Require fixer functions to return a fix",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_meta-property-ordering",
    "title": "Eslint plugin: Meta property ordering",
    "description": "Enforce the order of meta properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_no-deprecated-context-methods",
    "title": "Eslint plugin: No deprecated context methods",
    "description": "Disallow usage of deprecated methods on rule context objects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_no-deprecated-report-api",
    "title": "Eslint plugin: No deprecated report api",
    "description": "Disallow the version of `context.report()` with multiple arguments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_no-identical-tests",
    "title": "Eslint plugin: No identical tests",
    "description": "Disallow identical tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_no-missing-message-ids",
    "title": "Eslint plugin: No missing message ids",
    "description": "Disallow `messageId`s that are missing from `meta.messages`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_no-missing-placeholders",
    "title": "Eslint plugin: No missing placeholders",
    "description": "Disallow missing placeholders in rule report messages",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_no-only-tests",
    "title": "Eslint plugin: No only tests",
    "description": "Disallow the test case property `only`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_no-property-in-node",
    "title": "Eslint plugin: No property in node",
    "description": "Disallow using `in` to narrow node types instead of looking at properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_no-unused-message-ids",
    "title": "Eslint plugin: No unused message ids",
    "description": "Disallow unused `messageId`s in `meta.messages`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_no-unused-placeholders",
    "title": "Eslint plugin: No unused placeholders",
    "description": "Disallow unused placeholders in rule report messages",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_no-useless-token-range",
    "title": "Eslint plugin: No useless token range",
    "description": "Disallow unnecessary calls to `sourceCode.getFirstToken()` and `sourceCode.getLastToken()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_prefer-message-ids",
    "title": "Eslint plugin: Prefer message ids",
    "description": "Require using `messageId` instead of `message` or `desc` to report rule violations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_prefer-object-rule",
    "title": "Eslint plugin: Prefer object rule",
    "description": "Disallow function-style rules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_prefer-output-null",
    "title": "Eslint plugin: Prefer output null",
    "description": "Disallow invalid RuleTester test cases where the `output` matches the `code`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_prefer-placeholders",
    "title": "Eslint plugin: Prefer placeholders",
    "description": "Require using placeholders for dynamic report messages",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_prefer-replace-text",
    "title": "Eslint plugin: Prefer replace text",
    "description": "Require using `replaceText()` instead of `replaceTextRange()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_report-message-format",
    "title": "Eslint plugin: Report message format",
    "description": "Enforce a consistent format for rule report messages",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "pattern",
        "description": "pattern"
      }
    ],
    "patternId": "eslint-plugin_require-meta-docs-description",
    "title": "Eslint plugin: Require meta docs description",
    "description": "Require rules to implement a `meta.docs.description` property with the correct format",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_require-meta-docs-url",
    "title": "Eslint plugin: Require meta docs url",
    "description": "Require rules to implement a `meta.docs.url` property",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "catchNoFixerButFixableProperty",
        "description": "catchNoFixerButFixableProperty"
      }
    ],
    "patternId": "eslint-plugin_require-meta-fixable",
    "title": "Eslint plugin: Require meta fixable",
    "description": "Require rules to implement a `meta.fixable` property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_require-meta-has-suggestions",
    "title": "Eslint plugin: Require meta has suggestions",
    "description": "Require suggestable rules to implement a `meta.hasSuggestions` property",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "requireSchemaPropertyWhenOptionless",
        "description": "requireSchemaPropertyWhenOptionless"
      }
    ],
    "patternId": "eslint-plugin_require-meta-schema",
    "title": "Eslint plugin: Require meta schema",
    "description": "Require rules to implement a `meta.schema` property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_require-meta-type",
    "title": "Eslint plugin: Require meta type",
    "description": "Require rules to implement a `meta.type` property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_test-case-property-ordering",
    "title": "Eslint plugin: Test case property ordering",
    "description": "Require the properties of a test case to be placed in a consistent order",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "eslint-plugin_test-case-shorthand-strings",
    "title": "Eslint plugin: Test case shorthand strings",
    "description": "Enforce consistent usage of shorthand strings for test cases with no options",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "filenames_match-regex",
    "title": "Filenames: Match regex",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "filenames_match-exported",
    "title": "Filenames: Match exported",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "filenames_no-index",
    "title": "Filenames: No index",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_array-style-complex-type",
    "title": "Flowtype: Array style complex type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_array-style-simple-type",
    "title": "Flowtype: Array style simple type",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      }
    ],
    "patternId": "flowtype_arrow-parens",
    "title": "Flowtype: Arrow parens",
    "description": "Require parentheses around arrow function arguments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_boolean-style",
    "title": "Flowtype: Boolean style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_define-flow-type",
    "title": "Flowtype: Define flow type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_delimiter-dangle",
    "title": "Flowtype: Delimiter dangle",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_enforce-line-break",
    "title": "Flowtype: Enforce line break",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_generic-spacing",
    "title": "Flowtype: Generic spacing",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_interface-id-match",
    "title": "Flowtype: Interface id match",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_newline-after-flow-annotation",
    "title": "Flowtype: Newline after flow annotation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_no-dupe-keys",
    "title": "Flowtype: No dupe keys",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_no-duplicate-type-union-intersection-members",
    "title": "Flowtype: No duplicate type union intersection members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_no-existential-type",
    "title": "Flowtype: No existential type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_no-flow-fix-me-comments",
    "title": "Flowtype: No flow fix me comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_no-internal-flow-type",
    "title": "Flowtype: No internal flow type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_no-mixed",
    "title": "Flowtype: No mixed",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_no-mutable-array",
    "title": "Flowtype: No mutable array",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_no-primitive-constructor-types",
    "title": "Flowtype: No primitive constructor types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_no-types-missing-file-annotation",
    "title": "Flowtype: No types missing file annotation",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "allowShortCircuit"
      },
      {
        "name": "allowTernary",
        "description": "allowTernary"
      },
      {
        "name": "allowTaggedTemplates",
        "description": "allowTaggedTemplates"
      },
      {
        "name": "enforceForJSX",
        "description": "enforceForJSX"
      }
    ],
    "patternId": "flowtype_no-unused-expressions",
    "title": "Flowtype: No unused expressions",
    "description": "Disallow unused expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_no-weak-types",
    "title": "Flowtype: No weak types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_object-type-curly-spacing",
    "title": "Flowtype: Object type curly spacing",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_object-type-delimiter",
    "title": "Flowtype: Object type delimiter",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_quotes",
    "title": "Flowtype: Quotes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_require-compound-type-alias",
    "title": "Flowtype: Require compound type alias",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_require-exact-type",
    "title": "Flowtype: Require exact type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_require-indexer-name",
    "title": "Flowtype: Require indexer name",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_require-inexact-type",
    "title": "Flowtype: Require inexact type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_require-parameter-type",
    "title": "Flowtype: Require parameter type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_require-readonly-react-props",
    "title": "Flowtype: Require readonly react props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_require-return-type",
    "title": "Flowtype: Require return type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_require-types-at-top",
    "title": "Flowtype: Require types at top",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_require-valid-file-annotation",
    "title": "Flowtype: Require valid file annotation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_require-variable-type",
    "title": "Flowtype: Require variable type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_semi",
    "title": "Flowtype: Semi",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_sort-keys",
    "title": "Flowtype: Sort keys",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_sort-type-union-intersection-members",
    "title": "Flowtype: Sort type union intersection members",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_space-after-type-colon",
    "title": "Flowtype: Space after type colon",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_space-before-generic-bracket",
    "title": "Flowtype: Space before generic bracket",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_space-before-type-colon",
    "title": "Flowtype: Space before type colon",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_spread-exact-type",
    "title": "Flowtype: Spread exact type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_type-id-match",
    "title": "Flowtype: Type id match",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_type-import-style",
    "title": "Flowtype: Type import style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_union-intersection-spacing",
    "title": "Flowtype: Union intersection spacing",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_use-flow-type",
    "title": "Flowtype: Use flow type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "flowtype_use-read-only-spread",
    "title": "Flowtype: Use read only spread",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-arguments",
    "title": "Fp: No arguments",
    "description": "Forbid the use of `arguments`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-class",
    "title": "Fp: No class",
    "description": "Forbid the use of `class`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-delete",
    "title": "Fp: No delete",
    "description": "Forbid the use of `delete`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-events",
    "title": "Fp: No events",
    "description": "Forbid the use of the `events` module.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-get-set",
    "title": "Fp: No get set",
    "description": "Forbid the use of getters and setters.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-let",
    "title": "Fp: No let",
    "description": "Forbid the use of `let`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-loops",
    "title": "Fp: No loops",
    "description": "Forbid the use of loops.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-mutating-assign",
    "title": "Fp: No mutating assign",
    "description": "Forbid the use of [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) with a variable as first argument.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-mutating-methods",
    "title": "Fp: No mutating methods",
    "description": "Forbid the use of mutating methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-mutation",
    "title": "Fp: No mutation",
    "description": "Forbid the use of mutating operators.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-nil",
    "title": "Fp: No nil",
    "description": "Forbid the use of `null` and `undefined`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-proxy",
    "title": "Fp: No proxy",
    "description": "Forbid the use of `Proxy`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-rest-parameters",
    "title": "Fp: No rest parameters",
    "description": "Forbid the use of rest parameters.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-this",
    "title": "Fp: No this",
    "description": "Forbid the use of `this`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-throw",
    "title": "Fp: No throw",
    "description": "Forbid the use of `throw`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-unused-expression",
    "title": "Fp: No unused expression",
    "description": "Enforce that an expression gets used.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "fp_no-valueof-field",
    "title": "Fp: No valueof field",
    "description": "Forbid the creation of `valueOf` fields.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "functional_no-classes",
    "title": "Functional: No classes",
    "description": "Disallow classes.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "functional_no-loop-statements",
    "title": "Functional: No loop statements",
    "description": "Disallow imperative loops.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "functional_no-promise-reject",
    "title": "Functional: No promise reject",
    "description": "Disallow rejecting promises.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "functional_no-this-expressions",
    "title": "Functional: No this expressions",
    "description": "Disallow this access.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreIfReadonlyWrapped",
        "description": "ignoreIfReadonlyWrapped"
      }
    ],
    "patternId": "functional_prefer-property-signatures",
    "title": "Functional: Prefer property signatures",
    "description": "Prefer property signatures over method signatures.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "functional_prefer-tacit",
    "title": "Functional: Prefer tacit",
    "description": "Replaces `x => f(x)` with just `f`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "functional_readonly-type",
    "title": "Functional: Readonly type",
    "description": "Require consistently using either `readonly` keywords or `Readonly<T>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "i18next_no-literal-string",
    "title": "I18next: No literal string",
    "description": "Disallow literal string",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "caseSensitiveStrict",
        "description": "caseSensitiveStrict"
      }
    ],
    "patternId": "import_no-unresolved",
    "title": "Import: No unresolved",
    "description": "Ensure imports point to a file/module that can be resolved.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_named",
    "title": "Import: Named",
    "description": "Ensure named imports correspond to a named export in the remote file.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_default",
    "title": "Import: Default",
    "description": "Ensure a default export is present, given a default import.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowComputed",
        "description": "allowComputed"
      }
    ],
    "patternId": "import_namespace",
    "title": "Import: Namespace",
    "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-namespace",
    "title": "Import: No namespace",
    "description": "Forbid namespace (a.k.a. \"wildcard\" `*`) imports.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_export",
    "title": "Import: Export",
    "description": "Forbid any invalid exports, i.e. re-export of the same name.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-mutable-exports",
    "title": "Import: No mutable exports",
    "description": "Forbid the use of mutable exports with `var` or `let`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_extensions",
    "title": "Import: Extensions",
    "description": "Ensure consistent use of file extension within the import path.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-restricted-paths",
    "title": "Import: No restricted paths",
    "description": "Enforce which files can be imported in a given folder.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-internal-modules",
    "title": "Import: No internal modules",
    "description": "Forbid importing the submodules of other modules.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_group-exports",
    "title": "Import: Group exports",
    "description": "Prefer named exports to be grouped together in a single export declaration",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-relative-packages",
    "title": "Import: No relative packages",
    "description": "Forbid importing packages through relative paths.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-relative-parent-imports",
    "title": "Import: No relative parent imports",
    "description": "Forbid importing modules from parent directories.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_consistent-type-specifier-style",
    "title": "Import: Consistent type specifier style",
    "description": "Enforce or ban the use of inline type-only markers for named imports.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-self-import",
    "title": "Import: No self import",
    "description": "Forbid a module from importing itself.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreExternal",
        "description": "ignoreExternal"
      },
      {
        "name": "allowUnsafeDynamicCyclicDependency",
        "description": "allowUnsafeDynamicCyclicDependency"
      }
    ],
    "patternId": "import_no-cycle",
    "title": "Import: No cycle",
    "description": "Forbid a module from importing a module with a dependency path back to itself.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-named-default",
    "title": "Import: No named default",
    "description": "Forbid named default exports.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-named-as-default",
    "title": "Import: No named as default",
    "description": "Forbid use of exported name as identifier of default export.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-named-as-default-member",
    "title": "Import: No named as default member",
    "description": "Forbid use of exported name as property of default export.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-anonymous-default-export",
    "title": "Import: No anonymous default export",
    "description": "Forbid anonymous values as default exports.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-unused-modules",
    "title": "Import: No unused modules",
    "description": "Forbid modules without exports, or exports without matching import in another module.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-commonjs",
    "title": "Import: No commonjs",
    "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-amd",
    "title": "Import: No amd",
    "description": "Forbid AMD `require` and `define` calls.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-duplicates",
    "title": "Import: No duplicates",
    "description": "Forbid repeated import of the same module in multiple places.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_first",
    "title": "Import: First",
    "description": "Ensure all imports appear before other statements.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_max-dependencies",
    "title": "Import: Max dependencies",
    "description": "Enforce the maximum number of dependencies a module can have.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-extraneous-dependencies",
    "title": "Import: No extraneous dependencies",
    "description": "Forbid the use of extraneous packages.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-absolute-path",
    "title": "Import: No absolute path",
    "description": "Forbid import of modules using absolute paths.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-nodejs-modules",
    "title": "Import: No nodejs modules",
    "description": "Forbid Node.js builtin modules.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-webpack-loader-syntax",
    "title": "Import: No webpack loader syntax",
    "description": "Forbid webpack loader syntax in imports.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "distinctGroup",
        "description": "distinctGroup"
      },
      {
        "name": "warnOnUnassignedImports",
        "description": "warnOnUnassignedImports"
      }
    ],
    "patternId": "import_order",
    "title": "Import: Order",
    "description": "Enforce a convention in module import order.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_newline-after-import",
    "title": "Import: Newline after import",
    "description": "Enforce a newline after import statements.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "target",
        "description": "target"
      }
    ],
    "patternId": "import_prefer-default-export",
    "title": "Import: Prefer default export",
    "description": "Prefer a default export if module exports a single name or multiple names.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-default-export",
    "title": "Import: No default export",
    "description": "Forbid default exports.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-named-export",
    "title": "Import: No named export",
    "description": "Forbid named exports.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-dynamic-require",
    "title": "Import: No dynamic require",
    "description": "Forbid `require()` calls with expressions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_unambiguous",
    "title": "Import: Unambiguous",
    "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-unassigned-import",
    "title": "Import: No unassigned import",
    "description": "Forbid unassigned imports",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-useless-path-segments",
    "title": "Import: No useless path segments",
    "description": "Forbid unnecessary path segments in import and require statements.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_dynamic-import-chunkname",
    "title": "Import: Dynamic import chunkname",
    "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-import-module-exports",
    "title": "Import: No import module exports",
    "description": "Forbid import statements with CommonJS module.exports.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-empty-named-blocks",
    "title": "Import: No empty named blocks",
    "description": "Forbid empty named import blocks.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_exports-last",
    "title": "Import: Exports last",
    "description": "Ensure all exports appear after other statements.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import_no-deprecated",
    "title": "Import: No deprecated",
    "description": "Forbid imported names marked with `@deprecated` documentation tag.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import-alias_import-alias",
    "title": "Import alias: Import alias",
    "description": "Restrict imports to path aliases or relative imports limited by a depth",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "import-newlines_enforce",
    "title": "Import newlines: Enforce",
    "description": "Enforce multiple lines for import statements past a certain number of items",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_expect-matcher",
    "title": "Jasmine: Expect matcher",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_expect-single-argument",
    "title": "Jasmine: Expect single argument",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_named-spy",
    "title": "Jasmine: Named spy",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-focused-tests",
    "title": "Jasmine: No focused tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-disabled-tests",
    "title": "Jasmine: No disabled tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-describe-variables",
    "title": "Jasmine: No describe variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-suite-dupes",
    "title": "Jasmine: No suite dupes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-spec-dupes",
    "title": "Jasmine: No spec dupes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_missing-expect",
    "title": "Jasmine: Missing expect",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-suite-callback-args",
    "title": "Jasmine: No suite callback args",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_valid-expect",
    "title": "Jasmine: Valid expect",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-assign-spyon",
    "title": "Jasmine: No assign spyon",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-unsafe-spy",
    "title": "Jasmine: No unsafe spy",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-global-setup",
    "title": "Jasmine: No global setup",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-pending-tests",
    "title": "Jasmine: No pending tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-promise-without-done-fail",
    "title": "Jasmine: No promise without done fail",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_no-expect-in-setup-teardown",
    "title": "Jasmine: No expect in setup teardown",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_new-line-between-declarations",
    "title": "Jasmine: New line between declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_new-line-before-expect",
    "title": "Jasmine: New line before expect",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_prefer-jasmine-matcher",
    "title": "Jasmine: Prefer jasmine matcher",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_prefer-promise-strategies",
    "title": "Jasmine: Prefer promise strategies",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_prefer-toHaveBeenCalledWith",
    "title": "Jasmine: Prefer toHaveBeenCalledWith",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jasmine_prefer-toBeUndefined",
    "title": "Jasmine: Prefer toBeUndefined",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_consistent-test-it",
    "title": "Jest: Consistent test it",
    "description": "Enforce `test` and `it` usage conventions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_expect-expect",
    "title": "Jest: Expect expect",
    "description": "Enforce assertion to be made in a test body",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_max-expects",
    "title": "Jest: Max expects",
    "description": "Enforces a maximum number assertion calls in a test body",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_max-nested-describe",
    "title": "Jest: Max nested describe",
    "description": "Enforces a maximum depth to nested describe calls",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-alias-methods",
    "title": "Jest: No alias methods",
    "description": "Disallow alias methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-commented-out-tests",
    "title": "Jest: No commented out tests",
    "description": "Disallow commented out tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-conditional-expect",
    "title": "Jest: No conditional expect",
    "description": "Disallow calling `expect` conditionally",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-conditional-in-test",
    "title": "Jest: No conditional in test",
    "description": "Disallow conditional logic in tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-confusing-set-timeout",
    "title": "Jest: No confusing set timeout",
    "description": "Disallow confusing usages of jest.setTimeout",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-deprecated-functions",
    "title": "Jest: No deprecated functions",
    "description": "Disallow use of deprecated functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-disabled-tests",
    "title": "Jest: No disabled tests",
    "description": "Disallow disabled tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-done-callback",
    "title": "Jest: No done callback",
    "description": "Disallow using a callback in asynchronous tests and hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-duplicate-hooks",
    "title": "Jest: No duplicate hooks",
    "description": "Disallow duplicate setup and teardown hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-export",
    "title": "Jest: No export",
    "description": "Disallow using `exports` in files containing tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-focused-tests",
    "title": "Jest: No focused tests",
    "description": "Disallow focused tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-hooks",
    "title": "Jest: No hooks",
    "description": "Disallow setup and teardown hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-identical-title",
    "title": "Jest: No identical title",
    "description": "Disallow identical titles",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-interpolation-in-snapshots",
    "title": "Jest: No interpolation in snapshots",
    "description": "Disallow string interpolation inside snapshots",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-jasmine-globals",
    "title": "Jest: No jasmine globals",
    "description": "Disallow Jasmine globals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-large-snapshots",
    "title": "Jest: No large snapshots",
    "description": "Disallow large snapshots",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-mocks-import",
    "title": "Jest: No mocks import",
    "description": "Disallow manually importing from `__mocks__`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-restricted-jest-methods",
    "title": "Jest: No restricted jest methods",
    "description": "Disallow specific `jest.` methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-restricted-matchers",
    "title": "Jest: No restricted matchers",
    "description": "Disallow specific matchers & modifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-standalone-expect",
    "title": "Jest: No standalone expect",
    "description": "Disallow using `expect` outside of `it` or `test` blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-test-prefixes",
    "title": "Jest: No test prefixes",
    "description": "Require using `.only` and `.skip` over `f` and `x`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-test-return-statement",
    "title": "Jest: No test return statement",
    "description": "Disallow explicitly returning from tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_no-untyped-mock-factory",
    "title": "Jest: No untyped mock factory",
    "description": "Disallow using `jest.mock()` factories without an explicit type parameter",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-called-with",
    "title": "Jest: Prefer called with",
    "description": "Suggest using `toBeCalledWith()` or `toHaveBeenCalledWith()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-comparison-matcher",
    "title": "Jest: Prefer comparison matcher",
    "description": "Suggest using the built-in comparison matchers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-each",
    "title": "Jest: Prefer each",
    "description": "Prefer using `.each` rather than manual loops",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-equality-matcher",
    "title": "Jest: Prefer equality matcher",
    "description": "Suggest using the built-in equality matchers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-expect-assertions",
    "title": "Jest: Prefer expect assertions",
    "description": "Suggest using `expect.assertions()` OR `expect.hasAssertions()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-expect-resolves",
    "title": "Jest: Prefer expect resolves",
    "description": "Prefer `await expect(...).resolves` over `expect(await ...)` syntax",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-hooks-in-order",
    "title": "Jest: Prefer hooks in order",
    "description": "Prefer having hooks in a consistent order",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-hooks-on-top",
    "title": "Jest: Prefer hooks on top",
    "description": "Suggest having hooks before any test cases",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-importing-jest-globals",
    "title": "Jest: Prefer importing jest globals",
    "description": "Prefer importing Jest globals",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreTopLevelDescribe",
        "description": "ignoreTopLevelDescribe"
      }
    ],
    "patternId": "jest_prefer-lowercase-title",
    "title": "Jest: Prefer lowercase title",
    "description": "Enforce lowercase test names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-mock-promise-shorthand",
    "title": "Jest: Prefer mock promise shorthand",
    "description": "Prefer mock resolved/rejected shorthands for promises",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-snapshot-hint",
    "title": "Jest: Prefer snapshot hint",
    "description": "Prefer including a hint with external snapshots",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-spy-on",
    "title": "Jest: Prefer spy on",
    "description": "Suggest using `jest.spyOn()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-strict-equal",
    "title": "Jest: Prefer strict equal",
    "description": "Suggest using `toStrictEqual()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-to-be",
    "title": "Jest: Prefer to be",
    "description": "Suggest using `toBe()` for primitive literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-to-contain",
    "title": "Jest: Prefer to contain",
    "description": "Suggest using `toContain()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-to-have-length",
    "title": "Jest: Prefer to have length",
    "description": "Suggest using `toHaveLength()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_prefer-todo",
    "title": "Jest: Prefer todo",
    "description": "Suggest using `test.todo`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_require-hook",
    "title": "Jest: Require hook",
    "description": "Require setup and teardown code to be within a hook",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_require-to-throw-message",
    "title": "Jest: Require to throw message",
    "description": "Require a message for `toThrow()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_require-top-level-describe",
    "title": "Jest: Require top level describe",
    "description": "Require test cases and hooks to be inside a `describe` block",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_unbound-method",
    "title": "Jest: Unbound method",
    "description": "Enforce unbound methods are called with their expected scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_valid-describe-callback",
    "title": "Jest: Valid describe callback",
    "description": "Enforce valid `describe()` callback",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest_valid-expect-in-promise",
    "title": "Jest: Valid expect in promise",
    "description": "Require promises that have expectations in their chain to be valid",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "alwaysAwait",
        "description": "alwaysAwait"
      }
    ],
    "patternId": "jest_valid-expect",
    "title": "Jest: Valid expect",
    "description": "Enforce valid `expect()` usage",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreSpaces",
        "description": "ignoreSpaces"
      },
      {
        "name": "ignoreTypeOfDescribeName",
        "description": "ignoreTypeOfDescribeName"
      },
      {
        "name": "ignoreTypeOfTestName",
        "description": "ignoreTypeOfTestName"
      }
    ],
    "patternId": "jest_valid-title",
    "title": "Jest: Valid title",
    "description": "Enforce valid titles",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-checked",
    "title": "Jest dom: Prefer checked",
    "description": "Prefer toBeChecked over checking attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-empty",
    "title": "Jest dom: Prefer empty",
    "description": "Prefer toBeEmpty over checking innerHTML",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-enabled-disabled",
    "title": "Jest dom: Prefer enabled disabled",
    "description": "Prefer toBeDisabled or toBeEnabled over checking attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-focus",
    "title": "Jest dom: Prefer focus",
    "description": "Prefer toHaveFocus over checking document.activeElement",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-in-document",
    "title": "Jest dom: Prefer in document",
    "description": "Prefer .toBeInTheDocument() for asserting the existence of a DOM node",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-required",
    "title": "Jest dom: Prefer required",
    "description": "Prefer toBeRequired over checking properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-to-have-attribute",
    "title": "Jest dom: Prefer to have attribute",
    "description": "Prefer toHaveAttribute over checking  getAttribute/hasAttribute ",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-to-have-class",
    "title": "Jest dom: Prefer to have class",
    "description": "Prefer toHaveClass over checking element className",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-to-have-style",
    "title": "Jest dom: Prefer to have style",
    "description": "Prefer toHaveStyle over checking element style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-to-have-text-content",
    "title": "Jest dom: Prefer to have text content",
    "description": "Prefer toHaveTextContent over checking element.textContent",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-dom_prefer-to-have-value",
    "title": "Jest dom: Prefer to have value",
    "description": "Prefer toHaveValue over checking element.value",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-extended_prefer-to-be-array",
    "title": "Jest extended: Prefer to be array",
    "description": "Suggest using `toBeArray()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-extended_prefer-to-be-false",
    "title": "Jest extended: Prefer to be false",
    "description": "Suggest using `toBeFalse()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-extended_prefer-to-be-object",
    "title": "Jest extended: Prefer to be object",
    "description": "Suggest using `toBeObject()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-extended_prefer-to-be-true",
    "title": "Jest extended: Prefer to be true",
    "description": "Suggest using `toBeTrue()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-extended_prefer-to-have-been-called-once",
    "title": "Jest extended: Prefer to have been called once",
    "description": "Suggest using `toHaveBeenCalledOnce()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-formatting_padding-around-after-all-blocks",
    "title": "Jest formatting: Padding around after all blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-formatting_padding-around-after-each-blocks",
    "title": "Jest formatting: Padding around after each blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-formatting_padding-around-before-all-blocks",
    "title": "Jest formatting: Padding around before all blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-formatting_padding-around-before-each-blocks",
    "title": "Jest formatting: Padding around before each blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-formatting_padding-around-describe-blocks",
    "title": "Jest formatting: Padding around describe blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-formatting_padding-around-expect-groups",
    "title": "Jest formatting: Padding around expect groups",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-formatting_padding-around-test-blocks",
    "title": "Jest formatting: Padding around test blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jest-formatting_padding-around-all",
    "title": "Jest formatting: Padding around all",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jira-ticket-todo-comment_jira-ticket-todo-comment",
    "title": "Jira ticket todo comment: Jira ticket todo comment",
    "description": "Checks TODO comments and informs about missing Jira ticket mentions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_check-access",
    "title": "Jsdoc: Check access",
    "description": "Checks that `@access` tags have a valid value.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_check-alignment",
    "title": "Jsdoc: Check alignment",
    "description": "Reports invalid alignment of JSDoc block asterisks.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowInlineConfig",
        "description": "allowInlineConfig"
      },
      {
        "name": "captionRequired",
        "description": "captionRequired"
      },
      {
        "name": "checkDefaults",
        "description": "checkDefaults"
      },
      {
        "name": "checkEslintrc",
        "description": "checkEslintrc"
      },
      {
        "name": "checkParams",
        "description": "checkParams"
      },
      {
        "name": "checkProperties",
        "description": "checkProperties"
      },
      {
        "name": "noDefaultExampleRules",
        "description": "noDefaultExampleRules"
      },
      {
        "name": "paddedIndent",
        "description": "paddedIndent"
      },
      {
        "name": "reportUnusedDisableDirectives",
        "description": "reportUnusedDisableDirectives"
      }
    ],
    "patternId": "jsdoc_check-examples",
    "title": "Jsdoc: Check examples",
    "description": "Ensures that (JavaScript) examples within JSDoc adhere to ESLint rules.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_check-indentation",
    "title": "Jsdoc: Check indentation",
    "description": "Reports invalid padding inside JSDoc blocks.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "preserveMainDescriptionPostDelimiter",
        "description": "preserveMainDescriptionPostDelimiter"
      }
    ],
    "patternId": "jsdoc_check-line-alignment",
    "title": "Jsdoc: Check line alignment",
    "description": "Reports invalid alignment of JSDoc block lines.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_check-param-names",
    "title": "Jsdoc: Check param names",
    "description": "Ensures that parameter names in JSDoc match those in the function declaration.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_check-property-names",
    "title": "Jsdoc: Check property names",
    "description": "Ensures that property names in JSDoc are not duplicated on the same block and that nested properties have defined roots.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_check-syntax",
    "title": "Jsdoc: Check syntax",
    "description": "Reports against syntax not valid for the mode (e.g., Google Closure Compiler in non-Closure mode).",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_check-tag-names",
    "title": "Jsdoc: Check tag names",
    "description": "Reports invalid block tag names.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_check-types",
    "title": "Jsdoc: Check types",
    "description": "Reports invalid types.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_check-values",
    "title": "Jsdoc: Check values",
    "description": "This rule checks the values for a handful of tags: `@version`, `@since`, `@license` and `@author`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_empty-tags",
    "title": "Jsdoc: Empty tags",
    "description": "Expects specific tags to be empty of any content.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_implements-on-classes",
    "title": "Jsdoc: Implements on classes",
    "description": "Reports an issue with any non-constructor function using `@implements`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_imports-as-dependencies",
    "title": "Jsdoc: Imports as dependencies",
    "description": "Reports if JSDoc `import()` statements point to a package which is not listed in `dependencies` or `devDependencies`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_informative-docs",
    "title": "Jsdoc: Informative docs",
    "description": "This rule reports doc comments that only restate their attached name.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_match-description",
    "title": "Jsdoc: Match description",
    "description": "Enforces a regular expression pattern on descriptions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_match-name",
    "title": "Jsdoc: Match name",
    "description": "Reports the name portion of a JSDoc tag if matching or not matching a given regular expression.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_multiline-blocks",
    "title": "Jsdoc: Multiline blocks",
    "description": "Controls how and whether jsdoc blocks can be expressed as single or multiple line blocks.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_no-bad-blocks",
    "title": "Jsdoc: No bad blocks",
    "description": "This rule checks for multi-line-style comments which fail to meet the criteria of a jsdoc block.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_no-blank-block-descriptions",
    "title": "Jsdoc: No blank block descriptions",
    "description": "Detects and removes extra lines of a blank block description",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_no-blank-blocks",
    "title": "Jsdoc: No blank blocks",
    "description": "Removes empty blocks with nothing but possibly line breaks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_no-defaults",
    "title": "Jsdoc: No defaults",
    "description": "This rule reports defaults being used on the relevant portion of `@param` or `@default`.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "contexts",
        "description": "contexts"
      }
    ],
    "patternId": "jsdoc_no-missing-syntax",
    "title": "Jsdoc: No missing syntax",
    "description": "Reports when certain comment structures are always expected.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_no-multi-asterisks",
    "title": "Jsdoc: No multi asterisks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_no-restricted-syntax",
    "title": "Jsdoc: No restricted syntax",
    "description": "Reports when certain comment structures are present.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_no-types",
    "title": "Jsdoc: No types",
    "description": "This rule reports types being used on `@param` or `@returns`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_no-undefined-types",
    "title": "Jsdoc: No undefined types",
    "description": "Checks that types in jsdoc comments are defined.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-asterisk-prefix",
    "title": "Jsdoc: Require asterisk prefix",
    "description": "Requires that each JSDoc line starts with an `*`.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkConstructors",
        "description": "checkConstructors"
      },
      {
        "name": "checkGetters",
        "description": "checkGetters"
      },
      {
        "name": "checkSetters",
        "description": "checkSetters"
      }
    ],
    "patternId": "jsdoc_require-description",
    "title": "Jsdoc: Require description",
    "description": "Requires that all functions have a description.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-description-complete-sentence",
    "title": "Jsdoc: Require description complete sentence",
    "description": "Requires that block description, explicit `@description`, and `@param`/`@returns` tag descriptions are written in complete sentences.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkConstructors",
        "description": "checkConstructors"
      },
      {
        "name": "checkGetters",
        "description": "checkGetters"
      },
      {
        "name": "checkSetters",
        "description": "checkSetters"
      },
      {
        "name": "enableFixer",
        "description": "enableFixer"
      },
      {
        "name": "exemptNoArguments",
        "description": "exemptNoArguments"
      }
    ],
    "patternId": "jsdoc_require-example",
    "title": "Jsdoc: Require example",
    "description": "Requires that all functions have examples.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-file-overview",
    "title": "Jsdoc: Require file overview",
    "description": "Checks that all files have one `@file`, `@fileoverview`, or `@overview` tag at the beginning of the file.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-hyphen-before-param-description",
    "title": "Jsdoc: Require hyphen before param description",
    "description": "Requires a hyphen before the `@param` description.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkConstructors",
        "description": "checkConstructors"
      },
      {
        "name": "checkGetters",
        "description": "checkGetters"
      },
      {
        "name": "checkSetters",
        "description": "checkSetters"
      },
      {
        "name": "enableFixer",
        "description": "enableFixer"
      },
      {
        "name": "exemptEmptyConstructors",
        "description": "exemptEmptyConstructors"
      },
      {
        "name": "exemptEmptyFunctions",
        "description": "exemptEmptyFunctions"
      },
      {
        "name": "fixerMessage",
        "description": "fixerMessage"
      },
      {
        "name": "require",
        "description": "require"
      }
    ],
    "patternId": "jsdoc_require-jsdoc",
    "title": "Jsdoc: Require jsdoc",
    "description": "Require JSDoc comments",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "autoIncrementBase",
        "description": "autoIncrementBase"
      },
      {
        "name": "checkConstructors",
        "description": "checkConstructors"
      },
      {
        "name": "checkDestructured",
        "description": "checkDestructured"
      },
      {
        "name": "checkDestructuredRoots",
        "description": "checkDestructuredRoots"
      },
      {
        "name": "checkGetters",
        "description": "checkGetters"
      },
      {
        "name": "checkRestProperty",
        "description": "checkRestProperty"
      },
      {
        "name": "checkSetters",
        "description": "checkSetters"
      }
    ],
    "patternId": "jsdoc_require-param",
    "title": "Jsdoc: Require param",
    "description": "Requires that all function parameters are documented.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-param-description",
    "title": "Jsdoc: Require param description",
    "description": "Requires that each `@param` tag has a `description` value.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-param-name",
    "title": "Jsdoc: Require param name",
    "description": "Requires that all function parameters have names.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-param-type",
    "title": "Jsdoc: Require param type",
    "description": "Requires that each `@param` tag has a `type` value.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-property",
    "title": "Jsdoc: Require property",
    "description": "Requires that all `@typedef` and `@namespace` tags have `@property` when their type is a plain `object`, `Object`, or `PlainObject`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-property-description",
    "title": "Jsdoc: Require property description",
    "description": "Requires that each `@property` tag has a `description` value.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-property-name",
    "title": "Jsdoc: Require property name",
    "description": "Requires that all function `@property` tags have names.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-property-type",
    "title": "Jsdoc: Require property type",
    "description": "Requires that each `@property` tag has a `type` value.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkConstructors",
        "description": "checkConstructors"
      },
      {
        "name": "checkGetters",
        "description": "checkGetters"
      },
      {
        "name": "forceRequireReturn",
        "description": "forceRequireReturn"
      },
      {
        "name": "forceReturnsWithAsync",
        "description": "forceReturnsWithAsync"
      }
    ],
    "patternId": "jsdoc_require-returns",
    "title": "Jsdoc: Require returns",
    "description": "Requires that returns are documented.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "exemptAsync",
        "description": "exemptAsync"
      },
      {
        "name": "reportMissingReturnForUndefinedTypes",
        "description": "reportMissingReturnForUndefinedTypes"
      }
    ],
    "patternId": "jsdoc_require-returns-check",
    "title": "Jsdoc: Require returns check",
    "description": "Requires a return statement in function body if a `@returns` tag is specified in jsdoc comment.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-returns-description",
    "title": "Jsdoc: Require returns description",
    "description": "Requires that the `@returns` tag has a `description` value.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-returns-type",
    "title": "Jsdoc: Require returns type",
    "description": "Requires that `@returns` tag has `type` value.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_require-throws",
    "title": "Jsdoc: Require throws",
    "description": "Requires that throw statements are documented.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "forceRequireNext",
        "description": "forceRequireNext"
      },
      {
        "name": "forceRequireYields",
        "description": "forceRequireYields"
      },
      {
        "name": "next",
        "description": "next"
      },
      {
        "name": "nextWithGeneratorTag",
        "description": "nextWithGeneratorTag"
      },
      {
        "name": "withGeneratorTag",
        "description": "withGeneratorTag"
      }
    ],
    "patternId": "jsdoc_require-yields",
    "title": "Jsdoc: Require yields",
    "description": "Requires yields are documented.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkGeneratorsOnly",
        "description": "checkGeneratorsOnly"
      },
      {
        "name": "next",
        "description": "next"
      }
    ],
    "patternId": "jsdoc_require-yields-check",
    "title": "Jsdoc: Require yields check",
    "description": "Requires a yield statement in function body if a `@yields` tag is specified in jsdoc comment.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_sort-tags",
    "title": "Jsdoc: Sort tags",
    "description": "Sorts tags by a specified sequence according to tag name.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_tag-lines",
    "title": "Jsdoc: Tag lines",
    "description": "Enforces lines (or no lines) between tags.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsdoc_text-escaping",
    "title": "Jsdoc: Text escaping",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowEmptyNamepaths",
        "description": "allowEmptyNamepaths"
      }
    ],
    "patternId": "jsdoc_valid-types",
    "title": "Jsdoc: Valid types",
    "description": "Requires all types to be valid JSDoc or Closure compiler types without syntax errors.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_*",
    "title": "Json: *",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_json",
    "title": "Json: Json",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_unknown",
    "title": "Json: Unknown",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_comment-not-permitted",
    "title": "Json: Comment not permitted",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_undefined",
    "title": "Json: Undefined",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_enum-value-mismatch",
    "title": "Json: Enum value mismatch",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_unexpected-end-of-comment",
    "title": "Json: Unexpected end of comment",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_unexpected-end-of-string",
    "title": "Json: Unexpected end of string",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_unexpected-end-of-number",
    "title": "Json: Unexpected end of number",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_invalid-unicode",
    "title": "Json: Invalid unicode",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_invalid-escape-character",
    "title": "Json: Invalid escape character",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_invalid-character",
    "title": "Json: Invalid character",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_property-expected",
    "title": "Json: Property expected",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_comma-expected",
    "title": "Json: Comma expected",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_colon-expected",
    "title": "Json: Colon expected",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_value-expected",
    "title": "Json: Value expected",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_comma-or-close-backet-expected",
    "title": "Json: Comma or close backet expected",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_comma-or-close-brace-expected",
    "title": "Json: Comma or close brace expected",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_trailing-comma",
    "title": "Json: Trailing comma",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_duplicate-key",
    "title": "Json: Duplicate key",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "json_schema-resolve-error",
    "title": "Json: Schema resolve error",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_array-bracket-newline",
    "title": "Jsonc: Array bracket newline",
    "description": "Enforce line breaks after opening and before closing array brackets",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_array-bracket-spacing",
    "title": "Jsonc: Array bracket spacing",
    "description": "Disallow or enforce spaces inside of brackets",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_array-element-newline",
    "title": "Jsonc: Array element newline",
    "description": "Enforce line breaks between array elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_auto",
    "title": "Jsonc: Auto",
    "description": "Apply jsonc rules similar to your configured ESLint core rules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_comma-dangle",
    "title": "Jsonc: Comma dangle",
    "description": "Require or disallow trailing commas",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_comma-style",
    "title": "Jsonc: Comma style",
    "description": "Enforce consistent comma style",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "SwitchCase",
        "description": "SwitchCase"
      },
      {
        "name": "flatTernaryExpressions",
        "description": "flatTernaryExpressions"
      },
      {
        "name": "offsetTernaryExpressions",
        "description": "offsetTernaryExpressions"
      },
      {
        "name": "ignoreComments",
        "description": "ignoreComments"
      }
    ],
    "patternId": "jsonc_indent",
    "title": "Jsonc: Indent",
    "description": "Enforce consistent indentation",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "camelCase",
        "description": "camelCase"
      },
      {
        "name": "PascalCase",
        "description": "PascalCase"
      },
      {
        "name": "SCREAMING_SNAKE_CASE",
        "description": "SCREAMING_SNAKE_CASE"
      },
      {
        "name": "kebab-case",
        "description": "kebab-case"
      },
      {
        "name": "snake_case",
        "description": "snake_case"
      }
    ],
    "patternId": "jsonc_key-name-casing",
    "title": "Jsonc: Key name casing",
    "description": "Enforce naming convention to property key names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_key-spacing",
    "title": "Jsonc: Key spacing",
    "description": "Enforce consistent spacing between keys and values in object literal properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-bigint-literals",
    "title": "Jsonc: No bigint literals",
    "description": "Disallow BigInt literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-binary-expression",
    "title": "Jsonc: No binary expression",
    "description": "Disallow binary expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-binary-numeric-literals",
    "title": "Jsonc: No binary numeric literals",
    "description": "Disallow binary numeric literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-comments",
    "title": "Jsonc: No comments",
    "description": "Disallow comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-dupe-keys",
    "title": "Jsonc: No dupe keys",
    "description": "Disallow duplicate keys in object literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-escape-sequence-in-identifier",
    "title": "Jsonc: No escape sequence in identifier",
    "description": "Disallow escape sequences in identifiers.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-floating-decimal",
    "title": "Jsonc: No floating decimal",
    "description": "Disallow leading or trailing decimal points in numeric literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-hexadecimal-numeric-literals",
    "title": "Jsonc: No hexadecimal numeric literals",
    "description": "Disallow hexadecimal numeric literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-infinity",
    "title": "Jsonc: No infinity",
    "description": "Disallow Infinity",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "skipComments",
        "description": "skipComments"
      },
      {
        "name": "skipStrings",
        "description": "skipStrings"
      },
      {
        "name": "skipTemplates",
        "description": "skipTemplates"
      },
      {
        "name": "skipRegExps",
        "description": "skipRegExps"
      },
      {
        "name": "skipJSXText",
        "description": "skipJSXText"
      }
    ],
    "patternId": "jsonc_no-irregular-whitespace",
    "title": "Jsonc: No irregular whitespace",
    "description": "Disallow irregular whitespace",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-multi-str",
    "title": "Jsonc: No multi str",
    "description": "Disallow multiline strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-nan",
    "title": "Jsonc: No nan",
    "description": "Disallow NaN",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-number-props",
    "title": "Jsonc: No number props",
    "description": "Disallow number property keys",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-numeric-separators",
    "title": "Jsonc: No numeric separators",
    "description": "Disallow numeric separators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-octal-escape",
    "title": "Jsonc: No octal escape",
    "description": "Disallow octal escape sequences in string literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-octal-numeric-literals",
    "title": "Jsonc: No octal numeric literals",
    "description": "Disallow octal numeric literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-octal",
    "title": "Jsonc: No octal",
    "description": "Disallow legacy octal literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-parenthesized",
    "title": "Jsonc: No parenthesized",
    "description": "Disallow parentheses around the expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-plus-sign",
    "title": "Jsonc: No plus sign",
    "description": "Disallow plus sign",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-regexp-literals",
    "title": "Jsonc: No regexp literals",
    "description": "Disallow RegExp literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-sparse-arrays",
    "title": "Jsonc: No sparse arrays",
    "description": "Disallow sparse arrays",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-template-literals",
    "title": "Jsonc: No template literals",
    "description": "Disallow template literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-undefined-value",
    "title": "Jsonc: No undefined value",
    "description": "Disallow `undefined`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-unicode-codepoint-escapes",
    "title": "Jsonc: No unicode codepoint escapes",
    "description": "Disallow Unicode code point escape sequences.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_no-useless-escape",
    "title": "Jsonc: No useless escape",
    "description": "Disallow unnecessary escape usage",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_object-curly-newline",
    "title": "Jsonc: Object curly newline",
    "description": "Enforce consistent line breaks inside braces",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_object-curly-spacing",
    "title": "Jsonc: Object curly spacing",
    "description": "Enforce consistent spacing inside braces",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowAllPropertiesOnSameLine",
        "description": "allowAllPropertiesOnSameLine"
      },
      {
        "name": "allowMultiplePropertiesPerLine",
        "description": "allowMultiplePropertiesPerLine"
      }
    ],
    "patternId": "jsonc_object-property-newline",
    "title": "Jsonc: Object property newline",
    "description": "Enforce placing object properties on separate lines",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_quote-props",
    "title": "Jsonc: Quote props",
    "description": "Require quotes around object literal property names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_quotes",
    "title": "Jsonc: Quotes",
    "description": "Enforce use of double or single quotes",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "pathPattern",
        "description": "pathPattern"
      },
      {
        "name": "order",
        "description": "order"
      }
    ],
    "patternId": "jsonc_sort-array-values",
    "title": "Jsonc: Sort array values",
    "description": "Require array values to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_sort-keys",
    "title": "Jsonc: Sort keys",
    "description": "Require object keys to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "words",
        "description": "words"
      },
      {
        "name": "nonwords",
        "description": "nonwords"
      }
    ],
    "patternId": "jsonc_space-unary-ops",
    "title": "Jsonc: Space unary ops",
    "description": "Disallow spaces after unary operators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_valid-json-number",
    "title": "Jsonc: Valid json number",
    "description": "Disallow invalid number for JSON",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsonc_vue-custom-block_no-parsing-error",
    "title": "Jsonc: [Vue custom block] No parsing error",
    "description": "Disallow parsing errors in Vue custom blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx_uses-factory",
    "title": "Jsx: Uses factory",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx_factory-in-scope",
    "title": "Jsx: Factory in scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx_mark-used-vars",
    "title": "Jsx: Mark used vars",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx_no-undef",
    "title": "Jsx: No undef",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_alt-text",
    "title": "Jsx a11y: Alt text",
    "description": "Enforce all elements that require alternative text have meaningful information to relay back to end user.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_anchor-ambiguous-text",
    "title": "Jsx a11y: Anchor ambiguous text",
    "description": "Enforce `<a>` text to not exactly match \"click here\", \"here\", \"link\", or \"a link\".",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_anchor-has-content",
    "title": "Jsx a11y: Anchor has content",
    "description": "Enforce all anchors to contain accessible content.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_anchor-is-valid",
    "title": "Jsx a11y: Anchor is valid",
    "description": "Enforce all anchors are valid, navigable elements.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_aria-activedescendant-has-tabindex",
    "title": "Jsx a11y: Aria activedescendant has tabindex",
    "description": "Enforce elements with aria-activedescendant are tabbable.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_aria-props",
    "title": "Jsx a11y: Aria props",
    "description": "Enforce all `aria-*` props are valid.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_aria-proptypes",
    "title": "Jsx a11y: Aria proptypes",
    "description": "Enforce ARIA state and property values are valid.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreNonDOM",
        "description": "ignoreNonDOM"
      }
    ],
    "patternId": "jsx-a11y_aria-role",
    "title": "Jsx a11y: Aria role",
    "description": "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_aria-unsupported-elements",
    "title": "Jsx a11y: Aria unsupported elements",
    "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_autocomplete-valid",
    "title": "Jsx a11y: Autocomplete valid",
    "description": "Enforce that autocomplete attributes are used correctly.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_click-events-have-key-events",
    "title": "Jsx a11y: Click events have key events",
    "description": "Enforce a clickable non-interactive element has at least one keyboard event listener.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_control-has-associated-label",
    "title": "Jsx a11y: Control has associated label",
    "description": "Enforce that a control (an interactive element) has a text label.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_heading-has-content",
    "title": "Jsx a11y: Heading has content",
    "description": "Enforce heading (`h1`, `h2`, etc) elements contain accessible content.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_html-has-lang",
    "title": "Jsx a11y: Html has lang",
    "description": "Enforce `<html>` element has `lang` prop.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_iframe-has-title",
    "title": "Jsx a11y: Iframe has title",
    "description": "Enforce iframe elements have a title attribute.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_img-redundant-alt",
    "title": "Jsx a11y: Img redundant alt",
    "description": "Enforce `<img>` alt prop does not contain the word \"image\", \"picture\", or \"photo\".",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_interactive-supports-focus",
    "title": "Jsx a11y: Interactive supports focus",
    "description": "Enforce that elements with interactive handlers like `onClick` must be focusable.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_label-has-associated-control",
    "title": "Jsx a11y: Label has associated control",
    "description": "Enforce that a `label` tag has a text label and an associated control.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_lang",
    "title": "Jsx a11y: Lang",
    "description": "Enforce lang attribute has a valid value.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_media-has-caption",
    "title": "Jsx a11y: Media has caption",
    "description": "Enforces that `<audio>` and `<video>` elements must have a `<track>` for captions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_mouse-events-have-key-events",
    "title": "Jsx a11y: Mouse events have key events",
    "description": "Enforce that `onMouseOver`/`onMouseOut` are accompanied by `onFocus`/`onBlur` for keyboard-only users.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_no-access-key",
    "title": "Jsx a11y: No access key",
    "description": "Enforce that the `accessKey` prop is not used on any element to avoid complications with keyboard commands used by a screenreader.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_no-aria-hidden-on-focusable",
    "title": "Jsx a11y: No aria hidden on focusable",
    "description": "Disallow `aria-hidden=\"true\"` from being set on focusable elements.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreNonDOM",
        "description": "ignoreNonDOM"
      }
    ],
    "patternId": "jsx-a11y_no-autofocus",
    "title": "Jsx a11y: No autofocus",
    "description": "Enforce autoFocus prop is not used.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_no-distracting-elements",
    "title": "Jsx a11y: No distracting elements",
    "description": "Enforce distracting elements are not used.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_no-interactive-element-to-noninteractive-role",
    "title": "Jsx a11y: No interactive element to noninteractive role",
    "description": "Interactive elements should not be assigned non-interactive roles.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_no-noninteractive-element-interactions",
    "title": "Jsx a11y: No noninteractive element interactions",
    "description": "Non-interactive elements should not be assigned mouse or keyboard event listeners.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_no-noninteractive-element-to-interactive-role",
    "title": "Jsx a11y: No noninteractive element to interactive role",
    "description": "Non-interactive elements should not be assigned interactive roles.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_no-noninteractive-tabindex",
    "title": "Jsx a11y: No noninteractive tabindex",
    "description": "`tabIndex` should only be declared on interactive elements.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_no-redundant-roles",
    "title": "Jsx a11y: No redundant roles",
    "description": "Enforce explicit role property is not the same as implicit/default role property on element.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_no-static-element-interactions",
    "title": "Jsx a11y: No static element interactions",
    "description": "Enforce that non-interactive, visible elements (such as `<div>`) that have click handlers use the role attribute.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_prefer-tag-over-role",
    "title": "Jsx a11y: Prefer tag over role",
    "description": "Enforces using semantic DOM elements over the ARIA `role` property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_role-has-required-aria-props",
    "title": "Jsx a11y: Role has required aria props",
    "description": "Enforce that elements with ARIA roles must have all required attributes for that role.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_role-supports-aria-props",
    "title": "Jsx a11y: Role supports aria props",
    "description": "Enforce that elements with explicit or implicit roles defined contain only `aria-*` properties supported by that `role`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_scope",
    "title": "Jsx a11y: Scope",
    "description": "Enforce `scope` prop is only used on `<th>` elements.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "jsx-a11y_tabindex-no-positive",
    "title": "Jsx a11y: Tabindex no positive",
    "description": "Enforce `tabIndex` value is not greater than zero.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_attribute-names",
    "title": "Lit: Attribute names",
    "description": "Enforces attribute naming conventions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_attribute-value-entities",
    "title": "Lit: Attribute value entities",
    "description": "Disallows unencoded HTML entities in attribute values",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_ban-attributes",
    "title": "Lit: Ban attributes",
    "description": "Disallows a set of attributes from being used in templates",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_binding-positions",
    "title": "Lit: Binding positions",
    "description": "Disallows invalid binding positions in templates",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_lifecycle-super",
    "title": "Lit: Lifecycle super",
    "description": "Enforces calling `super` in lifecycle methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-classfield-shadowing",
    "title": "Lit: No classfield shadowing",
    "description": "Disallows properties shadowed as class fields",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-duplicate-template-bindings",
    "title": "Lit: No duplicate template bindings",
    "description": "Disallows duplicate names in template bindings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-invalid-escape-sequences",
    "title": "Lit: No invalid escape sequences",
    "description": "Disallows invalid escape sequences in template strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-invalid-html",
    "title": "Lit: No invalid html",
    "description": "Disallows invalid HTML in templates",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-legacy-imports",
    "title": "Lit: No legacy imports",
    "description": "Detects usages of legacy lit imports",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-legacy-template-syntax",
    "title": "Lit: No legacy template syntax",
    "description": "Detects usages of legacy binding syntax",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-native-attributes",
    "title": "Lit: No native attributes",
    "description": "Disallows use of native attributes as properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-private-properties",
    "title": "Lit: No private properties",
    "description": "Disallows usages of \"non-public\" property bindings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-property-change-update",
    "title": "Lit: No property change update",
    "description": "Disallows property changes in the `update` lifecycle method",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-template-arrow",
    "title": "Lit: No template arrow",
    "description": "Disallows arrow functions in templates",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-template-bind",
    "title": "Lit: No template bind",
    "description": "Disallows `.bind` in templates",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-template-map",
    "title": "Lit: No template map",
    "description": "Disallows array `.map` in templates",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-this-assign-in-render",
    "title": "Lit: No this assign in render",
    "description": "Disallows assignments to members of `this` in render methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-useless-template-literals",
    "title": "Lit: No useless template literals",
    "description": "Disallows redundant literal values in templates",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_no-value-attribute",
    "title": "Lit: No value attribute",
    "description": "Detects usages of the `value` attribute where the equivalent property should be used instead",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_prefer-nothing",
    "title": "Lit: Prefer nothing",
    "description": "Enforces use of `nothing` constant over empty templates",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_prefer-static-styles",
    "title": "Lit: Prefer static styles",
    "description": "Enforces the use of static styles in elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_quoted-expressions",
    "title": "Lit: Quoted expressions",
    "description": "Enforces the presence or absence of quotes around expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lit_value-after-constraints",
    "title": "Lit: Value after constraints",
    "description": "Enforces that `value` is bound on an input after constraints",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_callback-binding",
    "title": "Lodash: Callback binding",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_chain-style",
    "title": "Lodash: Chain style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_chaining",
    "title": "Lodash: Chaining",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_collection-method-value",
    "title": "Lodash: Collection method value",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_collection-ordering",
    "title": "Lodash: Collection ordering",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_collection-return",
    "title": "Lodash: Collection return",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_consistent-compose",
    "title": "Lodash: Consistent compose",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_identity-shorthand",
    "title": "Lodash: Identity shorthand",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_import-scope",
    "title": "Lodash: Import scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_matches-prop-shorthand",
    "title": "Lodash: Matches prop shorthand",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_matches-shorthand",
    "title": "Lodash: Matches shorthand",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_no-commit",
    "title": "Lodash: No commit",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_no-double-unwrap",
    "title": "Lodash: No double unwrap",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_no-extra-args",
    "title": "Lodash: No extra args",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_no-unbound-this",
    "title": "Lodash: No unbound this",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_path-style",
    "title": "Lodash: Path style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-compact",
    "title": "Lodash: Prefer compact",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-constant",
    "title": "Lodash: Prefer constant",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-filter",
    "title": "Lodash: Prefer filter",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-find",
    "title": "Lodash: Prefer find",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-flat-map",
    "title": "Lodash: Prefer flat map",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-get",
    "title": "Lodash: Prefer get",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-immutable-method",
    "title": "Lodash: Prefer immutable method",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-includes",
    "title": "Lodash: Prefer includes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-invoke-map",
    "title": "Lodash: Prefer invoke map",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-is-nil",
    "title": "Lodash: Prefer is nil",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-lodash-chain",
    "title": "Lodash: Prefer lodash chain",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-lodash-method",
    "title": "Lodash: Prefer lodash method",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-lodash-typecheck",
    "title": "Lodash: Prefer lodash typecheck",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-map",
    "title": "Lodash: Prefer map",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-matches",
    "title": "Lodash: Prefer matches",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-noop",
    "title": "Lodash: Prefer noop",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-over-quantifier",
    "title": "Lodash: Prefer over quantifier",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-reject",
    "title": "Lodash: Prefer reject",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-some",
    "title": "Lodash: Prefer some",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-startswith",
    "title": "Lodash: Prefer startswith",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-thru",
    "title": "Lodash: Prefer thru",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-times",
    "title": "Lodash: Prefer times",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prefer-wrapper-method",
    "title": "Lodash: Prefer wrapper method",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_preferred-alias",
    "title": "Lodash: Preferred alias",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_prop-shorthand",
    "title": "Lodash: Prop shorthand",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash_unwrap",
    "title": "Lodash: Unwrap",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_consistent-compose",
    "title": "Lodash fp: Consistent compose",
    "description": "Enforce a consistent composition method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_consistent-name",
    "title": "Lodash fp: Consistent name",
    "description": "Enforce a consistent name for Lodash.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-argumentless-calls",
    "title": "Lodash fp: No argumentless calls",
    "description": "Forbid argument-less calls of Lodash methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-chain",
    "title": "Lodash fp: No chain",
    "description": "Forbid the use of [`_.chain`](https://lodash.com/docs#chain)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-extraneous-args",
    "title": "Lodash fp: No extraneous args",
    "description": "No extraneous arguments to methods with a fixed arity.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-extraneous-function-wrapping",
    "title": "Lodash fp: No extraneous function wrapping",
    "description": "Avoid unnecessary function wrapping.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-extraneous-iteratee-args",
    "title": "Lodash fp: No extraneous iteratee args",
    "description": "No extraneous parameters in iteratees.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-extraneous-partials",
    "title": "Lodash fp: No extraneous partials",
    "description": "No extraneous partials in method calls.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-for-each",
    "title": "Lodash fp: No for each",
    "description": " Forbid the use of [`_.forEach`](https://lodash.com/docs#forEach)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-partial-of-curried",
    "title": "Lodash fp: No partial of curried",
    "description": "No use of [`_.partial`](https://lodash.com/docs#partial) on curried Lodash methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-single-composition",
    "title": "Lodash fp: No single composition",
    "description": "Enforce at least two methods arguments for composition methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-submodule-destructuring",
    "title": "Lodash fp: No submodule destructuring",
    "description": "Forbid destructuring of Lodash submodules.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_no-unused-result",
    "title": "Lodash fp: No unused result",
    "description": "Enforce that the result of a Lodash method call gets used.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_prefer-compact",
    "title": "Lodash fp: Prefer compact",
    "description": "Prefer [`_.compact`](https://lodash.com/docs#compact) over [`_.filter`](https://lodash.com/docs#filter) with identity function.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_prefer-composition-grouping",
    "title": "Lodash fp: Prefer composition grouping",
    "description": "Prefer grouping similar methods in composition methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_prefer-constant",
    "title": "Lodash fp: Prefer constant",
    "description": "Prefer [`_.constant`](https://lodash.com/docs#constant) over functions returning literals.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_prefer-flat-map",
    "title": "Lodash fp: Prefer flat map",
    "description": "Prefer [`_.flatMap`](https://lodash.com/docs#flatMap) over consecutive [`_.map`](https://lodash.com/docs#map) and [`_.flatten`](https://lodash.com/docs#flatten).",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_prefer-get",
    "title": "Lodash fp: Prefer get",
    "description": "Prefer [`_.get`](https://lodash.com/docs#get) over multiple `&&`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_prefer-identity",
    "title": "Lodash fp: Prefer identity",
    "description": "Prefer [`_.identity`](https://lodash.com/docs#identity) over functions returning their argument.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_preferred-alias",
    "title": "Lodash fp: Preferred alias",
    "description": "Limit the use of aliases.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "lodash-fp_use-fp",
    "title": "Lodash fp: Use fp",
    "description": "Use lodash/fp instead of Lodash.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_audit-argument-checks",
    "title": "Meteor: Audit argument checks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_no-session",
    "title": "Meteor: No session",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_no-template-lifecycle-assignments",
    "title": "Meteor: No template lifecycle assignments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_no-zero-timeout",
    "title": "Meteor: No zero timeout",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_eventmap-params",
    "title": "Meteor: Eventmap params",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_prefix-eventmap-selectors",
    "title": "Meteor: Prefix eventmap selectors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_prefer-session-equals",
    "title": "Meteor: Prefer session equals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_template-names",
    "title": "Meteor: Template names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_scope-dom-lookups",
    "title": "Meteor: Scope dom lookups",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_no-dom-lookup-on-created",
    "title": "Meteor: No dom lookup on created",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "meteor_no-template-parent-data",
    "title": "Meteor: No template parent data",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreSkipped",
        "description": "ignoreSkipped"
      }
    ],
    "patternId": "mocha_handle-done-callback",
    "title": "Mocha: Handle done callback",
    "description": "Enforces handling of callbacks for async tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_max-top-level-suites",
    "title": "Mocha: Max top level suites",
    "description": "Enforce the number of top-level suites in a single file",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-async-describe",
    "title": "Mocha: No async describe",
    "description": "Disallow async functions passed to describe",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-exclusive-tests",
    "title": "Mocha: No exclusive tests",
    "description": "Disallow exclusive tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-exports",
    "title": "Mocha: No exports",
    "description": "Disallow exports from test files",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-global-tests",
    "title": "Mocha: No global tests",
    "description": "Disallow global tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-hooks",
    "title": "Mocha: No hooks",
    "description": "Disallow hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-hooks-for-single-case",
    "title": "Mocha: No hooks for single case",
    "description": "Disallow hooks for a single test or test suite",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-identical-title",
    "title": "Mocha: No identical title",
    "description": "Disallow identical titles",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-mocha-arrows",
    "title": "Mocha: No mocha arrows",
    "description": "Disallow arrow functions as arguments to mocha functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-nested-tests",
    "title": "Mocha: No nested tests",
    "description": "Disallow tests to be nested within other tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-pending-tests",
    "title": "Mocha: No pending tests",
    "description": "Disallow pending tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-return-and-callback",
    "title": "Mocha: No return and callback",
    "description": "Disallow returning in a test or hook function that uses a callback",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-return-from-async",
    "title": "Mocha: No return from async",
    "description": "Disallow returning from an async test or hook",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-setup-in-describe",
    "title": "Mocha: No setup in describe",
    "description": "Disallow setup in describe blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-sibling-hooks",
    "title": "Mocha: No sibling hooks",
    "description": "Disallow duplicate uses of a hook at the same level inside a describe",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-skipped-tests",
    "title": "Mocha: No skipped tests",
    "description": "Disallow skipped tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-synchronous-tests",
    "title": "Mocha: No synchronous tests",
    "description": "Disallow synchronous tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-top-level-hooks",
    "title": "Mocha: No top level hooks",
    "description": "Disallow top-level hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_prefer-arrow-callback",
    "title": "Mocha: Prefer arrow callback",
    "description": "Require using arrow functions for callbacks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_valid-suite-description",
    "title": "Mocha: Valid suite description",
    "description": "Require suite descriptions to match a pre-configured regular expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_valid-test-description",
    "title": "Mocha: Valid test description",
    "description": "Require test descriptions to match a pre-configured regular expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_no-empty-description",
    "title": "Mocha: No empty description",
    "description": "Disallow empty test descriptions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "mocha_consistent-spacing-between-blocks",
    "title": "Mocha: Consistent spacing between blocks",
    "description": "Require consistent spacing between blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "monorepo_no-internal-import",
    "title": "Monorepo: No internal import",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "monorepo_no-relative-import",
    "title": "Monorepo: No relative import",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_callback-return",
    "title": "N: Callback return",
    "description": "Require `return` statements after callbacks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_exports-style",
    "title": "N: Exports style",
    "description": "Enforce either `module.exports` or `exports`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_file-extension-in-import",
    "title": "N: File extension in import",
    "description": "Enforce the style of file extensions in `import` declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_global-require",
    "title": "N: Global require",
    "description": "Require `require()` calls to be placed at top-level module scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_handle-callback-err",
    "title": "N: Handle callback err",
    "description": "Require error handling in callbacks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-callback-literal",
    "title": "N: No callback literal",
    "description": "Enforce Node.js-style error-first callback pattern is followed",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-deprecated-api",
    "title": "N: No deprecated api",
    "description": "Disallow deprecated APIs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-exports-assign",
    "title": "N: No exports assign",
    "description": "Disallow the assignment to `exports`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-extraneous-import",
    "title": "N: No extraneous import",
    "description": "Disallow `import` declarations which import extraneous modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-extraneous-require",
    "title": "N: No extraneous require",
    "description": "Disallow `require()` expressions which import extraneous modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-missing-import",
    "title": "N: No missing import",
    "description": "Disallow `import` declarations which import non-existence modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-missing-require",
    "title": "N: No missing require",
    "description": "Disallow `require()` expressions which import non-existence modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-mixed-requires",
    "title": "N: No mixed requires",
    "description": "Disallow `require` calls to be mixed with regular variable declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-new-require",
    "title": "N: No new require",
    "description": "Disallow `new` operators with calls to `require`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-path-concat",
    "title": "N: No path concat",
    "description": "Disallow string concatenation with `__dirname` and `__filename`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-process-env",
    "title": "N: No process env",
    "description": "Disallow the use of `process.env`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-process-exit",
    "title": "N: No process exit",
    "description": "Disallow the use of `process.exit()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-restricted-import",
    "title": "N: No restricted import",
    "description": "Disallow specified modules when loaded by `import` declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-restricted-require",
    "title": "N: No restricted require",
    "description": "Disallow specified modules when loaded by `require`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowAtRootLevel",
        "description": "allowAtRootLevel"
      }
    ],
    "patternId": "n_no-sync",
    "title": "N: No sync",
    "description": "Disallow synchronous methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-unpublished-bin",
    "title": "N: No unpublished bin",
    "description": "Disallow `bin` files that npm ignores",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreTypeImport",
        "description": "ignoreTypeImport"
      }
    ],
    "patternId": "n_no-unpublished-import",
    "title": "N: No unpublished import",
    "description": "Disallow `import` declarations which import private modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-unpublished-require",
    "title": "N: No unpublished require",
    "description": "Disallow `require()` expressions which import private modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-unsupported-features_es-builtins",
    "title": "N: [No unsupported features] Es builtins",
    "description": "Disallow unsupported ECMAScript built-ins on the specified version",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-unsupported-features_es-syntax",
    "title": "N: [No unsupported features] Es syntax",
    "description": "Disallow unsupported ECMAScript syntax on the specified version",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_no-unsupported-features_node-builtins",
    "title": "N: [No unsupported features] Node builtins",
    "description": "Disallow unsupported Node.js built-in APIs on the specified version",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_prefer-global_buffer",
    "title": "N: [Prefer global] Buffer",
    "description": "Enforce either `Buffer` or `require(\"buffer\").Buffer`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_prefer-global_console",
    "title": "N: [Prefer global] Console",
    "description": "Enforce either `console` or `require(\"console\")`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_prefer-global_process",
    "title": "N: [Prefer global] Process",
    "description": "Enforce either `process` or `require(\"process\")`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_prefer-global_text-decoder",
    "title": "N: [Prefer global] Text decoder",
    "description": "Enforce either `TextDecoder` or `require(\"util\").TextDecoder`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_prefer-global_text-encoder",
    "title": "N: [Prefer global] Text encoder",
    "description": "Enforce either `TextEncoder` or `require(\"util\").TextEncoder`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_prefer-global_url-search-params",
    "title": "N: [Prefer global] Url search params",
    "description": "Enforce either `URLSearchParams` or `require(\"url\").URLSearchParams`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_prefer-global_url",
    "title": "N: [Prefer global] Url",
    "description": "Enforce either `URL` or `require(\"url\").URL`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_prefer-node-protocol",
    "title": "N: Prefer node protocol",
    "description": "Enforce using the `node:` protocol when importing Node.js builtin modules.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_prefer-promises_dns",
    "title": "N: [Prefer promises] Dns",
    "description": "Enforce `require(\"dns\").promises`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_prefer-promises_fs",
    "title": "N: [Prefer promises] Fs",
    "description": "Enforce `require(\"fs\").promises`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_process-exit-as-throw",
    "title": "N: Process exit as throw",
    "description": "Require that `process.exit()` expressions use the same code path as `throw`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "n_hashbang",
    "title": "N: Hashbang",
    "description": "Require correct usage of hashbang",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "block",
        "description": "block"
      },
      {
        "name": "focus",
        "description": "focus"
      },
      {
        "name": "fix",
        "description": "fix"
      }
    ],
    "patternId": "no-only-tests_no-only-tests",
    "title": "No only tests: No only tests",
    "description": "Disallow .only blocks in tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unsanitized_property",
    "title": "No unsanitized: Property",
    "description": "ESLint rule to disallow unsanitized property assignment",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "no-unsanitized_method",
    "title": "No unsanitized: Method",
    "description": "ESLint rule to disallow unsanitized method calls",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "nuxt_no-env-in-context",
    "title": "Nuxt: No env in context",
    "description": "Disallow `context.isServer/context.isClient` in `asyncData/fetch/nuxtServerInit`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "nuxt_no-env-in-hooks",
    "title": "Nuxt: No env in hooks",
    "description": "Disallow process.server and process.client in the following lifecycle hooks: beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy and destroyed",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "nuxt_no-globals-in-created",
    "title": "Nuxt: No globals in created",
    "description": "Disallow `window/document` in `created/beforeCreate`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "nuxt_no-this-in-fetch-data",
    "title": "Nuxt: No this in fetch data",
    "description": "Disallow `this` in `asyncData/fetch`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "nuxt_no-timing-in-fetch-data",
    "title": "Nuxt: No timing in fetch data",
    "description": "Disallow `setTimeout/setInterval` in `asyncData/fetch`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "nuxt_no-cjs-in-config",
    "title": "Nuxt: No cjs in config",
    "description": "Disallow commonjs module api `require/modules.exports/exports` in `nuxt.config.js`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "nuxt_require-func-head",
    "title": "Nuxt: Require func head",
    "description": "Enforce component's head property to be a function",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      },
      {
        "name": "spread-last",
        "description": "spread-last"
      }
    ],
    "patternId": "perfectionist_sort-array-includes",
    "title": "Perfectionist: Sort array includes",
    "description": "Enforce sorted arrays before include method",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      }
    ],
    "patternId": "perfectionist_sort-astro-attributes",
    "title": "Perfectionist: Sort astro attributes",
    "description": "Enforce sorted Astro attributes",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "groups",
        "description": "groups"
      }
    ],
    "patternId": "perfectionist_sort-classes",
    "title": "Perfectionist: Sort classes",
    "description": "Enforce sorted classes",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "partition-by-comment",
        "description": "partition-by-comment"
      },
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      },
      {
        "name": "order",
        "description": "order"
      }
    ],
    "patternId": "perfectionist_sort-enums",
    "title": "Perfectionist: Sort enums",
    "description": "Enforce sorted TypeScript enums",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      }
    ],
    "patternId": "perfectionist_sort-exports",
    "title": "Perfectionist: Sort exports",
    "description": "Enforce sorted exports",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      },
      {
        "name": "groups",
        "description": "groups"
      },
      {
        "name": "newlines-between",
        "description": "newlines-between"
      }
    ],
    "patternId": "perfectionist_sort-imports",
    "title": "Perfectionist: Sort imports",
    "description": "Enforce sorted imports",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "optionality-order",
        "description": "optionality-order"
      },
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      },
      {
        "name": "groups",
        "description": "groups"
      },
      {
        "name": "partition-by-new-line",
        "description": "partition-by-new-line"
      }
    ],
    "patternId": "perfectionist_sort-interfaces",
    "title": "Perfectionist: Sort interfaces",
    "description": "Enforce sorted interface properties",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      }
    ],
    "patternId": "perfectionist_sort-jsx-props",
    "title": "Perfectionist: Sort jsx props",
    "description": "Enforce sorted JSX props",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      }
    ],
    "patternId": "perfectionist_sort-maps",
    "title": "Perfectionist: Sort maps",
    "description": "Enforce sorted Map elements",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      },
      {
        "name": "group-kind",
        "description": "group-kind"
      }
    ],
    "patternId": "perfectionist_sort-named-exports",
    "title": "Perfectionist: Sort named exports",
    "description": "Enforce sorted named exports",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      },
      {
        "name": "ignore-alias",
        "description": "ignore-alias"
      },
      {
        "name": "group-kind",
        "description": "group-kind"
      }
    ],
    "patternId": "perfectionist_sort-named-imports",
    "title": "Perfectionist: Sort named imports",
    "description": "Enforce sorted named imports",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      },
      {
        "name": "groups",
        "description": "groups"
      },
      {
        "name": "partition-by-new-line",
        "description": "partition-by-new-line"
      }
    ],
    "patternId": "perfectionist_sort-object-types",
    "title": "Perfectionist: Sort object types",
    "description": "Enforce sorted object types",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "partition-by-comment",
        "description": "partition-by-comment"
      },
      {
        "name": "partition-by-new-line",
        "description": "partition-by-new-line"
      },
      {
        "name": "styled-components",
        "description": "styled-components"
      },
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      }
    ],
    "patternId": "perfectionist_sort-objects",
    "title": "Perfectionist: Sort objects",
    "description": "Enforce sorted objects",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      }
    ],
    "patternId": "perfectionist_sort-svelte-attributes",
    "title": "Perfectionist: Sort svelte attributes",
    "description": "Enforce sorted Svelte attributes",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      }
    ],
    "patternId": "perfectionist_sort-intersection-types",
    "title": "Perfectionist: Sort intersection types",
    "description": "Enforce sorted intersection types",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      },
      {
        "name": "nullable-last",
        "description": "nullable-last"
      }
    ],
    "patternId": "perfectionist_sort-union-types",
    "title": "Perfectionist: Sort union types",
    "description": "Enforce sorted union types",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "type",
        "description": "type"
      },
      {
        "name": "order",
        "description": "order"
      },
      {
        "name": "ignore-case",
        "description": "ignore-case"
      },
      {
        "name": "groups",
        "description": "groups"
      }
    ],
    "patternId": "perfectionist_sort-vue-attributes",
    "title": "Perfectionist: Sort vue attributes",
    "description": "Enforce sorted Vue attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_expect-expect",
    "title": "Playwright: Expect expect",
    "description": "Enforce assertion to be made in a test body",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_max-expects",
    "title": "Playwright: Max expects",
    "description": "Enforces a maximum number assertion calls in a test body",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_max-nested-describe",
    "title": "Playwright: Max nested describe",
    "description": "Enforces a maximum depth to nested describe calls",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_missing-playwright-await",
    "title": "Playwright: Missing playwright await",
    "description": "Identify false positives when async Playwright APIs are not properly awaited.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-commented-out-tests",
    "title": "Playwright: No commented out tests",
    "description": "Disallow commented out tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-conditional-expect",
    "title": "Playwright: No conditional expect",
    "description": "Disallow calling `expect` conditionally",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-conditional-in-test",
    "title": "Playwright: No conditional in test",
    "description": "Disallow conditional logic in tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-duplicate-hooks",
    "title": "Playwright: No duplicate hooks",
    "description": "Disallow duplicate setup and teardown hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-element-handle",
    "title": "Playwright: No element handle",
    "description": "The use of ElementHandle is discouraged, use Locator instead",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-eval",
    "title": "Playwright: No eval",
    "description": "The use of `page.$eval` and `page.$$eval` are discouraged, use `locator.evaluate` or `locator.evaluateAll` instead",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-focused-test",
    "title": "Playwright: No focused test",
    "description": "Prevent usage of `.only()` focus test annotation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-force-option",
    "title": "Playwright: No force option",
    "description": "Prevent usage of `{ force: true }` option.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-get-by-title",
    "title": "Playwright: No get by title",
    "description": "Disallows the usage of getByTitle()",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-hooks",
    "title": "Playwright: No hooks",
    "description": "Disallow setup and teardown hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-nested-step",
    "title": "Playwright: No nested step",
    "description": "Disallow nested `test.step()` methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-networkidle",
    "title": "Playwright: No networkidle",
    "description": "Prevent usage of the networkidle option",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-nth-methods",
    "title": "Playwright: No nth methods",
    "description": "Disallow usage of nth methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-page-pause",
    "title": "Playwright: No page pause",
    "description": "Prevent usage of page.pause()",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-raw-locators",
    "title": "Playwright: No raw locators",
    "description": "Disallows the usage of raw locators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-restricted-matchers",
    "title": "Playwright: No restricted matchers",
    "description": "Disallow specific matchers & modifiers",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowConditional",
        "description": "allowConditional"
      }
    ],
    "patternId": "playwright_no-skipped-test",
    "title": "Playwright: No skipped test",
    "description": "Prevent usage of the `.skip()` skip test annotation.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-standalone-expect",
    "title": "Playwright: No standalone expect",
    "description": "Disallow using `expect` outside of `test` blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-unsafe-references",
    "title": "Playwright: No unsafe references",
    "description": "Prevent unsafe variable references in page.evaluate()",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-useless-await",
    "title": "Playwright: No useless await",
    "description": "Disallow unnecessary awaits for Playwright methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-useless-not",
    "title": "Playwright: No useless not",
    "description": "Disallow usage of 'not' matchers when a more specific matcher exists",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-wait-for-selector",
    "title": "Playwright: No wait for selector",
    "description": "Prevent usage of page.waitForSelector()",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_no-wait-for-timeout",
    "title": "Playwright: No wait for timeout",
    "description": "Prevent usage of page.waitForTimeout()",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_prefer-comparison-matcher",
    "title": "Playwright: Prefer comparison matcher",
    "description": "Suggest using the built-in comparison matchers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_prefer-equality-matcher",
    "title": "Playwright: Prefer equality matcher",
    "description": "Suggest using the built-in equality matchers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_prefer-hooks-in-order",
    "title": "Playwright: Prefer hooks in order",
    "description": "Prefer having hooks in a consistent order",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_prefer-hooks-on-top",
    "title": "Playwright: Prefer hooks on top",
    "description": "Suggest having hooks before any test cases",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreTopLevelDescribe",
        "description": "ignoreTopLevelDescribe"
      }
    ],
    "patternId": "playwright_prefer-lowercase-title",
    "title": "Playwright: Prefer lowercase title",
    "description": "Enforce lowercase test names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_prefer-strict-equal",
    "title": "Playwright: Prefer strict equal",
    "description": "Suggest using `toStrictEqual()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_prefer-to-be",
    "title": "Playwright: Prefer to be",
    "description": "Suggest using `toBe()` for primitive literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_prefer-to-contain",
    "title": "Playwright: Prefer to contain",
    "description": "Suggest using toContain()",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_prefer-to-have-count",
    "title": "Playwright: Prefer to have count",
    "description": "Suggest using `toHaveCount()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_prefer-to-have-length",
    "title": "Playwright: Prefer to have length",
    "description": "Suggest using `toHaveLength()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_prefer-web-first-assertions",
    "title": "Playwright: Prefer web first assertions",
    "description": "Prefer web first assertions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_require-hook",
    "title": "Playwright: Require hook",
    "description": "Require setup and teardown code to be within a hook",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_require-soft-assertions",
    "title": "Playwright: Require soft assertions",
    "description": "Require all assertions to use `expect.soft`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_require-to-throw-message",
    "title": "Playwright: Require to throw message",
    "description": "Require a message for `toThrow()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_require-top-level-describe",
    "title": "Playwright: Require top level describe",
    "description": "Require test cases and hooks to be inside a `test.describe` block",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_valid-describe-callback",
    "title": "Playwright: Valid describe callback",
    "description": "Enforce valid `describe()` callback",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_valid-expect",
    "title": "Playwright: Valid expect",
    "description": "Enforce valid `expect()` usage",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "playwright_valid-expect-in-promise",
    "title": "Playwright: Valid expect in promise",
    "description": "Require promises that have expectations in their chain to be valid",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreSpaces",
        "description": "ignoreSpaces"
      },
      {
        "name": "ignoreTypeOfDescribeName",
        "description": "ignoreTypeOfDescribeName"
      },
      {
        "name": "ignoreTypeOfTestName",
        "description": "ignoreTypeOfTestName"
      }
    ],
    "patternId": "playwright_valid-title",
    "title": "Playwright: Valid title",
    "description": "Enforce valid titles",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-arrow_prefer-arrow-functions",
    "title": "Prefer arrow: Prefer arrow functions",
    "description": "Prefer arrow functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prefer-object-spread_prefer-object-spread",
    "title": "Prefer object spread: Prefer object spread",
    "description": "Use a spread property instead of Object.assign().",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prettier_prettier",
    "title": "Prettier: Prettier",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "prettier-vue_prettier",
    "title": "Prettier vue: Prettier",
    "description": "Make your code prettier",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_param-names",
    "title": "Promise: Param names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_no-return-wrap",
    "title": "Promise: No return wrap",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_always-return",
    "title": "Promise: Always return",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_catch-or-return",
    "title": "Promise: Catch or return",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_prefer-await-to-callbacks",
    "title": "Promise: Prefer await to callbacks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_prefer-await-to-then",
    "title": "Promise: Prefer await to then",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_no-native",
    "title": "Promise: No native",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_no-callback-in-promise",
    "title": "Promise: No callback in promise",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_no-promise-in-callback",
    "title": "Promise: No promise in callback",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_no-nesting",
    "title": "Promise: No nesting",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_avoid-new",
    "title": "Promise: Avoid new",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_no-new-statics",
    "title": "Promise: No new statics",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_no-return-in-finally",
    "title": "Promise: No return in finally",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_valid-params",
    "title": "Promise: Valid params",
    "description": "Ensures the proper number of arguments are passed to Promise functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "promise_no-multiple-resolved",
    "title": "Promise: No multiple resolved",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_always-simplification",
    "title": "Ramda: Always simplification",
    "description": "Detects cases where `always` is redundant",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_any-pass-simplification",
    "title": "Ramda: Any pass simplification",
    "description": "Detects when `anyPass` with complements can be replaced by complement of `allPass`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_both-simplification",
    "title": "Ramda: Both simplification",
    "description": "`both` simplifications, like replacing negation by `either`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_complement-simplification",
    "title": "Ramda: Complement simplification",
    "description": "`complement` simplifications, like when the negation should be replaced by an assertion",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_compose-pipe-style",
    "title": "Ramda: Compose pipe style",
    "description": "Enforces `compose` for single line expression and `pipe` for multiline",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_compose-simplification",
    "title": "Ramda: Compose simplification",
    "description": "Detects when there are better functions that behave the same as `compose`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_cond-simplification",
    "title": "Ramda: Cond simplification",
    "description": "`cond` simplification, like suggesting ifElse when too few parameters",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_either-simplification",
    "title": "Ramda: Either simplification",
    "description": "`either` simplifications, like replacing negation by `both`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_eq-by-simplification",
    "title": "Ramda: Eq by simplification",
    "description": "Detects when `eqBy(prop(_))` can be replaced by `eqProps(_)`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_filter-simplification",
    "title": "Ramda: Filter simplification",
    "description": "`filter` simplifications, like `filter(complement(_))` to `reject(_)`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_if-else-simplification",
    "title": "Ramda: If else simplification",
    "description": "`ifElse` simplifications, like replacing by `when` or `unless`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_map-simplification",
    "title": "Ramda: Map simplification",
    "description": "`map` simplifications, like `map(prop(_))` to `pluck(_)`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_merge-simplification",
    "title": "Ramda: Merge simplification",
    "description": "`merge` simplifications, like suggesting assoc for one element",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_no-redundant-and",
    "title": "Ramda: No redundant and",
    "description": "Forbid using `and` in full call",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_no-redundant-not",
    "title": "Ramda: No redundant not",
    "description": "Forbid using `not` in call",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_no-redundant-or",
    "title": "Ramda: No redundant or",
    "description": "Forbid using `or` in full call",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_pipe-simplification",
    "title": "Ramda: Pipe simplification",
    "description": "Detects when there are better functions that behave the same as `pipe`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_prefer-both-either",
    "title": "Ramda: Prefer both either",
    "description": "Enforces using `both`/`either` instead of `allPass`/`anyPass` with a list of only two predicates",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_prefer-complement",
    "title": "Ramda: Prefer complement",
    "description": "Enforces using `complement` instead of compositions using `not`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_prefer-ramda-boolean",
    "title": "Ramda: Prefer ramda boolean",
    "description": "Suggests using Ramda T and F functions instead of explicit versions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_prop-satisfies-simplification",
    "title": "Ramda: Prop satisfies simplification",
    "description": "`propSatisfies` simplifications, like `propSatisfies(equals(_))` to `propEq(_)`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_reduce-simplification",
    "title": "Ramda: Reduce simplification",
    "description": "`reduce` simplifications, like `reduce(add)` to `sum`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_reject-simplification",
    "title": "Ramda: Reject simplification",
    "description": "`reject` simplifications, like `reject(complement(_))` to `filter(_)`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_set-simplification",
    "title": "Ramda: Set simplification",
    "description": "`set` simplifications, like `set(lensProp(_))` to `assoc(_)`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_unless-simplification",
    "title": "Ramda: Unless simplification",
    "description": "`unless` simplifications, like `unless(complement(_))` to `when(_)`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "ramda_when-simplification",
    "title": "Ramda: When simplification",
    "description": "`when` simplifications, like `when(complement(_))` to `unless(_)`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "rule",
        "description": "rule"
      },
      {
        "name": "validateNested",
        "description": "validateNested"
      }
    ],
    "patternId": "react_boolean-prop-naming",
    "title": "React: Boolean prop naming",
    "description": "Enforces consistent naming for boolean props",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "button",
        "description": "button"
      },
      {
        "name": "submit",
        "description": "submit"
      },
      {
        "name": "reset",
        "description": "reset"
      }
    ],
    "patternId": "react_button-has-type",
    "title": "React: Button has type",
    "description": "Disallow usage of `button` elements without an explicit `type` attribute",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_checked-requires-onchange-or-readonly",
    "title": "React: Checked requires onchange or readonly",
    "description": "Enforce using `onChange` or `readonly` attribute when `checked` is used",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowRequiredDefaults",
        "description": "allowRequiredDefaults"
      }
    ],
    "patternId": "react_default-props-match-prop-types",
    "title": "React: Default props match prop types",
    "description": "Enforce all defaultProps have a corresponding non-required PropType",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_destructuring-assignment",
    "title": "React: Destructuring assignment",
    "description": "Enforce consistent usage of destructuring assignment of props, state, and context",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreTranspilerName",
        "description": "ignoreTranspilerName"
      }
    ],
    "patternId": "react_display-name",
    "title": "React: Display name",
    "description": "Disallow missing displayName in a React component definition",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_forbid-component-props",
    "title": "React: Forbid component props",
    "description": "Disallow certain props on components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_forbid-dom-props",
    "title": "React: Forbid dom props",
    "description": "Disallow certain props on DOM Nodes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_forbid-elements",
    "title": "React: Forbid elements",
    "description": "Disallow certain elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_forbid-foreign-prop-types",
    "title": "React: Forbid foreign prop types",
    "description": "Disallow using another component's propTypes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_forbid-prop-types",
    "title": "React: Forbid prop types",
    "description": "Disallow certain propTypes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_function-component-definition",
    "title": "React: Function component definition",
    "description": "Enforce a specific function type for function components",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowDestructuredState",
        "description": "allowDestructuredState"
      }
    ],
    "patternId": "react_hook-use-state",
    "title": "React: Hook use state",
    "description": "Ensure destructuring and symmetric naming of useState hook value and setter variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_iframe-missing-sandbox",
    "title": "React: Iframe missing sandbox",
    "description": "Enforce sandbox attribute on iframe elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-boolean-value",
    "title": "React: Jsx boolean value",
    "description": "Enforce boolean attributes notation in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-child-element-spacing",
    "title": "React: Jsx child element spacing",
    "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-closing-bracket-location",
    "title": "React: Jsx closing bracket location",
    "description": "Enforce closing bracket location in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-closing-tag-location",
    "title": "React: Jsx closing tag location",
    "description": "Enforce closing tag location for multiline JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-curly-spacing",
    "title": "React: Jsx curly spacing",
    "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-curly-newline",
    "title": "React: Jsx curly newline",
    "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-equals-spacing",
    "title": "React: Jsx equals spacing",
    "description": "Enforce or disallow spaces around equal signs in JSX attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-filename-extension",
    "title": "React: Jsx filename extension",
    "description": "Disallow file extensions that may contain JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-first-prop-new-line",
    "title": "React: Jsx first prop new line",
    "description": "Enforce proper position of the first property in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-handler-names",
    "title": "React: Jsx handler names",
    "description": "Enforce event handler naming conventions in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-indent",
    "title": "React: Jsx indent",
    "description": "Enforce JSX indentation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-indent-props",
    "title": "React: Jsx indent props",
    "description": "Enforce props indentation in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkFragmentShorthand",
        "description": "checkFragmentShorthand"
      },
      {
        "name": "checkKeyMustBeforeSpread",
        "description": "checkKeyMustBeforeSpread"
      },
      {
        "name": "warnOnDuplicates",
        "description": "warnOnDuplicates"
      }
    ],
    "patternId": "react_jsx-key",
    "title": "React: Jsx key",
    "description": "Disallow missing `key` props in iterators/collection literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-max-depth",
    "title": "React: Jsx max depth",
    "description": "Enforce JSX maximum depth",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-max-props-per-line",
    "title": "React: Jsx max props per line",
    "description": "Enforce maximum of props on a single line in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "prevent",
        "description": "prevent"
      },
      {
        "name": "allowMultilines",
        "description": "allowMultilines"
      }
    ],
    "patternId": "react_jsx-newline",
    "title": "React: Jsx newline",
    "description": "Require or prevent a new line after jsx elements and expressions.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowArrowFunctions",
        "description": "allowArrowFunctions"
      },
      {
        "name": "allowBind",
        "description": "allowBind"
      },
      {
        "name": "allowFunctions",
        "description": "allowFunctions"
      },
      {
        "name": "ignoreRefs",
        "description": "ignoreRefs"
      },
      {
        "name": "ignoreDOMComponents",
        "description": "ignoreDOMComponents"
      }
    ],
    "patternId": "react_jsx-no-bind",
    "title": "React: Jsx no bind",
    "description": "Disallow `.bind()` or arrow functions in JSX props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-no-comment-textnodes",
    "title": "React: Jsx no comment textnodes",
    "description": "Disallow comments from being inserted as text nodes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-no-constructed-context-values",
    "title": "React: Jsx no constructed context values",
    "description": "Disallows JSX context provider values from taking values that will cause needless rerenders",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-no-duplicate-props",
    "title": "React: Jsx no duplicate props",
    "description": "Disallow duplicate properties in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "validStrategies",
        "description": "validStrategies"
      }
    ],
    "patternId": "react_jsx-no-leaked-render",
    "title": "React: Jsx no leaked render",
    "description": "Disallow problematic leaked values from being rendered",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-no-literals",
    "title": "React: Jsx no literals",
    "description": "Disallow usage of string literals in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-no-script-url",
    "title": "React: Jsx no script url",
    "description": "Disallow usage of `javascript:` URLs",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "links",
        "description": "links"
      },
      {
        "name": "forms",
        "description": "forms"
      }
    ],
    "patternId": "react_jsx-no-target-blank",
    "title": "React: Jsx no target blank",
    "description": "Disallow `target=\"_blank\"` attribute without `rel=\"noreferrer\"`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-no-useless-fragment",
    "title": "React: Jsx no useless fragment",
    "description": "Disallow unnecessary fragments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-one-expression-per-line",
    "title": "React: Jsx one expression per line",
    "description": "Require one JSX element per line",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-no-undef",
    "title": "React: Jsx no undef",
    "description": "Disallow undeclared variables in JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-curly-brace-presence",
    "title": "React: Jsx curly brace presence",
    "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-pascal-case",
    "title": "React: Jsx pascal case",
    "description": "Enforce PascalCase for user-defined JSX components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-fragments",
    "title": "React: Jsx fragments",
    "description": "Enforce shorthand or standard form for React fragments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-props-no-multi-spaces",
    "title": "React: Jsx props no multi spaces",
    "description": "Disallow multiple spaces between inline JSX props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-props-no-spreading",
    "title": "React: Jsx props no spreading",
    "description": "Disallow JSX prop spreading",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "multiline",
        "description": "multiline"
      },
      {
        "name": "locale",
        "description": "locale"
      }
    ],
    "patternId": "react_jsx-sort-props",
    "title": "React: Jsx sort props",
    "description": "Enforce props alphabetical sorting",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-tag-spacing",
    "title": "React: Jsx tag spacing",
    "description": "Enforce whitespace in and around the JSX opening and closing brackets",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-uses-react",
    "title": "React: Jsx uses react",
    "description": "Disallow React to be incorrectly marked as unused",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-uses-vars",
    "title": "React: Jsx uses vars",
    "description": "Disallow variables used in JSX to be incorrectly marked as unused",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_jsx-wrap-multilines",
    "title": "React: Jsx wrap multilines",
    "description": "Disallow missing parentheses around multiline JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-invalid-html-attribute",
    "title": "React: No invalid html attribute",
    "description": "Disallow usage of invalid attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-access-state-in-setstate",
    "title": "React: No access state in setstate",
    "description": "Disallow when this.state is accessed within setState",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-adjacent-inline-elements",
    "title": "React: No adjacent inline elements",
    "description": "Disallow adjacent inline elements not separated by whitespace.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-array-index-key",
    "title": "React: No array index key",
    "description": "Disallow usage of Array index in keys",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-arrow-function-lifecycle",
    "title": "React: No arrow function lifecycle",
    "description": "Lifecycle methods should be methods on the prototype, not class fields",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowFunctions",
        "description": "allowFunctions"
      }
    ],
    "patternId": "react_no-children-prop",
    "title": "React: No children prop",
    "description": "Disallow passing of children as props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-danger",
    "title": "React: No danger",
    "description": "Disallow usage of dangerous JSX properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-danger-with-children",
    "title": "React: No danger with children",
    "description": "Disallow when a DOM element is using both children and dangerouslySetInnerHTML",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-deprecated",
    "title": "React: No deprecated",
    "description": "Disallow usage of deprecated methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-did-mount-set-state",
    "title": "React: No did mount set state",
    "description": "Disallow usage of setState in componentDidMount",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-did-update-set-state",
    "title": "React: No did update set state",
    "description": "Disallow usage of setState in componentDidUpdate",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-direct-mutation-state",
    "title": "React: No direct mutation state",
    "description": "Disallow direct mutation of this.state",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-find-dom-node",
    "title": "React: No find dom node",
    "description": "Disallow usage of findDOMNode",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-is-mounted",
    "title": "React: No is mounted",
    "description": "Disallow usage of isMounted",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreStateless",
        "description": "ignoreStateless"
      }
    ],
    "patternId": "react_no-multi-comp",
    "title": "React: No multi comp",
    "description": "Disallow multiple component definition per file",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-namespace",
    "title": "React: No namespace",
    "description": "Enforce that namespaces are not used in React elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-set-state",
    "title": "React: No set state",
    "description": "Disallow usage of setState",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-string-refs",
    "title": "React: No string refs",
    "description": "Disallow using string references",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-redundant-should-component-update",
    "title": "React: No redundant should component update",
    "description": "Disallow usage of shouldComponentUpdate when extending React.PureComponent",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-render-return-value",
    "title": "React: No render return value",
    "description": "Disallow usage of the return value of ReactDOM.render",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-this-in-sfc",
    "title": "React: No this in sfc",
    "description": "Disallow `this` from being used in stateless functional components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-typos",
    "title": "React: No typos",
    "description": "Disallow common typos",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-unescaped-entities",
    "title": "React: No unescaped entities",
    "description": "Disallow unescaped HTML entities from appearing in markup",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "requireDataLowercase",
        "description": "requireDataLowercase"
      }
    ],
    "patternId": "react_no-unknown-property",
    "title": "React: No unknown property",
    "description": "Disallow usage of unknown DOM property",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkAliases",
        "description": "checkAliases"
      }
    ],
    "patternId": "react_no-unsafe",
    "title": "React: No unsafe",
    "description": "Disallow usage of unsafe lifecycle methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-unstable-nested-components",
    "title": "React: No unstable nested components",
    "description": "Disallow creating unstable components inside components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-unused-class-component-methods",
    "title": "React: No unused class component methods",
    "description": "Disallow declaring unused methods of component class",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-unused-prop-types",
    "title": "React: No unused prop types",
    "description": "Disallow definitions of unused propTypes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-unused-state",
    "title": "React: No unused state",
    "description": "Disallow definitions of unused state",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-object-type-as-default-prop",
    "title": "React: No object type as default prop",
    "description": "Disallow usage of referential-type variables as default param in functional component",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_no-will-update-set-state",
    "title": "React: No will update set state",
    "description": "Disallow usage of setState in componentWillUpdate",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_prefer-es6-class",
    "title": "React: Prefer es6 class",
    "description": "Enforce ES5 or ES6 class for React Components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_prefer-exact-props",
    "title": "React: Prefer exact props",
    "description": "Prefer exact proptype definitions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_prefer-read-only-props",
    "title": "React: Prefer read only props",
    "description": "Enforce that props are read-only",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignorePureComponents",
        "description": "ignorePureComponents"
      }
    ],
    "patternId": "react_prefer-stateless-function",
    "title": "React: Prefer stateless function",
    "description": "Enforce stateless components to be written as a pure function",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_prop-types",
    "title": "React: Prop types",
    "description": "Disallow missing props validation in a React component definition",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_react-in-jsx-scope",
    "title": "React: React in jsx scope",
    "description": "Disallow missing React when using JSX",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_require-default-props",
    "title": "React: Require default props",
    "description": "Enforce a defaultProps definition for every prop that is not a required prop",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_require-optimization",
    "title": "React: Require optimization",
    "description": "Enforce React components to have a shouldComponentUpdate method",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_require-render-return",
    "title": "React: Require render return",
    "description": "Enforce ES5 or ES6 class for returning value in render function",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "component",
        "description": "component"
      },
      {
        "name": "html",
        "description": "html"
      }
    ],
    "patternId": "react_self-closing-comp",
    "title": "React: Self closing comp",
    "description": "Disallow extra closing tags for components without children",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_sort-comp",
    "title": "React: Sort comp",
    "description": "Enforce component methods order",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_sort-default-props",
    "title": "React: Sort default props",
    "description": "Enforce defaultProps declarations alphabetical sorting",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_sort-prop-types",
    "title": "React: Sort prop types",
    "description": "Enforce propTypes declarations alphabetical sorting",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_state-in-constructor",
    "title": "React: State in constructor",
    "description": "Enforce class component state initialization style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_static-property-placement",
    "title": "React: Static property placement",
    "description": "Enforces where React component static properties should be positioned.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_style-prop-object",
    "title": "React: Style prop object",
    "description": "Enforce style prop value is an object",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react_void-dom-elements-no-children",
    "title": "React: Void dom elements no children",
    "description": "Disallow void DOM elements (e.g. `<img />`, `<br />`) from receiving children",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-hooks_rules-of-hooks",
    "title": "React hooks: Rules of hooks",
    "description": "Enforces the Rules of Hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-hooks_exhaustive-deps",
    "title": "React hooks: Exhaustive deps",
    "description": "Verifies the list of dependencies for Hooks like useEffect and similar",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-native_no-unused-styles",
    "title": "React native: No unused styles",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-native_no-inline-styles",
    "title": "React native: No inline styles",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-native_no-color-literals",
    "title": "React native: No color literals",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-native_sort-styles",
    "title": "React native: Sort styles",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-native_split-platform-components",
    "title": "React native: Split platform components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-native_no-raw-text",
    "title": "React native: No raw text",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-native_no-single-element-style-arrays",
    "title": "React native: No single element style arrays",
    "description": "Disallow single element style arrays. These cause unnecessary re-renders as the identity of the array always changes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-perf_jsx-no-new-object-as-prop",
    "title": "React perf: Jsx no new object as prop",
    "description": "Prevent {...} as JSX prop value",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-perf_jsx-no-new-array-as-prop",
    "title": "React perf: Jsx no new array as prop",
    "description": "Prevent [...] as JSX prop value",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-perf_jsx-no-new-function-as-prop",
    "title": "React perf: Jsx no new function as prop",
    "description": "Prevent `function` as JSX prop value",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-perf_jsx-no-jsx-as-prop",
    "title": "React perf: Jsx no jsx as prop",
    "description": "Prevent JSX as JSX prop value",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_connect-prefer-minimum-two-arguments",
    "title": "React redux: Connect prefer minimum two arguments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_connect-prefer-named-arguments",
    "title": "React redux: Connect prefer named arguments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_mapDispatchToProps-prefer-shorthand",
    "title": "React redux: MapDispatchToProps prefer shorthand",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_mapDispatchToProps-returns-object",
    "title": "React redux: MapDispatchToProps returns object",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_mapDispatchToProps-prefer-parameters-names",
    "title": "React redux: MapDispatchToProps prefer parameters names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_mapStateToProps-no-store",
    "title": "React redux: MapStateToProps no store",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_mapStateToProps-prefer-hoisted",
    "title": "React redux: MapStateToProps prefer hoisted",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_mapStateToProps-prefer-parameters-names",
    "title": "React redux: MapStateToProps prefer parameters names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_mapStateToProps-prefer-selectors",
    "title": "React redux: MapStateToProps prefer selectors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_useSelector-prefer-selectors",
    "title": "React redux: UseSelector prefer selectors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_no-unused-prop-types",
    "title": "React redux: No unused prop types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-redux_prefer-separate-component-file",
    "title": "React redux: Prefer separate component file",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "react-refresh_only-export-components",
    "title": "React refresh: Only export components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "redux-saga_no-yield-in-race",
    "title": "Redux saga: No yield in race",
    "description": "Flag use of yield inside race effects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "redux-saga_yield-effects",
    "title": "Redux saga: Yield effects",
    "description": "Enforce yield in front of effects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "redux-saga_no-unhandled-errors",
    "title": "Redux saga: No unhandled errors",
    "description": "Enforce error handling on sagas",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_confusing-quantifier",
    "title": "Regexp: Confusing quantifier",
    "description": "Disallow confusing quantifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_control-character-escape",
    "title": "Regexp: Control character escape",
    "description": "Enforce consistent escaping of control characters",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_grapheme-string-literal",
    "title": "Regexp: Grapheme string literal",
    "description": "Enforce single grapheme in string literal",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_hexadecimal-escape",
    "title": "Regexp: Hexadecimal escape",
    "description": "Enforce consistent usage of hexadecimal escape",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_letter-case",
    "title": "Regexp: Letter case",
    "description": "Enforce into your favorite case",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_match-any",
    "title": "Regexp: Match any",
    "description": "Enforce match any character style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_negation",
    "title": "Regexp: Negation",
    "description": "Enforce use of escapes on negation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-contradiction-with-assertion",
    "title": "Regexp: No contradiction with assertion",
    "description": "Disallow elements that contradict assertions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-control-character",
    "title": "Regexp: No control character",
    "description": "Disallow control characters",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-dupe-characters-character-class",
    "title": "Regexp: No dupe characters character class",
    "description": "Disallow duplicate characters in the RegExp character class",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-dupe-disjunctions",
    "title": "Regexp: No dupe disjunctions",
    "description": "Disallow duplicate disjunctions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-empty-alternative",
    "title": "Regexp: No empty alternative",
    "description": "Disallow alternatives without elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-empty-capturing-group",
    "title": "Regexp: No empty capturing group",
    "description": "Disallow capturing group that captures empty.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-empty-character-class",
    "title": "Regexp: No empty character class",
    "description": "Disallow character classes that match no characters",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-empty-group",
    "title": "Regexp: No empty group",
    "description": "Disallow empty group",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-empty-lookarounds-assertion",
    "title": "Regexp: No empty lookarounds assertion",
    "description": "Disallow empty lookahead assertion or empty lookbehind assertion",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-empty-string-literal",
    "title": "Regexp: No empty string literal",
    "description": "Disallow empty string literals in character classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-escape-backspace",
    "title": "Regexp: No escape backspace",
    "description": "Disallow escape backspace (`[\\b]`)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-extra-lookaround-assertions",
    "title": "Regexp: No extra lookaround assertions",
    "description": "Disallow unnecessary nested lookaround assertions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-invalid-regexp",
    "title": "Regexp: No invalid regexp",
    "description": "Disallow invalid regular expression strings in `RegExp` constructors",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-invisible-character",
    "title": "Regexp: No invisible character",
    "description": "Disallow invisible raw character",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-lazy-ends",
    "title": "Regexp: No lazy ends",
    "description": "Disallow lazy quantifiers at the end of an expression",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-legacy-features",
    "title": "Regexp: No legacy features",
    "description": "Disallow legacy RegExp features",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-misleading-capturing-group",
    "title": "Regexp: No misleading capturing group",
    "description": "Disallow capturing groups that do not behave as one would expect",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-misleading-unicode-character",
    "title": "Regexp: No misleading unicode character",
    "description": "Disallow multi-code-point characters in character classes and quantifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-missing-g-flag",
    "title": "Regexp: No missing g flag",
    "description": "Disallow missing `g` flag in patterns used in `String#matchAll` and `String#replaceAll`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-non-standard-flag",
    "title": "Regexp: No non standard flag",
    "description": "Disallow non-standard flags",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-obscure-range",
    "title": "Regexp: No obscure range",
    "description": "Disallow obscure character ranges",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-octal",
    "title": "Regexp: No octal",
    "description": "Disallow octal escape sequence",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-optional-assertion",
    "title": "Regexp: No optional assertion",
    "description": "Disallow optional assertions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-potentially-useless-backreference",
    "title": "Regexp: No potentially useless backreference",
    "description": "Disallow backreferences that reference a group that might not be matched",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-standalone-backslash",
    "title": "Regexp: No standalone backslash",
    "description": "Disallow standalone backslashes (`\\`)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-super-linear-backtracking",
    "title": "Regexp: No super linear backtracking",
    "description": "Disallow exponential and polynomial backtracking",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-super-linear-move",
    "title": "Regexp: No super linear move",
    "description": "Disallow quantifiers that cause quadratic moves",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-trivially-nested-assertion",
    "title": "Regexp: No trivially nested assertion",
    "description": "Disallow trivially nested assertions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-trivially-nested-quantifier",
    "title": "Regexp: No trivially nested quantifier",
    "description": "Disallow nested quantifiers that can be rewritten as one quantifier",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-unused-capturing-group",
    "title": "Regexp: No unused capturing group",
    "description": "Disallow unused capturing group",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-assertions",
    "title": "Regexp: No useless assertions",
    "description": "Disallow assertions that are known to always accept (or reject)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-backreference",
    "title": "Regexp: No useless backreference",
    "description": "Disallow useless backreferences in regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-character-class",
    "title": "Regexp: No useless character class",
    "description": "Disallow character class with one character",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-dollar-replacements",
    "title": "Regexp: No useless dollar replacements",
    "description": "Disallow useless `$` replacements in replacement string",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-escape",
    "title": "Regexp: No useless escape",
    "description": "Disallow unnecessary escape characters in RegExp",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-flag",
    "title": "Regexp: No useless flag",
    "description": "Disallow unnecessary regex flags",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-lazy",
    "title": "Regexp: No useless lazy",
    "description": "Disallow unnecessarily non-greedy quantifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-non-capturing-group",
    "title": "Regexp: No useless non capturing group",
    "description": "Disallow unnecessary non-capturing group",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-quantifier",
    "title": "Regexp: No useless quantifier",
    "description": "Disallow quantifiers that can be removed",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-range",
    "title": "Regexp: No useless range",
    "description": "Disallow unnecessary character ranges",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-set-operand",
    "title": "Regexp: No useless set operand",
    "description": "Disallow unnecessary elements in expression character classes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-string-literal",
    "title": "Regexp: No useless string literal",
    "description": "Disallow string disjunction of single characters in `\\q{...}`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-useless-two-nums-quantifier",
    "title": "Regexp: No useless two nums quantifier",
    "description": "Disallow unnecessary `{n,m}` quantifier",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_no-zero-quantifier",
    "title": "Regexp: No zero quantifier",
    "description": "Disallow quantifiers with a maximum of zero",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_optimal-lookaround-quantifier",
    "title": "Regexp: Optimal lookaround quantifier",
    "description": "Disallow the alternatives of lookarounds that end with a non-constant quantifier",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_optimal-quantifier-concatenation",
    "title": "Regexp: Optimal quantifier concatenation",
    "description": "Require optimal quantifiers for concatenated quantifiers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-character-class",
    "title": "Regexp: Prefer character class",
    "description": "Enforce using character class",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-d",
    "title": "Regexp: Prefer d",
    "description": "Enforce using `\\d`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-escape-replacement-dollar-char",
    "title": "Regexp: Prefer escape replacement dollar char",
    "description": "Enforces escape of replacement `$` character (`$$`).",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-lookaround",
    "title": "Regexp: Prefer lookaround",
    "description": "Prefer lookarounds over capturing group that do not replace",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-named-backreference",
    "title": "Regexp: Prefer named backreference",
    "description": "Enforce using named backreferences",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-named-capture-group",
    "title": "Regexp: Prefer named capture group",
    "description": "Enforce using named capture groups",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-named-replacement",
    "title": "Regexp: Prefer named replacement",
    "description": "Enforce using named replacement",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-plus-quantifier",
    "title": "Regexp: Prefer plus quantifier",
    "description": "Enforce using `+` quantifier",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-predefined-assertion",
    "title": "Regexp: Prefer predefined assertion",
    "description": "Prefer predefined assertion over equivalent lookarounds",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-quantifier",
    "title": "Regexp: Prefer quantifier",
    "description": "Enforce using quantifier",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-question-quantifier",
    "title": "Regexp: Prefer question quantifier",
    "description": "Enforce using `?` quantifier",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-range",
    "title": "Regexp: Prefer range",
    "description": "Enforce using character class range",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-regexp-exec",
    "title": "Regexp: Prefer regexp exec",
    "description": "Enforce that `RegExp#exec` is used instead of `String#match` if no global flag is provided",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-regexp-test",
    "title": "Regexp: Prefer regexp test",
    "description": "Enforce that `RegExp#test` is used instead of `String#match` and `RegExp#exec`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-result-array-groups",
    "title": "Regexp: Prefer result array groups",
    "description": "Enforce using result array `groups`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-set-operation",
    "title": "Regexp: Prefer set operation",
    "description": "Prefer character class set operations instead of lookarounds",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-star-quantifier",
    "title": "Regexp: Prefer star quantifier",
    "description": "Enforce using `*` quantifier",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-unicode-codepoint-escapes",
    "title": "Regexp: Prefer unicode codepoint escapes",
    "description": "Enforce use of unicode codepoint escapes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_prefer-w",
    "title": "Regexp: Prefer w",
    "description": "Enforce using `\\w`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_require-unicode-regexp",
    "title": "Regexp: Require unicode regexp",
    "description": "Enforce the use of the `u` flag",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_require-unicode-sets-regexp",
    "title": "Regexp: Require unicode sets regexp",
    "description": "Enforce the use of the `v` flag",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_simplify-set-operations",
    "title": "Regexp: Simplify set operations",
    "description": "Require simplify set operations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_sort-alternatives",
    "title": "Regexp: Sort alternatives",
    "description": "Sort alternatives if order doesn't matter",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_sort-character-class-elements",
    "title": "Regexp: Sort character class elements",
    "description": "Enforces elements order in character class",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_sort-flags",
    "title": "Regexp: Sort flags",
    "description": "Require regex flags to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_strict",
    "title": "Regexp: Strict",
    "description": "Disallow not strictly valid regular expressions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_unicode-escape",
    "title": "Regexp: Unicode escape",
    "description": "Enforce consistent usage of unicode escape or unicode codepoint escape",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_unicode-property",
    "title": "Regexp: Unicode property",
    "description": "Enforce consistent naming of unicode properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "regexp_use-ignore-case",
    "title": "Regexp: Use ignore case",
    "description": "Use the `i` flag if it simplifies the pattern",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "relay_graphql-syntax",
    "title": "Relay: Graphql syntax",
    "description": "Validates the syntax of graphql`...` templates.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "relay_compat-uses-vars",
    "title": "Relay: Compat uses vars",
    "description": "Relay Compat transforms fragment spreads from `...Container_foo` to `Container.getFragment('foo')`. This makes ESLint aware of this.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "relay_graphql-naming",
    "title": "Relay: Graphql naming",
    "description": "Validates naming conventions of graphql tags",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "relay_generated-flow-types",
    "title": "Relay: Generated flow types",
    "description": "Validates usage of RelayModern generated flow types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "relay_no-future-added-value",
    "title": "Relay: No future added value",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "relay_unused-fields",
    "title": "Relay: Unused fields",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "relay_must-colocate-fragment-spreads",
    "title": "Relay: Must colocate fragment spreads",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "relay_function-required-argument",
    "title": "Relay: Function required argument",
    "description": "Validates that the second argument is passed to relay functions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "relay_hook-required-argument",
    "title": "Relay: Hook required argument",
    "description": "Validates that the second argument is passed to relay hooks.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_ban-observables",
    "title": "Rxjs: Ban observables",
    "description": "Forbids the use of banned observables.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_ban-operators",
    "title": "Rxjs: Ban operators",
    "description": "Forbids the use of banned operators.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_finnish",
    "title": "Rxjs: Finnish",
    "description": "Enforces the use of Finnish notation.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_just",
    "title": "Rxjs: Just",
    "description": "Enforces the use of a `just` alias for `of`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_macro",
    "title": "Rxjs: Macro",
    "description": "Enforces the use of the RxJS Tools Babel macro.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-async-subscribe",
    "title": "Rxjs: No async subscribe",
    "description": "Forbids passing `async` functions to `subscribe`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-compat",
    "title": "Rxjs: No compat",
    "description": "Forbids importation from locations that depend upon `rxjs-compat`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-connectable",
    "title": "Rxjs: No connectable",
    "description": "Forbids operators that return connectable observables.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-create",
    "title": "Rxjs: No create",
    "description": "Forbids the calling of `Observable.create`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-cyclic-action",
    "title": "Rxjs: No cyclic action",
    "description": "Forbids effects and epics that re-emit filtered actions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-explicit-generics",
    "title": "Rxjs: No explicit generics",
    "description": "Forbids explicit generic type arguments.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-exposed-subjects",
    "title": "Rxjs: No exposed subjects",
    "description": "Forbids exposed (i.e. non-private) subjects.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-finnish",
    "title": "Rxjs: No finnish",
    "description": "Forbids the use of Finnish notation.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-ignored-error",
    "title": "Rxjs: No ignored error",
    "description": "Forbids the calling of `subscribe` without specifying an error handler.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-ignored-notifier",
    "title": "Rxjs: No ignored notifier",
    "description": "Forbids observables not composed from the `repeatWhen` or `retryWhen` notifier.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-ignored-observable",
    "title": "Rxjs: No ignored observable",
    "description": "Forbids the ignoring of observables returned by functions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-ignored-replay-buffer",
    "title": "Rxjs: No ignored replay buffer",
    "description": "Forbids using `ReplaySubject`, `publishReplay` or `shareReplay` without specifying the buffer size.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-ignored-subscribe",
    "title": "Rxjs: No ignored subscribe",
    "description": "Forbids the calling of `subscribe` without specifying arguments.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-ignored-subscription",
    "title": "Rxjs: No ignored subscription",
    "description": "Forbids ignoring the subscription returned by `subscribe`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-ignored-takewhile-value",
    "title": "Rxjs: No ignored takewhile value",
    "description": "Forbids ignoring the value within `takeWhile`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-implicit-any-catch",
    "title": "Rxjs: No implicit any catch",
    "description": "Forbids implicit `any` error parameters in `catchError` operators.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-index",
    "title": "Rxjs: No index",
    "description": "Forbids the importation from index modules.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-internal",
    "title": "Rxjs: No internal",
    "description": "Forbids the importation of internals.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-nested-subscribe",
    "title": "Rxjs: No nested subscribe",
    "description": "Forbids the calling of `subscribe` within a `subscribe` callback.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-redundant-notify",
    "title": "Rxjs: No redundant notify",
    "description": "Forbids redundant notifications from completed or errored observables.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-sharereplay",
    "title": "Rxjs: No sharereplay",
    "description": "Forbids using the `shareReplay` operator.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-subclass",
    "title": "Rxjs: No subclass",
    "description": "Forbids subclassing RxJS classes.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-subject-unsubscribe",
    "title": "Rxjs: No subject unsubscribe",
    "description": "Forbids calling the `unsubscribe` method of a subject instance.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-subject-value",
    "title": "Rxjs: No subject value",
    "description": "Forbids accessing the `value` property of a `BehaviorSubject` instance.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-subscribe-handlers",
    "title": "Rxjs: No subscribe handlers",
    "description": "Forbids the passing of handlers to `subscribe`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-topromise",
    "title": "Rxjs: No topromise",
    "description": "Forbids the use of the `toPromise` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-unbound-methods",
    "title": "Rxjs: No unbound methods",
    "description": "Forbids the passing of unbound methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-unsafe-catch",
    "title": "Rxjs: No unsafe catch",
    "description": "Forbids unsafe `catchError` usage in effects and epics.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-unsafe-first",
    "title": "Rxjs: No unsafe first",
    "description": "Forbids unsafe `first`/`take` usage in effects and epics.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-unsafe-subject-next",
    "title": "Rxjs: No unsafe subject next",
    "description": "Forbids unsafe optional `next` calls.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-unsafe-switchmap",
    "title": "Rxjs: No unsafe switchmap",
    "description": "Forbids unsafe `switchMap` usage in effects and epics.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_no-unsafe-takeuntil",
    "title": "Rxjs: No unsafe takeuntil",
    "description": "Forbids the application of operators after `takeUntil`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_prefer-observer",
    "title": "Rxjs: Prefer observer",
    "description": "Forbids the passing separate handlers to `subscribe` and `tap`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_suffix-subjects",
    "title": "Rxjs: Suffix subjects",
    "description": "Enforces the use of a suffix in subject identifiers.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs_throw-error",
    "title": "Rxjs: Throw error",
    "description": "Enforces the passing of `Error` values to error notifications.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs-angular_prefer-async-pipe",
    "title": "Rxjs angular: Prefer async pipe",
    "description": "Forbids the calling of `subscribe` within Angular components.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs-angular_prefer-composition",
    "title": "Rxjs angular: Prefer composition",
    "description": "Forbids `subscribe` calls that are not composed within Angular components (and, optionally, within services, directives, and pipes).",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "rxjs-angular_prefer-takeuntil",
    "title": "Rxjs angular: Prefer takeuntil",
    "description": "Forbids `subscribe` calls without an accompanying `takeUntil` within Angular components (and, optionally, within services, directives, and pipes).",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-unsafe-regex",
    "title": "Security: Detect unsafe regex",
    "description": "Detects potentially unsafe regular expressions, which may take a very long time to run, blocking the event loop.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-non-literal-regexp",
    "title": "Security: Detect non literal regexp",
    "description": "Detects \"RegExp(variable)\", which might allow an attacker to DOS your server with a long-running regular expression.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-non-literal-require",
    "title": "Security: Detect non literal require",
    "description": "Detects \"require(variable)\", which might allow an attacker to load and run arbitrary code, or access arbitrary files on disk.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-non-literal-fs-filename",
    "title": "Security: Detect non literal fs filename",
    "description": "Detects variable in filename argument of \"fs\" calls, which might allow an attacker to access anything on your system.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-eval-with-expression",
    "title": "Security: Detect eval with expression",
    "description": "Detects \"eval(variable)\" which can allow an attacker to run arbitrary code inside your process.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-pseudoRandomBytes",
    "title": "Security: Detect pseudoRandomBytes",
    "description": "Detects if \"pseudoRandomBytes()\" is in use, which might not give you the randomness you need and expect.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-possible-timing-attacks",
    "title": "Security: Detect possible timing attacks",
    "description": "Detects insecure comparisons (`==`, `!=`, `!==` and `===`), which check input sequentially.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-no-csrf-before-method-override",
    "title": "Security: Detect no csrf before method override",
    "description": "Detects Express \"csrf\" middleware setup before \"method-override\" middleware.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-buffer-noassert",
    "title": "Security: Detect buffer noassert",
    "description": "Detects calls to \"buffer\" with \"noAssert\" flag set.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-child-process",
    "title": "Security: Detect child process",
    "description": "Detects instances of \"child_process\" & non-literal \"exec()\" calls.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-disable-mustache-escape",
    "title": "Security: Detect disable mustache escape",
    "description": "Detects \"object.escapeMarkup = false\", which can be used with some template engines to disable escaping of HTML entities.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-object-injection",
    "title": "Security: Detect object injection",
    "description": "Detects \"variable[key]\" as a left- or right-hand assignment operand.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-new-buffer",
    "title": "Security: Detect new buffer",
    "description": "Detects instances of new Buffer(argument) where argument is any non-literal value.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security_detect-bidi-characters",
    "title": "Security: Detect bidi characters",
    "description": "Detects trojan source attacks that employ unicode bidi attacks to inject malicious code.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-absence-of-name-option-in-exrpress-session",
    "title": "Security node: Detect absence of name option in exrpress session",
    "description": "Detect the absence of name option in express session",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-buffer-unsafe-allocation",
    "title": "Security node: Detect buffer unsafe allocation",
    "description": "Buffer.allocUnsafe(size) is not safe and should not be used",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-child-process",
    "title": "Security node: Detect child process",
    "description": "Detect exec with non Literal argument",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-crlf",
    "title": "Security node: Detect crlf",
    "description": "Detect log forging attack ",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-dangerous-redirects",
    "title": "Security node: Detect dangerous redirects",
    "description": "Detect dangerous redirects",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-eval-with-expr",
    "title": "Security node: Detect eval with expr",
    "description": "Detect eval with string concatenation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-html-injection",
    "title": "Security node: Detect html injection",
    "description": "Detect html injection",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-improper-exception-handling",
    "title": "Security node: Detect improper exception handling",
    "description": "Rule that detects improper exception handling",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-insecure-randomness",
    "title": "Security node: Detect insecure randomness",
    "description": "Detect insecure randomness via Math.random()",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-non-literal-require-calls",
    "title": "Security node: Detect non literal require calls",
    "description": "Non literal require calls may cause an attack",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-nosql-injection",
    "title": "Security node: Detect nosql injection",
    "description": "Detect NOsql injection",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-option-multiplestatements-in-mysql",
    "title": "Security node: Detect option multiplestatements in mysql",
    "description": "Detect option mulitpleStatements:true in createConnection method of mysql",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-option-rejectunauthorized-in-nodejs-httpsrequest",
    "title": "Security node: Detect option rejectunauthorized in nodejs httpsrequest",
    "description": "Detect option rejectUnauthorized:false in Nodejs https request method",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-option-unsafe-in-serialize-javascript-npm-package",
    "title": "Security node: Detect option unsafe in serialize javascript npm package",
    "description": "Detect opion:unsafe in serialize method in serialize-javasript npm package",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-possible-timing-attacks",
    "title": "Security node: Detect possible timing attacks",
    "description": "Detect possible timing attacks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-runinthiscontext-method-in-nodes-vm",
    "title": "Security node: Detect runinthiscontext method in nodes vm",
    "description": "Detect vm.runInThisContext() method in nodes vm with non Literal argument",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-security-missconfiguration-cookie",
    "title": "Security node: Detect security missconfiguration cookie",
    "description": "Detect security missconfiguration in express cookie",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-sql-injection",
    "title": "Security node: Detect sql injection",
    "description": "Detect SQL injection",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-unhandled-event-errors",
    "title": "Security node: Detect unhandled event errors",
    "description": "Require listening to errors when using EventEmitter",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_detect-unhandled-async-errors",
    "title": "Security node: Detect unhandled async errors",
    "description": "Handle errors in asynchronous calls",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_disable-ssl-across-node-server",
    "title": "Security node: Disable ssl across node server",
    "description": "Process.env.NODE_TLS_REJECT_UNAUTHORIZED='0' disables SSL across node server!",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "security-node_non-literal-reg-expr",
    "title": "Security node: Non literal reg expr",
    "description": "Non literal regural expressions may cause possible attack",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "simple-import-sort_imports",
    "title": "Simple import sort: Imports",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "simple-import-sort_exports",
    "title": "Simple import sort: Exports",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_cognitive-complexity",
    "title": "Sonarjs: Cognitive complexity",
    "description": "Cognitive Complexity of functions should not be too high",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_elseif-without-else",
    "title": "Sonarjs: Elseif without else",
    "description": "\"if ... else if\" constructs should end with \"else\" clauses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_max-switch-cases",
    "title": "Sonarjs: Max switch cases",
    "description": "\"switch\" statements should not have too many \"case\" clauses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-all-duplicated-branches",
    "title": "Sonarjs: No all duplicated branches",
    "description": "All branches in a conditional structure should not have exactly the same implementation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-collapsible-if",
    "title": "Sonarjs: No collapsible if",
    "description": "Collapsible \"if\" statements should be merged",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-collection-size-mischeck",
    "title": "Sonarjs: No collection size mischeck",
    "description": "Collection sizes and array length comparisons should make sense",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreStrings",
        "description": "ignoreStrings"
      }
    ],
    "patternId": "sonarjs_no-duplicate-string",
    "title": "Sonarjs: No duplicate string",
    "description": "String literals should not be duplicated",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-duplicated-branches",
    "title": "Sonarjs: No duplicated branches",
    "description": "Two branches in a conditional structure should not have exactly the same implementation",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-element-overwrite",
    "title": "Sonarjs: No element overwrite",
    "description": "Collection elements should not be replaced unconditionally",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-empty-collection",
    "title": "Sonarjs: No empty collection",
    "description": "Empty collections should not be accessed or iterated",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-extra-arguments",
    "title": "Sonarjs: No extra arguments",
    "description": "Function calls should not pass extra arguments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-gratuitous-expressions",
    "title": "Sonarjs: No gratuitous expressions",
    "description": "Boolean expressions should not be gratuitous",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-identical-conditions",
    "title": "Sonarjs: No identical conditions",
    "description": "Related \"if-else-if\" and \"switch-case\" statements should not have the same condition",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-identical-expressions",
    "title": "Sonarjs: No identical expressions",
    "description": "Identical expressions should not be used on both sides of a binary operator",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-identical-functions",
    "title": "Sonarjs: No identical functions",
    "description": "Functions should not have identical implementations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-ignored-return",
    "title": "Sonarjs: No ignored return",
    "description": "Return values from functions without side effects should not be ignored",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-inverted-boolean-check",
    "title": "Sonarjs: No inverted boolean check",
    "description": "Boolean checks should not be inverted",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-nested-switch",
    "title": "Sonarjs: No nested switch",
    "description": "\"switch\" statements should not be nested",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-nested-template-literals",
    "title": "Sonarjs: No nested template literals",
    "description": "Template literals should not be nested",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-one-iteration-loop",
    "title": "Sonarjs: No one iteration loop",
    "description": "Loops with at most one iteration should be refactored",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-redundant-boolean",
    "title": "Sonarjs: No redundant boolean",
    "description": "Boolean literals should not be redundant",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-redundant-jump",
    "title": "Sonarjs: No redundant jump",
    "description": "Jump statements should not be redundant",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-same-line-conditional",
    "title": "Sonarjs: No same line conditional",
    "description": "Conditionals should start on new lines",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-small-switch",
    "title": "Sonarjs: No small switch",
    "description": "\"switch\" statements should have at least 3 \"case\" clauses",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-unused-collection",
    "title": "Sonarjs: No unused collection",
    "description": "Collection and array contents should be used",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-use-of-empty-return-value",
    "title": "Sonarjs: No use of empty return value",
    "description": "The output of functions that don't return anything should not be used",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_no-useless-catch",
    "title": "Sonarjs: No useless catch",
    "description": "\"catch\" clauses should do more than rethrow",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_non-existent-operator",
    "title": "Sonarjs: Non existent operator",
    "description": "Non-existent operators \"=+\", \"=-\" and \"=!\" should not be used",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_prefer-immediate-return",
    "title": "Sonarjs: Prefer immediate return",
    "description": "Local variables should not be declared and then immediately returned or thrown",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_prefer-object-literal",
    "title": "Sonarjs: Prefer object literal",
    "description": "Object literal syntax should be used",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_prefer-single-boolean-return",
    "title": "Sonarjs: Prefer single boolean return",
    "description": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sonarjs_prefer-while",
    "title": "Sonarjs: Prefer while",
    "description": "A \"while\" loop should be used instead of a \"for\" loop",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      }
    ],
    "patternId": "sort_destructuring-properties",
    "title": "Sort: Destructuring properties",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "typeOrder",
        "description": "typeOrder"
      },
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      }
    ],
    "patternId": "sort_exports",
    "title": "Sort: Exports",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      }
    ],
    "patternId": "sort_export-members",
    "title": "Sort: Export members",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "separator",
        "description": "separator"
      },
      {
        "name": "typeOrder",
        "description": "typeOrder"
      },
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      }
    ],
    "patternId": "sort_imports",
    "title": "Sort: Imports",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      }
    ],
    "patternId": "sort_import-members",
    "title": "Sort: Import members",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      }
    ],
    "patternId": "sort_object-properties",
    "title": "Sort: Object properties",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      }
    ],
    "patternId": "sort_type-properties",
    "title": "Sort: Type properties",
    "description": "Sorts TypeScript type properties alphabetically and case insensitive in ascending order.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      }
    ],
    "patternId": "sort_string-unions",
    "title": "Sort: String unions",
    "description": "Sorts TypeScript string unions alphabetically and case insensitive in ascending order.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "natural",
        "description": "natural"
      }
    ],
    "patternId": "sort_string-enums",
    "title": "Sort: String enums",
    "description": "Sorts TypeScript string enums alphabetically and case insensitive in ascending order.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sort-destructure-keys_sort-destructure-keys",
    "title": "Sort destructure keys: Sort destructure keys",
    "description": "Require object destructure keys to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreCase",
        "description": "ignoreCase"
      },
      {
        "name": "memberSyntaxSortOrder",
        "description": "memberSyntaxSortOrder"
      },
      {
        "name": "ignoreMemberSort",
        "description": "ignoreMemberSort"
      }
    ],
    "patternId": "sort-imports-es6-autofix_sort-imports-es6",
    "title": "Sort imports es6 autofix: Sort imports es6",
    "description": "Enforce sorted import declarations within modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sort-keys-custom-order-fix_sort-keys-custom-order-fix",
    "title": "Sort keys custom order fix: Sort keys custom order fix",
    "description": "Require object keys to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "sort-keys-fix_sort-keys-fix",
    "title": "Sort keys fix: Sort keys fix",
    "description": "Require object keys to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "comments",
        "description": "comments"
      },
      {
        "name": "strings",
        "description": "strings"
      },
      {
        "name": "identifiers",
        "description": "identifiers"
      },
      {
        "name": "ignoreRequire",
        "description": "ignoreRequire"
      },
      {
        "name": "enableUpperCaseUnderscoreCheck",
        "description": "enableUpperCaseUnderscoreCheck"
      },
      {
        "name": "templates",
        "description": "templates"
      },
      {
        "name": "lang",
        "description": "lang"
      },
      {
        "name": "langDir",
        "description": "langDir"
      },
      {
        "name": "skipWords",
        "description": "skipWords"
      },
      {
        "name": "skipIfMatch",
        "description": "skipIfMatch"
      },
      {
        "name": "skipWordIfMatch",
        "description": "skipWordIfMatch"
      },
      {
        "name": "minLength",
        "description": "minLength"
      }
    ],
    "patternId": "spellcheck_spell-checker",
    "title": "Spellcheck: Spell checker",
    "description": "Spell check",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_await-interactions",
    "title": "Storybook: Await interactions",
    "description": "Interactions should be awaited",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_context-in-play-function",
    "title": "Storybook: Context in play function",
    "description": "Pass a context when invoking play function of another story",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_csf-component",
    "title": "Storybook: Csf component",
    "description": "The component property should be set",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_default-exports",
    "title": "Storybook: Default exports",
    "description": "Story files should have a default export",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_hierarchy-separator",
    "title": "Storybook: Hierarchy separator",
    "description": "Deprecated hierarchy separator in title property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_meta-inline-properties",
    "title": "Storybook: Meta inline properties",
    "description": "Meta should only have inline properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_no-redundant-story-name",
    "title": "Storybook: No redundant story name",
    "description": "A story should not have a redundant name property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_no-stories-of",
    "title": "Storybook: No stories of",
    "description": "StoriesOf is deprecated and should not be used",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_no-title-property-in-meta",
    "title": "Storybook: No title property in meta",
    "description": "Do not define a title in meta",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_no-uninstalled-addons",
    "title": "Storybook: No uninstalled addons",
    "description": "This rule identifies storybook addons that are invalid because they are either not installed or contain a typo in their name.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_prefer-pascal-case",
    "title": "Storybook: Prefer pascal case",
    "description": "Stories should use PascalCase",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_story-exports",
    "title": "Storybook: Story exports",
    "description": "A story file must contain at least one story export",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_use-storybook-expect",
    "title": "Storybook: Use storybook expect",
    "description": "Use expect from `@storybook/jest`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "storybook_use-storybook-testing-library",
    "title": "Storybook: Use storybook testing library",
    "description": "Do not use testing-library directly on stories",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "suitescript_script-type",
    "title": "Suitescript: Script type",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "suitescript_api-version",
    "title": "Suitescript: Api version",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "suitescript_no-invalid-modules",
    "title": "Suitescript: No invalid modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "suitescript_no-extra-modules",
    "title": "Suitescript: No extra modules",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "suitescript_no-log-module",
    "title": "Suitescript: No log module",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "suitescript_log-args",
    "title": "Suitescript: Log args",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "suitescript_module-vars",
    "title": "Suitescript: Module vars",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "suitescript_no-amd-name",
    "title": "Suitescript: No amd name",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "suitescript_entry-points",
    "title": "Suitescript: Entry points",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "suitescript_no-module-extensions",
    "title": "Suitescript: No module extensions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "tailwindcss_classnames-order",
    "title": "Tailwindcss: Classnames order",
    "description": "Enforce a consistent and logical order of the Tailwind CSS classnames",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "tailwindcss_enforces-negative-arbitrary-values",
    "title": "Tailwindcss: Enforces negative arbitrary values",
    "description": "Warns about dash prefixed classnames using arbitrary values",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "tailwindcss_enforces-shorthand",
    "title": "Tailwindcss: Enforces shorthand",
    "description": "Enforces the usage of shorthand Tailwind CSS classnames",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "tailwindcss_migration-from-tailwind-2",
    "title": "Tailwindcss: Migration from tailwind 2",
    "description": "Detect obsolete classnames when upgrading to Tailwind CSS v3",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "tailwindcss_no-arbitrary-value",
    "title": "Tailwindcss: No arbitrary value",
    "description": "Forbid using arbitrary values in classnames",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "tailwindcss_no-contradicting-classname",
    "title": "Tailwindcss: No contradicting classname",
    "description": "Avoid contradicting Tailwind CSS classnames (e.g. \"w-3 w-5\")",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "tailwindcss_no-custom-classname",
    "title": "Tailwindcss: No custom classname",
    "description": "Detect classnames which do not belong to Tailwind CSS",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "tailwindcss_no-unnecessary-arbitrary-value",
    "title": "Tailwindcss: No unnecessary arbitrary value",
    "description": "Forbid using arbitrary values in classnames when an equivalent preset exists",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "test-selectors_anchor",
    "title": "Test selectors: Anchor",
    "description": "Requires test attributes on anchors.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "test-selectors_button",
    "title": "Test selectors: Button",
    "description": "Requires test attributes on buttons.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "test-selectors_input",
    "title": "Test selectors: Input",
    "description": "Requires test attributes on inputs.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "test-selectors_onChange",
    "title": "Test selectors: OnChange",
    "description": "Requires test attribute data-test-id on elements with the onChange property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "test-selectors_onClick",
    "title": "Test selectors: OnClick",
    "description": "Requires test attribute data-test-id on elements with the onClick property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "test-selectors_onKeyDown",
    "title": "Test selectors: OnKeyDown",
    "description": "Requires test attribute data-test-id on elements with the onKeyDown property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "test-selectors_onKeyUp",
    "title": "Test selectors: OnKeyUp",
    "description": "Requires test attribute data-test-id on elements with the onKeyUp property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "test-selectors_onSubmit",
    "title": "Test selectors: OnSubmit",
    "description": "Requires test attribute data-test-id on elements with the onSubmit property.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "eventModule",
        "description": "eventModule"
      }
    ],
    "patternId": "testing-library_await-async-events",
    "title": "Testing library: Await async events",
    "description": "Enforce promises from async event methods are handled",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_await-async-queries",
    "title": "Testing library: Await async queries",
    "description": "Enforce promises from async queries to be handled",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_await-async-utils",
    "title": "Testing library: Await async utils",
    "description": "Enforce promises from async utils to be awaited properly",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "testIdAttribute",
        "description": "testIdAttribute"
      },
      {
        "name": "testIdPattern",
        "description": "testIdPattern"
      },
      {
        "name": "customMessage",
        "description": "customMessage"
      }
    ],
    "patternId": "testing-library_consistent-data-testid",
    "title": "Testing library: Consistent data testid",
    "description": "Ensures consistent usage of `data-testid`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "eventModules",
        "description": "eventModules"
      }
    ],
    "patternId": "testing-library_no-await-sync-events",
    "title": "Testing library: No await sync events",
    "description": "Disallow unnecessary `await` for sync events",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-await-sync-queries",
    "title": "Testing library: No await sync queries",
    "description": "Disallow unnecessary `await` for sync queries",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-container",
    "title": "Testing library: No container",
    "description": "Disallow the use of `container` methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-debugging-utils",
    "title": "Testing library: No debugging utils",
    "description": "Disallow the use of debugging utilities like `debug`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-dom-import",
    "title": "Testing library: No dom import",
    "description": "Disallow importing from DOM Testing Library",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-global-regexp-flag-in-query",
    "title": "Testing library: No global regexp flag in query",
    "description": "Disallow the use of the global RegExp flag (/g) in queries",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-manual-cleanup",
    "title": "Testing library: No manual cleanup",
    "description": "Disallow the use of `cleanup`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-node-access",
    "title": "Testing library: No node access",
    "description": "Disallow direct Node access",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-promise-in-fire-event",
    "title": "Testing library: No promise in fire event",
    "description": "Disallow the use of promises passed to a `fireEvent` method",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-render-in-lifecycle",
    "title": "Testing library: No render in lifecycle",
    "description": "Disallow the use of `render` in testing frameworks setup functions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-unnecessary-act",
    "title": "Testing library: No unnecessary act",
    "description": "Disallow wrapping Testing Library utils or empty callbacks in `act`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-wait-for-multiple-assertions",
    "title": "Testing library: No wait for multiple assertions",
    "description": "Disallow the use of multiple `expect` calls inside `waitFor`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-wait-for-side-effects",
    "title": "Testing library: No wait for side effects",
    "description": "Disallow the use of side effects in `waitFor`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_no-wait-for-snapshot",
    "title": "Testing library: No wait for snapshot",
    "description": "Ensures no snapshot is generated inside of a `waitFor` call",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_prefer-explicit-assert",
    "title": "Testing library: Prefer explicit assert",
    "description": "Suggest using explicit assertions rather than standalone queries",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_prefer-find-by",
    "title": "Testing library: Prefer find by",
    "description": "Suggest using `find(All)By*` query instead of `waitFor` + `get(All)By*` to wait for elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_prefer-implicit-assert",
    "title": "Testing library: Prefer implicit assert",
    "description": "Suggest using implicit assertions for getBy* & findBy* queries",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_prefer-presence-queries",
    "title": "Testing library: Prefer presence queries",
    "description": "Ensure appropriate `get*`/`query*` queries are used with their respective matchers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_prefer-query-by-disappearance",
    "title": "Testing library: Prefer query by disappearance",
    "description": "Suggest using `queryBy*` queries when waiting for disappearance",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_prefer-query-matchers",
    "title": "Testing library: Prefer query matchers",
    "description": "Ensure the configured `get*`/`query*` query is used with the corresponding matchers",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_prefer-screen-queries",
    "title": "Testing library: Prefer screen queries",
    "description": "Suggest using `screen` while querying",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_prefer-user-event",
    "title": "Testing library: Prefer user event",
    "description": "Suggest using `userEvent` over `fireEvent` for simulating user interactions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "testing-library_render-result-naming-convention",
    "title": "Testing library: Render result naming convention",
    "description": "Enforce a valid naming for return value from `render`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "tsdoc_syntax",
    "title": "Tsdoc: Syntax",
    "description": "Validates that TypeScript documentation comments conform to the TSDoc standard",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowList",
        "description": "allowList"
      }
    ],
    "patternId": "turbo_no-undeclared-env-vars",
    "title": "Turbo: No undeclared env vars",
    "description": "Do not allow the use of `process.env` without including the env key in any turbo.json",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "typescript-sort-keys_interface",
    "title": "Typescript sort keys: Interface",
    "description": "Require interface keys to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "typescript-sort-keys_string-enum",
    "title": "Typescript sort keys: String enum",
    "description": "Require string enum members to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "sortCharacterClasses",
        "description": "sortCharacterClasses"
      }
    ],
    "patternId": "unicorn_better-regex",
    "title": "Unicorn: Better regex",
    "description": "Improve regexes by making them shorter, consistent, and safer.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_catch-error-name",
    "title": "Unicorn: Catch error name",
    "description": "Enforce a specific parameter name in catch clauses.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_consistent-destructuring",
    "title": "Unicorn: Consistent destructuring",
    "description": "Use destructured variables over properties.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkArrowFunctions",
        "description": "checkArrowFunctions"
      }
    ],
    "patternId": "unicorn_consistent-function-scoping",
    "title": "Unicorn: Consistent function scoping",
    "description": "Move function definitions to the highest possible scope.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_custom-error-definition",
    "title": "Unicorn: Custom error definition",
    "description": "Enforce correct `Error` subclassing.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_empty-brace-spaces",
    "title": "Unicorn: Empty brace spaces",
    "description": "Enforce no spaces between braces.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_error-message",
    "title": "Unicorn: Error message",
    "description": "Enforce passing a `message` value when creating a built-in error.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_escape-case",
    "title": "Unicorn: Escape case",
    "description": "Require escape sequences to use uppercase values.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreDatesOnPullRequests",
        "description": "ignoreDatesOnPullRequests"
      },
      {
        "name": "allowWarningComments",
        "description": "allowWarningComments"
      }
    ],
    "patternId": "unicorn_expiring-todo-comments",
    "title": "Unicorn: Expiring todo comments",
    "description": "Add expiration conditions to TODO comments.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "non-zero",
        "description": "non-zero"
      }
    ],
    "patternId": "unicorn_explicit-length-check",
    "title": "Unicorn: Explicit length check",
    "description": "Enforce explicitly comparing the `length` or `size` property of a value.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_filename-case",
    "title": "Unicorn: Filename case",
    "description": "Enforce a case style for filenames.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_import-style",
    "title": "Unicorn: Import style",
    "description": "Enforce specific import styles per module.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_new-for-builtins",
    "title": "Unicorn: New for builtins",
    "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-abusive-eslint-disable",
    "title": "Unicorn: No abusive eslint disable",
    "description": "Enforce specifying rules to disable in `eslint-disable` comments.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-anonymous-default-export",
    "title": "Unicorn: No anonymous default export",
    "description": "Disallow anonymous functions and classes as the default export.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-array-callback-reference",
    "title": "Unicorn: No array callback reference",
    "description": "Prevent passing a function reference directly to iterator methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-array-for-each",
    "title": "Unicorn: No array for each",
    "description": "Prefer `for…of` over the `forEach` method.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-array-method-this-argument",
    "title": "Unicorn: No array method this argument",
    "description": "Disallow using the `this` argument in array methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-array-push-push",
    "title": "Unicorn: No array push push",
    "description": "Enforce combining multiple `Array#push()` into one call.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowSimpleOperations",
        "description": "allowSimpleOperations"
      }
    ],
    "patternId": "unicorn_no-array-reduce",
    "title": "Unicorn: No array reduce",
    "description": "Disallow `Array#reduce()` and `Array#reduceRight()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-await-expression-member",
    "title": "Unicorn: No await expression member",
    "description": "Disallow member access from await expression.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-await-in-promise-methods",
    "title": "Unicorn: No await in promise methods",
    "description": "Disallow using `await` in `Promise` method parameters.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-console-spaces",
    "title": "Unicorn: No console spaces",
    "description": "Do not use leading/trailing space between `console.log` parameters.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-document-cookie",
    "title": "Unicorn: No document cookie",
    "description": "Do not use `document.cookie` directly.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-empty-file",
    "title": "Unicorn: No empty file",
    "description": "Disallow empty files.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-for-loop",
    "title": "Unicorn: No for loop",
    "description": "Do not use a `for` loop that can be replaced with a `for-of` loop.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-hex-escape",
    "title": "Unicorn: No hex escape",
    "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-instanceof-array",
    "title": "Unicorn: No instanceof array",
    "description": "Require `Array.isArray()` instead of `instanceof Array`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-invalid-remove-event-listener",
    "title": "Unicorn: No invalid remove event listener",
    "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-keyword-prefix",
    "title": "Unicorn: No keyword prefix",
    "description": "Disallow identifiers starting with `new` or `class`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-lonely-if",
    "title": "Unicorn: No lonely if",
    "description": "Disallow `if` statements as the only statement in `if` blocks without `else`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-negated-condition",
    "title": "Unicorn: No negated condition",
    "description": "Disallow negated conditions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-nested-ternary",
    "title": "Unicorn: No nested ternary",
    "description": "Disallow nested ternary expressions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-new-array",
    "title": "Unicorn: No new array",
    "description": "Disallow `new Array()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-new-buffer",
    "title": "Unicorn: No new buffer",
    "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkStrictEquality",
        "description": "checkStrictEquality"
      }
    ],
    "patternId": "unicorn_no-null",
    "title": "Unicorn: No null",
    "description": "Disallow the use of the `null` literal.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-object-as-default-parameter",
    "title": "Unicorn: No object as default parameter",
    "description": "Disallow the use of objects as default parameters.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-process-exit",
    "title": "Unicorn: No process exit",
    "description": "Disallow `process.exit()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-single-promise-in-promise-methods",
    "title": "Unicorn: No single promise in promise methods",
    "description": "Disallow passing single-element arrays to `Promise` methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-static-only-class",
    "title": "Unicorn: No static only class",
    "description": "Disallow classes that only have static members.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-thenable",
    "title": "Unicorn: No thenable",
    "description": "Disallow `then` property.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-this-assignment",
    "title": "Unicorn: No this assignment",
    "description": "Disallow assigning `this` to a variable.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkGlobalVariables",
        "description": "checkGlobalVariables"
      }
    ],
    "patternId": "unicorn_no-typeof-undefined",
    "title": "Unicorn: No typeof undefined",
    "description": "Disallow comparing `undefined` using `typeof`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-unnecessary-await",
    "title": "Unicorn: No unnecessary await",
    "description": "Disallow awaiting non-promise values.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-unnecessary-polyfills",
    "title": "Unicorn: No unnecessary polyfills",
    "description": "Enforce the use of built-in methods instead of unnecessary polyfills.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-unreadable-array-destructuring",
    "title": "Unicorn: No unreadable array destructuring",
    "description": "Disallow unreadable array destructuring.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-unreadable-iife",
    "title": "Unicorn: No unreadable iife",
    "description": "Disallow unreadable IIFEs.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-unused-properties",
    "title": "Unicorn: No unused properties",
    "description": "Disallow unused object properties.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-useless-fallback-in-spread",
    "title": "Unicorn: No useless fallback in spread",
    "description": "Disallow useless fallback when spreading in object literals.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-useless-length-check",
    "title": "Unicorn: No useless length check",
    "description": "Disallow useless array length check.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-useless-promise-resolve-reject",
    "title": "Unicorn: No useless promise resolve reject",
    "description": "Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-useless-spread",
    "title": "Unicorn: No useless spread",
    "description": "Disallow unnecessary spread.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-useless-switch-case",
    "title": "Unicorn: No useless switch case",
    "description": "Disallow useless case in switch statements.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-useless-undefined",
    "title": "Unicorn: No useless undefined",
    "description": "Disallow useless `undefined`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_no-zero-fractions",
    "title": "Unicorn: No zero fractions",
    "description": "Disallow number literals with zero fractions or dangling dots.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_number-literal-case",
    "title": "Unicorn: Number literal case",
    "description": "Enforce proper case for numeric literals.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "onlyIfContainsSeparator",
        "description": "onlyIfContainsSeparator"
      }
    ],
    "patternId": "unicorn_numeric-separators-style",
    "title": "Unicorn: Numeric separators style",
    "description": "Enforce the style of numeric separators by correctly grouping digits.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-add-event-listener",
    "title": "Unicorn: Prefer add event listener",
    "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkFromLast",
        "description": "checkFromLast"
      }
    ],
    "patternId": "unicorn_prefer-array-find",
    "title": "Unicorn: Prefer array find",
    "description": "Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-array-flat-map",
    "title": "Unicorn: Prefer array flat map",
    "description": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-array-flat",
    "title": "Unicorn: Prefer array flat",
    "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-array-index-of",
    "title": "Unicorn: Prefer array index of",
    "description": "Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-array-some",
    "title": "Unicorn: Prefer array some",
    "description": "Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast}(…)`.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkAllIndexAccess",
        "description": "checkAllIndexAccess"
      }
    ],
    "patternId": "unicorn_prefer-at",
    "title": "Unicorn: Prefer at",
    "description": "Prefer `.at()` method for index access and `String#charAt()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-blob-reading-methods",
    "title": "Unicorn: Prefer blob reading methods",
    "description": "Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-code-point",
    "title": "Unicorn: Prefer code point",
    "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-date-now",
    "title": "Unicorn: Prefer date now",
    "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-default-parameters",
    "title": "Unicorn: Prefer default parameters",
    "description": "Prefer default parameters over reassignment.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-dom-node-append",
    "title": "Unicorn: Prefer dom node append",
    "description": "Prefer `Node#append()` over `Node#appendChild()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-dom-node-dataset",
    "title": "Unicorn: Prefer dom node dataset",
    "description": "Prefer using `.dataset` on DOM elements over calling attribute methods.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-dom-node-remove",
    "title": "Unicorn: Prefer dom node remove",
    "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-dom-node-text-content",
    "title": "Unicorn: Prefer dom node text content",
    "description": "Prefer `.textContent` over `.innerText`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-event-target",
    "title": "Unicorn: Prefer event target",
    "description": "Prefer `EventTarget` over `EventEmitter`.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreUsedVariables",
        "description": "ignoreUsedVariables"
      }
    ],
    "patternId": "unicorn_prefer-export-from",
    "title": "Unicorn: Prefer export from",
    "description": "Prefer `export…from` when re-exporting.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-includes",
    "title": "Unicorn: Prefer includes",
    "description": "Prefer `.includes()` over `.indexOf()` and `Array#some()` when checking for existence or non-existence.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-json-parse-buffer",
    "title": "Unicorn: Prefer json parse buffer",
    "description": "Prefer reading a JSON file as a buffer.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-keyboard-event-key",
    "title": "Unicorn: Prefer keyboard event key",
    "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-logical-operator-over-ternary",
    "title": "Unicorn: Prefer logical operator over ternary",
    "description": "Prefer using a logical operator over a ternary.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-math-trunc",
    "title": "Unicorn: Prefer math trunc",
    "description": "Enforce the use of `Math.trunc` instead of bitwise operators.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-modern-dom-apis",
    "title": "Unicorn: Prefer modern dom apis",
    "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-modern-math-apis",
    "title": "Unicorn: Prefer modern math apis",
    "description": "Prefer modern `Math` APIs over legacy patterns.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-module",
    "title": "Unicorn: Prefer module",
    "description": "Prefer JavaScript modules (ESM) over CommonJS.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-native-coercion-functions",
    "title": "Unicorn: Prefer native coercion functions",
    "description": "Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-negative-index",
    "title": "Unicorn: Prefer negative index",
    "description": "Prefer negative index over `.length - index` when possible.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-node-protocol",
    "title": "Unicorn: Prefer node protocol",
    "description": "Prefer using the `node:` protocol when importing Node.js builtin modules.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkInfinity",
        "description": "checkInfinity"
      }
    ],
    "patternId": "unicorn_prefer-number-properties",
    "title": "Unicorn: Prefer number properties",
    "description": "Prefer `Number` static properties over global ones.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-object-from-entries",
    "title": "Unicorn: Prefer object from entries",
    "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-optional-catch-binding",
    "title": "Unicorn: Prefer optional catch binding",
    "description": "Prefer omitting the `catch` binding parameter.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-prototype-methods",
    "title": "Unicorn: Prefer prototype methods",
    "description": "Prefer borrowing methods from the prototype instead of the instance.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-query-selector",
    "title": "Unicorn: Prefer query selector",
    "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-reflect-apply",
    "title": "Unicorn: Prefer reflect apply",
    "description": "Prefer `Reflect.apply()` over `Function#apply()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-regexp-test",
    "title": "Unicorn: Prefer regexp test",
    "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-set-has",
    "title": "Unicorn: Prefer set has",
    "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-set-size",
    "title": "Unicorn: Prefer set size",
    "description": "Prefer using `Set#size` instead of `Array#length`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-spread",
    "title": "Unicorn: Prefer spread",
    "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-string-replace-all",
    "title": "Unicorn: Prefer string replace all",
    "description": "Prefer `String#replaceAll()` over regex searches with the global flag.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-string-slice",
    "title": "Unicorn: Prefer string slice",
    "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-string-starts-ends-with",
    "title": "Unicorn: Prefer string starts ends with",
    "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-string-trim-start-end",
    "title": "Unicorn: Prefer string trim start end",
    "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "minimumCases",
        "description": "minimumCases"
      },
      {
        "name": "emptyDefaultCase",
        "description": "emptyDefaultCase"
      }
    ],
    "patternId": "unicorn_prefer-switch",
    "title": "Unicorn: Prefer switch",
    "description": "Prefer `switch` over multiple `else-if`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-ternary",
    "title": "Unicorn: Prefer ternary",
    "description": "Prefer ternary expressions over simple `if-else` statements.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-top-level-await",
    "title": "Unicorn: Prefer top level await",
    "description": "Prefer top-level await over top-level promises and async function calls.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prefer-type-error",
    "title": "Unicorn: Prefer type error",
    "description": "Enforce throwing `TypeError` in type checking conditions.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_prevent-abbreviations",
    "title": "Unicorn: Prevent abbreviations",
    "description": "Prevent abbreviations.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_relative-url-style",
    "title": "Unicorn: Relative url style",
    "description": "Enforce consistent relative URL style.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_require-array-join-separator",
    "title": "Unicorn: Require array join separator",
    "description": "Enforce using the separator argument with `Array#join()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_require-number-to-fixed-digits-argument",
    "title": "Unicorn: Require number to fixed digits argument",
    "description": "Enforce using the digits argument with `Number#toFixed()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_require-post-message-target-origin",
    "title": "Unicorn: Require post message target origin",
    "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_string-content",
    "title": "Unicorn: String content",
    "description": "Enforce better string content.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_switch-case-braces",
    "title": "Unicorn: Switch case braces",
    "description": "Enforce consistent brace style for `case` clauses.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_template-indent",
    "title": "Unicorn: Template indent",
    "description": "Fix whitespace-insensitive template indentation.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_text-encoding-identifier-case",
    "title": "Unicorn: Text encoding identifier case",
    "description": "Enforce consistent case for text encoding identifiers.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unicorn_throw-new-error",
    "title": "Unicorn: Throw new error",
    "description": "Require `new` when throwing an error.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unused-imports_no-unused-vars",
    "title": "Unused imports: No unused vars",
    "description": "Disallow unused variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "unused-imports_no-unused-imports",
    "title": "Unused imports: No unused imports",
    "description": "Disallow unused variables",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_array-bracket-newline",
    "title": "Vue: Array bracket newline",
    "description": "Enforce linebreaks after opening and before closing array brackets in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_array-bracket-spacing",
    "title": "Vue: Array bracket spacing",
    "description": "Enforce consistent spacing inside array brackets in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_array-element-newline",
    "title": "Vue: Array element newline",
    "description": "Enforce line breaks after each array element in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "vue_arrow-spacing",
    "title": "Vue: Arrow spacing",
    "description": "Enforce consistent spacing before and after the arrow in arrow functions in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_attribute-hyphenation",
    "title": "Vue: Attribute hyphenation",
    "description": "Enforce attribute naming style on custom components in template",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_attributes-order",
    "title": "Vue: Attributes order",
    "description": "Enforce order of attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_block-lang",
    "title": "Vue: Block lang",
    "description": "Disallow use other than available `lang`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_block-order",
    "title": "Vue: Block order",
    "description": "Enforce order of component top-level elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_block-spacing",
    "title": "Vue: Block spacing",
    "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_block-tag-newline",
    "title": "Vue: Block tag newline",
    "description": "Enforce line breaks after opening and before closing block-level tags",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "allowSingleLine",
        "description": "allowSingleLine"
      }
    ],
    "patternId": "vue_brace-style",
    "title": "Vue: Brace style",
    "description": "Enforce consistent brace style for blocks in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreDestructuring",
        "description": "ignoreDestructuring"
      },
      {
        "name": "ignoreImports",
        "description": "ignoreImports"
      },
      {
        "name": "ignoreGlobals",
        "description": "ignoreGlobals"
      }
    ],
    "patternId": "vue_camelcase",
    "title": "Vue: Camelcase",
    "description": "Enforce camelcase naming convention in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_comma-dangle",
    "title": "Vue: Comma dangle",
    "description": "Require or disallow trailing commas in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "vue_comma-spacing",
    "title": "Vue: Comma spacing",
    "description": "Enforce consistent spacing before and after commas in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_comma-style",
    "title": "Vue: Comma style",
    "description": "Enforce consistent comma style in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_comment-directive",
    "title": "Vue: Comment directive",
    "description": "Support comment-directives in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_component-api-style",
    "title": "Vue: Component api style",
    "description": "Enforce component API style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_component-definition-name-casing",
    "title": "Vue: Component definition name casing",
    "description": "Enforce specific casing for component definition name",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_component-name-in-template-casing",
    "title": "Vue: Component name in template casing",
    "description": "Enforce specific casing for the component naming style in template",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_component-options-name-casing",
    "title": "Vue: Component options name casing",
    "description": "Enforce the casing of component name in `components` options",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_custom-event-name-casing",
    "title": "Vue: Custom event name casing",
    "description": "Enforce specific casing for custom event name",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_define-emits-declaration",
    "title": "Vue: Define emits declaration",
    "description": "Enforce declaration style of `defineEmits`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_define-macros-order",
    "title": "Vue: Define macros order",
    "description": "Enforce order of `defineEmits` and `defineProps` compiler macros",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_define-props-declaration",
    "title": "Vue: Define props declaration",
    "description": "Enforce declaration style of `defineProps`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_dot-location",
    "title": "Vue: Dot location",
    "description": "Enforce consistent newlines before and after dots in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowKeywords",
        "description": "allowKeywords"
      },
      {
        "name": "allowPattern",
        "description": "allowPattern"
      }
    ],
    "patternId": "vue_dot-notation",
    "title": "Vue: Dot notation",
    "description": "Enforce dot notation whenever possible in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_enforce-style-attribute",
    "title": "Vue: Enforce style attribute",
    "description": "Enforce or forbid the use of the `scoped` and `module` attributes in SFC top level style tags",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_eqeqeq",
    "title": "Vue: Eqeqeq",
    "description": "Require the use of `===` and `!==` in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_first-attribute-linebreak",
    "title": "Vue: First attribute linebreak",
    "description": "Enforce the location of first attribute",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_func-call-spacing",
    "title": "Vue: Func call spacing",
    "description": "Require or disallow spacing between function identifiers and their invocations in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "button",
        "description": "button"
      },
      {
        "name": "submit",
        "description": "submit"
      },
      {
        "name": "reset",
        "description": "reset"
      }
    ],
    "patternId": "vue_html-button-has-type",
    "title": "Vue: Html button has type",
    "description": "Disallow usage of button without an explicit type attribute",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_html-closing-bracket-newline",
    "title": "Vue: Html closing bracket newline",
    "description": "Require or disallow a line break before tag's closing brackets",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_html-closing-bracket-spacing",
    "title": "Vue: Html closing bracket spacing",
    "description": "Require or disallow a space before tag's closing brackets",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_html-comment-content-newline",
    "title": "Vue: Html comment content newline",
    "description": "Enforce unified line brake in HTML comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_html-comment-content-spacing",
    "title": "Vue: Html comment content spacing",
    "description": "Enforce unified spacing in HTML comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_html-comment-indent",
    "title": "Vue: Html comment indent",
    "description": "Enforce consistent indentation in HTML comments",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_html-end-tags",
    "title": "Vue: Html end tags",
    "description": "Enforce end tag style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_html-indent",
    "title": "Vue: Html indent",
    "description": "Enforce consistent indentation in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_html-quotes",
    "title": "Vue: Html quotes",
    "description": "Enforce quotes style of HTML attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_html-self-closing",
    "title": "Vue: Html self closing",
    "description": "Enforce self-closing style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_jsx-uses-vars",
    "title": "Vue: Jsx uses vars",
    "description": "Prevent variables used in JSX to be marked as unused",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_key-spacing",
    "title": "Vue: Key spacing",
    "description": "Enforce consistent spacing between keys and values in object literal properties in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "before",
        "description": "before"
      },
      {
        "name": "after",
        "description": "after"
      }
    ],
    "patternId": "vue_keyword-spacing",
    "title": "Vue: Keyword spacing",
    "description": "Enforce consistent spacing before and after keywords in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_match-component-file-name",
    "title": "Vue: Match component file name",
    "description": "Require component name property to match its file name",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_match-component-import-name",
    "title": "Vue: Match component import name",
    "description": "Require the registered component name to match the imported component name",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_max-attributes-per-line",
    "title": "Vue: Max attributes per line",
    "description": "Enforce the maximum number of attributes per line",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_max-len",
    "title": "Vue: Max len",
    "description": "Enforce a maximum line length in `.vue` files",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_max-lines-per-block",
    "title": "Vue: Max lines per block",
    "description": "Enforce maximum number of lines in Vue SFC blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_multi-word-component-names",
    "title": "Vue: Multi word component names",
    "description": "Require component names to be always multi-word",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_multiline-html-element-content-newline",
    "title": "Vue: Multiline html element content newline",
    "description": "Require a line break before and after the contents of a multiline element",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "ignoreJSX",
        "description": "ignoreJSX"
      }
    ],
    "patternId": "vue_multiline-ternary",
    "title": "Vue: Multiline ternary",
    "description": "Enforce newlines between operands of ternary expressions in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_mustache-interpolation-spacing",
    "title": "Vue: Mustache interpolation spacing",
    "description": "Enforce unified spacing in mustache interpolations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_new-line-between-multi-line-property",
    "title": "Vue: New line between multi line property",
    "description": "Enforce new lines between multi-line properties in Vue components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_next-tick-style",
    "title": "Vue: Next tick style",
    "description": "Enforce Promise or callback style in `nextTick`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-arrow-functions-in-watch",
    "title": "Vue: No arrow functions in watch",
    "description": "Disallow using arrow functions to define watcher",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-async-in-computed-properties",
    "title": "Vue: No async in computed properties",
    "description": "Disallow asynchronous actions in computed properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-bare-strings-in-template",
    "title": "Vue: No bare strings in template",
    "description": "Disallow the use of bare strings in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-boolean-default",
    "title": "Vue: No boolean default",
    "description": "Disallow boolean defaults",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-child-content",
    "title": "Vue: No child content",
    "description": "Disallow element's child contents which would be overwritten by a directive like `v-html` or `v-text`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-computed-properties-in-data",
    "title": "Vue: No computed properties in data",
    "description": "Disallow accessing computed properties in `data`.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-console",
    "title": "Vue: No console",
    "description": "Disallow the use of `console` in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "checkLoops",
        "description": "checkLoops"
      }
    ],
    "patternId": "vue_no-constant-condition",
    "title": "Vue: No constant condition",
    "description": "Disallow constant expressions in conditions in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-custom-modifiers-on-v-model",
    "title": "Vue: No custom modifiers on v model",
    "description": "Disallow custom modifiers on v-model used on the component",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-data-object-declaration",
    "title": "Vue: No deprecated data object declaration",
    "description": "Disallow using deprecated object declaration on data (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-destroyed-lifecycle",
    "title": "Vue: No deprecated destroyed lifecycle",
    "description": "Disallow using deprecated `destroyed` and `beforeDestroy` lifecycle hooks (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-dollar-listeners-api",
    "title": "Vue: No deprecated dollar listeners api",
    "description": "Disallow using deprecated `$listeners` (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-dollar-scopedslots-api",
    "title": "Vue: No deprecated dollar scopedslots api",
    "description": "Disallow using deprecated `$scopedSlots` (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-events-api",
    "title": "Vue: No deprecated events api",
    "description": "Disallow using deprecated events api (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-filter",
    "title": "Vue: No deprecated filter",
    "description": "Disallow using deprecated filters syntax (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-functional-template",
    "title": "Vue: No deprecated functional template",
    "description": "Disallow using deprecated the `functional` template (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-html-element-is",
    "title": "Vue: No deprecated html element is",
    "description": "Disallow using deprecated the `is` attribute on HTML elements (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-inline-template",
    "title": "Vue: No deprecated inline template",
    "description": "Disallow using deprecated `inline-template` attribute (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-model-definition",
    "title": "Vue: No deprecated model definition",
    "description": "Disallow deprecated `model` definition (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-props-default-this",
    "title": "Vue: No deprecated props default this",
    "description": "Disallow deprecated `this` access in props default function (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-router-link-tag-prop",
    "title": "Vue: No deprecated router link tag prop",
    "description": "Disallow using deprecated `tag` property on `RouterLink` (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-scope-attribute",
    "title": "Vue: No deprecated scope attribute",
    "description": "Disallow deprecated `scope` attribute (in Vue.js 2.5.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-slot-attribute",
    "title": "Vue: No deprecated slot attribute",
    "description": "Disallow deprecated `slot` attribute (in Vue.js 2.6.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-slot-scope-attribute",
    "title": "Vue: No deprecated slot scope attribute",
    "description": "Disallow deprecated `slot-scope` attribute (in Vue.js 2.6.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-v-bind-sync",
    "title": "Vue: No deprecated v bind sync",
    "description": "Disallow use of deprecated `.sync` modifier on `v-bind` directive (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-v-is",
    "title": "Vue: No deprecated v is",
    "description": "Disallow deprecated `v-is` directive (in Vue.js 3.1.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-v-on-native-modifier",
    "title": "Vue: No deprecated v on native modifier",
    "description": "Disallow using deprecated `.native` modifiers (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-v-on-number-modifiers",
    "title": "Vue: No deprecated v on number modifiers",
    "description": "Disallow using deprecated number (keycode) modifiers (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-deprecated-vue-config-keycodes",
    "title": "Vue: No deprecated vue config keycodes",
    "description": "Disallow using deprecated `Vue.config.keyCodes` (in Vue.js 3.0.0+)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-dupe-keys",
    "title": "Vue: No dupe keys",
    "description": "Disallow duplication of field names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-dupe-v-else-if",
    "title": "Vue: No dupe v else if",
    "description": "Disallow duplicate conditions in `v-if` / `v-else-if` chains",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-duplicate-attr-inheritance",
    "title": "Vue: No duplicate attr inheritance",
    "description": "Enforce `inheritAttrs` to be set to `false` when using `v-bind=\"$attrs\"`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-duplicate-attributes",
    "title": "Vue: No duplicate attributes",
    "description": "Disallow duplication of attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-empty-component-block",
    "title": "Vue: No empty component block",
    "description": "Disallow the `<template>` `<script>` `<style>` block to be empty",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowObjectPatternsAsParameters",
        "description": "allowObjectPatternsAsParameters"
      }
    ],
    "patternId": "vue_no-empty-pattern",
    "title": "Vue: No empty pattern",
    "description": "Disallow empty destructuring patterns in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-export-in-script-setup",
    "title": "Vue: No export in script setup",
    "description": "Disallow `export` in `<script setup>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-expose-after-await",
    "title": "Vue: No expose after await",
    "description": "Disallow asynchronously registered `expose`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-extra-parens",
    "title": "Vue: No extra parens",
    "description": "Disallow unnecessary parentheses in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "skipComments",
        "description": "skipComments"
      },
      {
        "name": "skipStrings",
        "description": "skipStrings"
      },
      {
        "name": "skipTemplates",
        "description": "skipTemplates"
      },
      {
        "name": "skipRegExps",
        "description": "skipRegExps"
      },
      {
        "name": "skipHTMLAttributeValues",
        "description": "skipHTMLAttributeValues"
      },
      {
        "name": "skipHTMLTextContents",
        "description": "skipHTMLTextContents"
      }
    ],
    "patternId": "vue_no-irregular-whitespace",
    "title": "Vue: No irregular whitespace",
    "description": "Disallow irregular whitespace in `.vue` files",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-lifecycle-after-await",
    "title": "Vue: No lifecycle after await",
    "description": "Disallow asynchronously registered lifecycle hooks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-lone-template",
    "title": "Vue: No lone template",
    "description": "Disallow unnecessary `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-loss-of-precision",
    "title": "Vue: No loss of precision",
    "description": "Disallow literal numbers that lose precision in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-multi-spaces",
    "title": "Vue: No multi spaces",
    "description": "Disallow multiple spaces",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-multiple-objects-in-class",
    "title": "Vue: No multiple objects in class",
    "description": "Disallow to pass multiple objects into array to class",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-multiple-slot-args",
    "title": "Vue: No multiple slot args",
    "description": "Disallow to pass multiple arguments to scoped slots",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-multiple-template-root",
    "title": "Vue: No multiple template root",
    "description": "Disallow adding multiple root nodes to the template",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-mutating-props",
    "title": "Vue: No mutating props",
    "description": "Disallow mutation of component props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-parsing-error",
    "title": "Vue: No parsing error",
    "description": "Disallow parsing errors in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-potential-component-option-typo",
    "title": "Vue: No potential component option typo",
    "description": "Disallow a potential typo in your component property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-ref-as-operand",
    "title": "Vue: No ref as operand",
    "description": "Disallow use of value wrapped by `ref()` (Composition API) as an operand",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-ref-object-reactivity-loss",
    "title": "Vue: No ref object reactivity loss",
    "description": "Disallow usages of ref objects that can lead to loss of reactivity",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-required-prop-with-default",
    "title": "Vue: No required prop with default",
    "description": "Enforce props with default values to be optional",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-reserved-component-names",
    "title": "Vue: No reserved component names",
    "description": "Disallow the use of reserved names in component definitions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-reserved-keys",
    "title": "Vue: No reserved keys",
    "description": "Disallow overwriting reserved keys",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-reserved-props",
    "title": "Vue: No reserved props",
    "description": "Disallow reserved names in props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-block",
    "title": "Vue: No restricted block",
    "description": "Disallow specific block",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-call-after-await",
    "title": "Vue: No restricted call after await",
    "description": "Disallow asynchronously called restricted methods",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-class",
    "title": "Vue: No restricted class",
    "description": "Disallow specific classes in Vue components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-component-names",
    "title": "Vue: No restricted component names",
    "description": "Disallow specific component names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-component-options",
    "title": "Vue: No restricted component options",
    "description": "Disallow specific component option",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-custom-event",
    "title": "Vue: No restricted custom event",
    "description": "Disallow specific custom event",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-html-elements",
    "title": "Vue: No restricted html elements",
    "description": "Disallow specific HTML elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-props",
    "title": "Vue: No restricted props",
    "description": "Disallow specific props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-static-attribute",
    "title": "Vue: No restricted static attribute",
    "description": "Disallow specific attribute",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-syntax",
    "title": "Vue: No restricted syntax",
    "description": "Disallow specified syntax in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-v-bind",
    "title": "Vue: No restricted v bind",
    "description": "Disallow specific argument in `v-bind`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-restricted-v-on",
    "title": "Vue: No restricted v on",
    "description": "Disallow specific argument in `v-on`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-root-v-if",
    "title": "Vue: No root v if",
    "description": "Disallow `v-if` directives on root element",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-setup-props-reactivity-loss",
    "title": "Vue: No setup props reactivity loss",
    "description": "Disallow usages that lose the reactivity of `props` passed to `setup`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-shared-component-data",
    "title": "Vue: No shared component data",
    "description": "Enforce component's data property to be a function",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-side-effects-in-computed-properties",
    "title": "Vue: No side effects in computed properties",
    "description": "Disallow side effects in computed properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-spaces-around-equal-signs-in-attribute",
    "title": "Vue: No spaces around equal signs in attribute",
    "description": "Disallow spaces around equal signs in attribute",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-sparse-arrays",
    "title": "Vue: No sparse arrays",
    "description": "Disallow sparse arrays in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-static-inline-styles",
    "title": "Vue: No static inline styles",
    "description": "Disallow static inline `style` attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-template-key",
    "title": "Vue: No template key",
    "description": "Disallow `key` attribute on `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-template-shadow",
    "title": "Vue: No template shadow",
    "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-template-target-blank",
    "title": "Vue: No template target blank",
    "description": "Disallow target=\"_blank\" attribute without rel=\"noopener noreferrer\"",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-textarea-mustache",
    "title": "Vue: No textarea mustache",
    "description": "Disallow mustaches in `<textarea>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-this-in-before-route-enter",
    "title": "Vue: No this in before route enter",
    "description": "Disallow `this` usage in a `beforeRouteEnter` method",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-undef-components",
    "title": "Vue: No undef components",
    "description": "Disallow use of undefined components in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-undef-properties",
    "title": "Vue: No undef properties",
    "description": "Disallow undefined properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-unsupported-features",
    "title": "Vue: No unsupported features",
    "description": "Disallow unsupported Vue.js syntax on the specified version",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-unused-components",
    "title": "Vue: No unused components",
    "description": "Disallow registering components that are not used inside templates",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-unused-emit-declarations",
    "title": "Vue: No unused emit declarations",
    "description": "Disallow unused emit declarations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-unused-properties",
    "title": "Vue: No unused properties",
    "description": "Disallow unused properties",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-unused-refs",
    "title": "Vue: No unused refs",
    "description": "Disallow unused refs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-unused-vars",
    "title": "Vue: No unused vars",
    "description": "Disallow unused variable definitions of v-for directives or scope attributes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-use-computed-property-like-method",
    "title": "Vue: No use computed property like method",
    "description": "Disallow use computed property like method",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-use-v-else-with-v-for",
    "title": "Vue: No use v else with v for",
    "description": "Disallow using `v-else-if`/`v-else` on the same element as `v-for`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-use-v-if-with-v-for",
    "title": "Vue: No use v if with v for",
    "description": "Disallow using `v-if` on the same element as `v-for`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-useless-concat",
    "title": "Vue: No useless concat",
    "description": "Disallow unnecessary concatenation of literals or template literals in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-useless-mustaches",
    "title": "Vue: No useless mustaches",
    "description": "Disallow unnecessary mustache interpolations",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-useless-template-attributes",
    "title": "Vue: No useless template attributes",
    "description": "Disallow useless attribute on `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-useless-v-bind",
    "title": "Vue: No useless v bind",
    "description": "Disallow unnecessary `v-bind` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-v-for-template-key-on-child",
    "title": "Vue: No v for template key on child",
    "description": "Disallow key of `<template v-for>` placed on child elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-v-for-template-key",
    "title": "Vue: No v for template key",
    "description": "Disallow `key` attribute on `<template v-for>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-v-html",
    "title": "Vue: No v html",
    "description": "Disallow use of v-html to prevent XSS attack",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-v-model-argument",
    "title": "Vue: No v model argument",
    "description": "Disallow adding an argument to `v-model` used in custom component",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-v-text-v-html-on-component",
    "title": "Vue: No v text v html on component",
    "description": "Disallow v-text / v-html on component",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-v-text",
    "title": "Vue: No v text",
    "description": "Disallow use of v-text",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_no-watch-after-await",
    "title": "Vue: No watch after await",
    "description": "Disallow asynchronously registered `watch`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_object-curly-newline",
    "title": "Vue: Object curly newline",
    "description": "Enforce consistent line breaks after opening and before closing braces in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_object-curly-spacing",
    "title": "Vue: Object curly spacing",
    "description": "Enforce consistent spacing inside braces in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "allowAllPropertiesOnSameLine",
        "description": "allowAllPropertiesOnSameLine"
      },
      {
        "name": "allowMultiplePropertiesPerLine",
        "description": "allowMultiplePropertiesPerLine"
      }
    ],
    "patternId": "vue_object-property-newline",
    "title": "Vue: Object property newline",
    "description": "Enforce placing object properties on separate lines in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_object-shorthand",
    "title": "Vue: Object shorthand",
    "description": "Require or disallow method and property shorthand syntax for object literals in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_one-component-per-file",
    "title": "Vue: One component per file",
    "description": "Enforce that each component should be in its own file",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_operator-linebreak",
    "title": "Vue: Operator linebreak",
    "description": "Enforce consistent linebreak style for operators in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_order-in-components",
    "title": "Vue: Order in components",
    "description": "Enforce order of properties in components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_padding-line-between-blocks",
    "title": "Vue: Padding line between blocks",
    "description": "Require or disallow padding lines between blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_padding-line-between-tags",
    "title": "Vue: Padding line between tags",
    "description": "Require or disallow newlines between sibling tags in template",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_padding-lines-in-component-definition",
    "title": "Vue: Padding lines in component definition",
    "description": "Require or disallow padding lines in component definition",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_prefer-define-options",
    "title": "Vue: Prefer define options",
    "description": "Enforce use of `defineOptions` instead of default export.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_prefer-import-from-vue",
    "title": "Vue: Prefer import from vue",
    "description": "Enforce import from 'vue' instead of import from '@vue/*'",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_prefer-prop-type-boolean-first",
    "title": "Vue: Prefer prop type boolean first",
    "description": "Enforce `Boolean` comes first in component prop types",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_prefer-separate-static-class",
    "title": "Vue: Prefer separate static class",
    "description": "Require static class names in template to be in a separate `class` attribute",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_prefer-template",
    "title": "Vue: Prefer template",
    "description": "Require template literals instead of string concatenation in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_prefer-true-attribute-shorthand",
    "title": "Vue: Prefer true attribute shorthand",
    "description": "Require shorthand form attribute when `v-bind` value is `true`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_prop-name-casing",
    "title": "Vue: Prop name casing",
    "description": "Enforce specific casing for the Prop name in Vue components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_quote-props",
    "title": "Vue: Quote props",
    "description": "Require quotes around object literal property names in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-component-is",
    "title": "Vue: Require component is",
    "description": "Require `v-bind:is` of `<component>` elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-default-prop",
    "title": "Vue: Require default prop",
    "description": "Require default value for props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-direct-export",
    "title": "Vue: Require direct export",
    "description": "Require the component to be directly exported",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-emit-validator",
    "title": "Vue: Require emit validator",
    "description": "Require type definitions in emits",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-explicit-emits",
    "title": "Vue: Require explicit emits",
    "description": "Require `emits` option with name triggered by `$emit()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-explicit-slots",
    "title": "Vue: Require explicit slots",
    "description": "Require slots to be explicitly defined",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-expose",
    "title": "Vue: Require expose",
    "description": "Require declare public properties using `expose`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "defineProps",
        "description": "defineProps"
      },
      {
        "name": "defineEmits",
        "description": "defineEmits"
      },
      {
        "name": "defineSlots",
        "description": "defineSlots"
      },
      {
        "name": "useSlots",
        "description": "useSlots"
      },
      {
        "name": "useAttrs",
        "description": "useAttrs"
      }
    ],
    "patternId": "vue_require-macro-variable-name",
    "title": "Vue: Require macro variable name",
    "description": "Require a certain macro variable name",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-name-property",
    "title": "Vue: Require name property",
    "description": "Require a name property in Vue components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-prop-comment",
    "title": "Vue: Require prop comment",
    "description": "Require props to have a comment",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-prop-type-constructor",
    "title": "Vue: Require prop type constructor",
    "description": "Require prop type to be a constructor",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-prop-types",
    "title": "Vue: Require prop types",
    "description": "Require type definitions in props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-render-return",
    "title": "Vue: Require render return",
    "description": "Enforce render function to always return value",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-slots-as-functions",
    "title": "Vue: Require slots as functions",
    "description": "Enforce properties of `$slots` to be used as a function",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-toggle-inside-transition",
    "title": "Vue: Require toggle inside transition",
    "description": "Require control the display of the content inside `<transition>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-typed-object-prop",
    "title": "Vue: Require typed object prop",
    "description": "Enforce adding type declarations to object props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-typed-ref",
    "title": "Vue: Require typed ref",
    "description": "Require `ref` and `shallowRef` functions to be strongly typed",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-v-for-key",
    "title": "Vue: Require v for key",
    "description": "Require `v-bind:key` with `v-for` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_require-valid-default-prop",
    "title": "Vue: Require valid default prop",
    "description": "Enforce props default values to be valid",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_return-in-computed-property",
    "title": "Vue: Return in computed property",
    "description": "Enforce that a return statement is present in computed property",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_return-in-emits-validator",
    "title": "Vue: Return in emits validator",
    "description": "Enforce that a return statement is present in emits validator",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_script-indent",
    "title": "Vue: Script indent",
    "description": "Enforce consistent indentation in `<script>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_singleline-html-element-content-newline",
    "title": "Vue: Singleline html element content newline",
    "description": "Require a line break before and after the contents of a singleline element",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "unnamedParam"
      },
      {
        "name": "caseSensitive",
        "description": "caseSensitive"
      },
      {
        "name": "minKeys",
        "description": "minKeys"
      },
      {
        "name": "natural",
        "description": "natural"
      },
      {
        "name": "runOutsideVue",
        "description": "runOutsideVue"
      }
    ],
    "patternId": "vue_sort-keys",
    "title": "Vue: Sort keys",
    "description": "Enforce sort-keys in a manner that is compatible with order-in-components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_space-in-parens",
    "title": "Vue: Space in parens",
    "description": "Enforce consistent spacing inside parentheses in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "int32Hint",
        "description": "int32Hint"
      }
    ],
    "patternId": "vue_space-infix-ops",
    "title": "Vue: Space infix ops",
    "description": "Require spacing around infix operators in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "words",
        "description": "words"
      },
      {
        "name": "nonwords",
        "description": "nonwords"
      }
    ],
    "patternId": "vue_space-unary-ops",
    "title": "Vue: Space unary ops",
    "description": "Enforce consistent spacing before or after unary operators in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_static-class-names-order",
    "title": "Vue: Static class names order",
    "description": "Enforce static class names order",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_template-curly-spacing",
    "title": "Vue: Template curly spacing",
    "description": "Require or disallow spacing around embedded expressions of template strings in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_this-in-template",
    "title": "Vue: This in template",
    "description": "Disallow usage of `this` in template",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_use-v-on-exact",
    "title": "Vue: Use v on exact",
    "description": "Enforce usage of `exact` modifier on `v-on`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_v-bind-style",
    "title": "Vue: V bind style",
    "description": "Enforce `v-bind` directive style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_v-for-delimiter-style",
    "title": "Vue: V for delimiter style",
    "description": "Enforce `v-for` directive's delimiter style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_v-if-else-key",
    "title": "Vue: V if else key",
    "description": "Require key attribute for conditionally rendered repeated components",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_v-on-event-hyphenation",
    "title": "Vue: V on event hyphenation",
    "description": "Enforce v-on event naming style on custom components in template",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_v-on-handler-style",
    "title": "Vue: V on handler style",
    "description": "Enforce writing style for handlers in `v-on` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_v-on-style",
    "title": "Vue: V on style",
    "description": "Enforce `v-on` directive style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_v-slot-style",
    "title": "Vue: V slot style",
    "description": "Enforce `v-slot` directive style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-attribute-name",
    "title": "Vue: Valid attribute name",
    "description": "Require valid attribute names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-define-emits",
    "title": "Vue: Valid define emits",
    "description": "Enforce valid `defineEmits` compiler macro",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-define-options",
    "title": "Vue: Valid define options",
    "description": "Enforce valid `defineOptions` compiler macro",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-define-props",
    "title": "Vue: Valid define props",
    "description": "Enforce valid `defineProps` compiler macro",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-model-definition",
    "title": "Vue: Valid model definition",
    "description": "Require valid keys in model option",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-next-tick",
    "title": "Vue: Valid next tick",
    "description": "Enforce valid `nextTick` function calls",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-template-root",
    "title": "Vue: Valid template root",
    "description": "Enforce valid template root",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-bind-sync",
    "title": "Vue: Valid v bind sync",
    "description": "Enforce valid `.sync` modifier on `v-bind` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-bind",
    "title": "Vue: Valid v bind",
    "description": "Enforce valid `v-bind` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-cloak",
    "title": "Vue: Valid v cloak",
    "description": "Enforce valid `v-cloak` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-else-if",
    "title": "Vue: Valid v else if",
    "description": "Enforce valid `v-else-if` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-else",
    "title": "Vue: Valid v else",
    "description": "Enforce valid `v-else` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-for",
    "title": "Vue: Valid v for",
    "description": "Enforce valid `v-for` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-html",
    "title": "Vue: Valid v html",
    "description": "Enforce valid `v-html` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-if",
    "title": "Vue: Valid v if",
    "description": "Enforce valid `v-if` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-is",
    "title": "Vue: Valid v is",
    "description": "Enforce valid `v-is` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-memo",
    "title": "Vue: Valid v memo",
    "description": "Enforce valid `v-memo` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-model",
    "title": "Vue: Valid v model",
    "description": "Enforce valid `v-model` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-on",
    "title": "Vue: Valid v on",
    "description": "Enforce valid `v-on` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-once",
    "title": "Vue: Valid v once",
    "description": "Enforce valid `v-once` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-pre",
    "title": "Vue: Valid v pre",
    "description": "Enforce valid `v-pre` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-show",
    "title": "Vue: Valid v show",
    "description": "Enforce valid `v-show` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-slot",
    "title": "Vue: Valid v slot",
    "description": "Enforce valid `v-slot` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue_valid-v-text",
    "title": "Vue: Valid v text",
    "description": "Enforce valid `v-text` directives",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_enforce-style-type",
    "title": "Vue scoped css: Enforce style type",
    "description": "Enforce the `<style>` tags to be plain or have the `scoped` or `module` attribute",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_no-deprecated-deep-combinator",
    "title": "Vue scoped css: No deprecated deep combinator",
    "description": "Disallow using deprecated deep combinators",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_no-deprecated-v-enter-v-leave-class",
    "title": "Vue scoped css: No deprecated v enter v leave class",
    "description": "Disallow v-enter and v-leave classes.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_no-parent-of-v-global",
    "title": "Vue scoped css: No parent of v global",
    "description": "Disallow parent selector for `::v-global` pseudo-element",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_no-parsing-error",
    "title": "Vue scoped css: No parsing error",
    "description": "Disallow parsing errors in `<style>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_no-unused-keyframes",
    "title": "Vue scoped css: No unused keyframes",
    "description": "Disallow `@keyframes` which don't use in Scoped CSS",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_no-unused-selector",
    "title": "Vue scoped css: No unused selector",
    "description": "Disallow selectors defined in Scoped CSS that don't use in `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_require-selector-used-inside",
    "title": "Vue scoped css: Require selector used inside",
    "description": "Disallow selectors defined that is not used inside `<template>`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_require-v-deep-argument",
    "title": "Vue scoped css: Require v deep argument",
    "description": "Require selector argument to be passed to `::v-deep()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_require-v-global-argument",
    "title": "Vue scoped css: Require v global argument",
    "description": "Require selector argument to be passed to `::v-global()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_require-v-slotted-argument",
    "title": "Vue scoped css: Require v slotted argument",
    "description": "Require selector argument to be passed to `::v-slotted()`",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_v-deep-pseudo-style",
    "title": "Vue scoped css: V deep pseudo style",
    "description": "Enforce `:deep()`/`::v-deep()` style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_v-global-pseudo-style",
    "title": "Vue scoped css: V global pseudo style",
    "description": "Enforce `:global()`/`::v-global()` style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vue-scoped-css_v-slotted-pseudo-style",
    "title": "Vue scoped css: V slotted pseudo style",
    "description": "Enforce `:slotted()`/`::v-slotted()` style",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_alt-text",
    "title": "Vuejs accessibility: Alt text",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_anchor-has-content",
    "title": "Vuejs accessibility: Anchor has content",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_aria-props",
    "title": "Vuejs accessibility: Aria props",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreNonDOM",
        "description": "ignoreNonDOM"
      }
    ],
    "patternId": "vuejs-accessibility_aria-role",
    "title": "Vuejs accessibility: Aria role",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_aria-unsupported-elements",
    "title": "Vuejs accessibility: Aria unsupported elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_click-events-have-key-events",
    "title": "Vuejs accessibility: Click events have key events",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_form-control-has-label",
    "title": "Vuejs accessibility: Form control has label",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_heading-has-content",
    "title": "Vuejs accessibility: Heading has content",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_iframe-has-title",
    "title": "Vuejs accessibility: Iframe has title",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_interactive-supports-focus",
    "title": "Vuejs accessibility: Interactive supports focus",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_label-has-for",
    "title": "Vuejs accessibility: Label has for",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_media-has-caption",
    "title": "Vuejs accessibility: Media has caption",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_mouse-events-have-key-events",
    "title": "Vuejs accessibility: Mouse events have key events",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_no-access-key",
    "title": "Vuejs accessibility: No access key",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "ignoreNonDOM",
        "description": "ignoreNonDOM"
      }
    ],
    "patternId": "vuejs-accessibility_no-autofocus",
    "title": "Vuejs accessibility: No autofocus",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_no-distracting-elements",
    "title": "Vuejs accessibility: No distracting elements",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_no-redundant-roles",
    "title": "Vuejs accessibility: No redundant roles",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_no-static-element-interactions",
    "title": "Vuejs accessibility: No static element interactions",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_role-has-required-aria-props",
    "title": "Vuejs accessibility: Role has required aria props",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "vuejs-accessibility_tabindex-no-positive",
    "title": "Vuejs accessibility: Tabindex no positive",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "wdio_await-expect",
    "title": "Wdio: Await expect",
    "description": "Expect must be prefixed with await",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "wdio_no-debug",
    "title": "Wdio: No debug",
    "description": "Disallow browser.debug() in tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "wdio_no-pause",
    "title": "Wdio: No pause",
    "description": "Disallow browser.pause() in tests",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "xss_no-location-href-assign",
    "title": "Xss: No location href assign",
    "description": "Disallow location.href assignment (prevent possible XSS)",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "xss_no-mixed-html",
    "title": "Xss: No mixed html",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_block-mapping-colon-indicator-newline",
    "title": "Yml: Block mapping colon indicator newline",
    "description": "Enforce consistent line breaks after `:` indicator",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_block-mapping-question-indicator-newline",
    "title": "Yml: Block mapping question indicator newline",
    "description": "Enforce consistent line breaks after `?` indicator",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_block-mapping",
    "title": "Yml: Block mapping",
    "description": "Require or disallow block style mappings.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_block-sequence-hyphen-indicator-newline",
    "title": "Yml: Block sequence hyphen indicator newline",
    "description": "Enforce consistent line breaks after `-` indicator",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_block-sequence",
    "title": "Yml: Block sequence",
    "description": "Require or disallow block style sequences.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_file-extension",
    "title": "Yml: File extension",
    "description": "Enforce YAML file extension",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_flow-mapping-curly-newline",
    "title": "Yml: Flow mapping curly newline",
    "description": "Enforce consistent line breaks inside braces",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_flow-mapping-curly-spacing",
    "title": "Yml: Flow mapping curly spacing",
    "description": "Enforce consistent spacing inside braces",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_flow-sequence-bracket-newline",
    "title": "Yml: Flow sequence bracket newline",
    "description": "Enforce linebreaks after opening and before closing flow sequence brackets",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_flow-sequence-bracket-spacing",
    "title": "Yml: Flow sequence bracket spacing",
    "description": "Enforce consistent spacing inside flow sequence brackets",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_indent",
    "title": "Yml: Indent",
    "description": "Enforce consistent indentation",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "camelCase",
        "description": "camelCase"
      },
      {
        "name": "PascalCase",
        "description": "PascalCase"
      },
      {
        "name": "SCREAMING_SNAKE_CASE",
        "description": "SCREAMING_SNAKE_CASE"
      },
      {
        "name": "kebab-case",
        "description": "kebab-case"
      },
      {
        "name": "snake_case",
        "description": "snake_case"
      }
    ],
    "patternId": "yml_key-name-casing",
    "title": "Yml: Key name casing",
    "description": "Enforce naming convention to key names",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_key-spacing",
    "title": "Yml: Key spacing",
    "description": "Enforce consistent spacing between keys and values in mapping pairs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_no-empty-document",
    "title": "Yml: No empty document",
    "description": "Disallow empty document",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_no-empty-key",
    "title": "Yml: No empty key",
    "description": "Disallow empty mapping keys",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_no-empty-mapping-value",
    "title": "Yml: No empty mapping value",
    "description": "Disallow empty mapping values",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_no-empty-sequence-entry",
    "title": "Yml: No empty sequence entry",
    "description": "Disallow empty sequence entries",
    "timeToFix": 5
  },
  {
    "parameters": [
      {
        "name": "skipComments",
        "description": "skipComments"
      },
      {
        "name": "skipQuotedScalars",
        "description": "skipQuotedScalars"
      }
    ],
    "patternId": "yml_no-irregular-whitespace",
    "title": "Yml: No irregular whitespace",
    "description": "Disallow irregular whitespace",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_no-multiple-empty-lines",
    "title": "Yml: No multiple empty lines",
    "description": "Disallow multiple empty lines",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_no-tab-indent",
    "title": "Yml: No tab indent",
    "description": "Disallow tabs for indentation.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_no-trailing-zeros",
    "title": "Yml: No trailing zeros",
    "description": "Disallow trailing zeros for floats",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_plain-scalar",
    "title": "Yml: Plain scalar",
    "description": "Require or disallow plain style scalar.",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_quotes",
    "title": "Yml: Quotes",
    "description": "Enforce the consistent use of either double, or single quotes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_require-string-key",
    "title": "Yml: Require string key",
    "description": "Disallow mapping keys other than strings",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_sort-keys",
    "title": "Yml: Sort keys",
    "description": "Require mapping keys to be sorted",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_spaced-comment",
    "title": "Yml: Spaced comment",
    "description": "Enforce consistent spacing after the `#` in a comment",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "yml_vue-custom-block_no-parsing-error",
    "title": "Yml: [Vue custom block] No parsing error",
    "description": "Disallow parsing errors in Vue custom blocks",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_concat",
    "title": "You dont need lodash underscore: Concat",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_drop",
    "title": "You dont need lodash underscore: Drop",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_drop-right",
    "title": "You dont need lodash underscore: Drop right",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_index-of",
    "title": "You dont need lodash underscore: Index of",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_join",
    "title": "You dont need lodash underscore: Join",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_last",
    "title": "You dont need lodash underscore: Last",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_last-index-of",
    "title": "You dont need lodash underscore: Last index of",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_reverse",
    "title": "You dont need lodash underscore: Reverse",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_fill",
    "title": "You dont need lodash underscore: Fill",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_find",
    "title": "You dont need lodash underscore: Find",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_detect",
    "title": "You dont need lodash underscore: Detect",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_first",
    "title": "You dont need lodash underscore: First",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_find-index",
    "title": "You dont need lodash underscore: Find index",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-array",
    "title": "You dont need lodash underscore: Is array",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_each",
    "title": "You dont need lodash underscore: Each",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_for-each",
    "title": "You dont need lodash underscore: For each",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_every",
    "title": "You dont need lodash underscore: Every",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_all",
    "title": "You dont need lodash underscore: All",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_filter",
    "title": "You dont need lodash underscore: Filter",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_select",
    "title": "You dont need lodash underscore: Select",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_map",
    "title": "You dont need lodash underscore: Map",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_collect",
    "title": "You dont need lodash underscore: Collect",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_reduce",
    "title": "You dont need lodash underscore: Reduce",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_inject",
    "title": "You dont need lodash underscore: Inject",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_foldl",
    "title": "You dont need lodash underscore: Foldl",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_reduce-right",
    "title": "You dont need lodash underscore: Reduce right",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_foldr",
    "title": "You dont need lodash underscore: Foldr",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_size",
    "title": "You dont need lodash underscore: Size",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_some",
    "title": "You dont need lodash underscore: Some",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_any",
    "title": "You dont need lodash underscore: Any",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_includes",
    "title": "You dont need lodash underscore: Includes",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_contains",
    "title": "You dont need lodash underscore: Contains",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_slice",
    "title": "You dont need lodash underscore: Slice",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_take-right",
    "title": "You dont need lodash underscore: Take right",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_bind",
    "title": "You dont need lodash underscore: Bind",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-finite",
    "title": "You dont need lodash underscore: Is finite",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-integer",
    "title": "You dont need lodash underscore: Is integer",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-nan",
    "title": "You dont need lodash underscore: Is nan",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-nil",
    "title": "You dont need lodash underscore: Is nil",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-null",
    "title": "You dont need lodash underscore: Is null",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-undefined",
    "title": "You dont need lodash underscore: Is undefined",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_keys",
    "title": "You dont need lodash underscore: Keys",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_extend-own",
    "title": "You dont need lodash underscore: Extend own",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_assign",
    "title": "You dont need lodash underscore: Assign",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_values",
    "title": "You dont need lodash underscore: Values",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_entries",
    "title": "You dont need lodash underscore: Entries",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_to-pairs",
    "title": "You dont need lodash underscore: To pairs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_pairs",
    "title": "You dont need lodash underscore: Pairs",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_get",
    "title": "You dont need lodash underscore: Get",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_split",
    "title": "You dont need lodash underscore: Split",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_starts-with",
    "title": "You dont need lodash underscore: Starts with",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_ends-with",
    "title": "You dont need lodash underscore: Ends with",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_to-lower",
    "title": "You dont need lodash underscore: To lower",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_to-upper",
    "title": "You dont need lodash underscore: To upper",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_trim",
    "title": "You dont need lodash underscore: Trim",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_pad-start",
    "title": "You dont need lodash underscore: Pad start",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_pad-end",
    "title": "You dont need lodash underscore: Pad end",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_repeat",
    "title": "You dont need lodash underscore: Repeat",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_uniq",
    "title": "You dont need lodash underscore: Uniq",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_replace",
    "title": "You dont need lodash underscore: Replace",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_omit",
    "title": "You dont need lodash underscore: Omit",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_flatten",
    "title": "You dont need lodash underscore: Flatten",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_throttle",
    "title": "You dont need lodash underscore: Throttle",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-string",
    "title": "You dont need lodash underscore: Is string",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_cast-array",
    "title": "You dont need lodash underscore: Cast array",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_clone-deep",
    "title": "You dont need lodash underscore: Clone deep",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-function",
    "title": "You dont need lodash underscore: Is function",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_union-by",
    "title": "You dont need lodash underscore: Union by",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_capitalize",
    "title": "You dont need lodash underscore: Capitalize",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-date",
    "title": "You dont need lodash underscore: Is date",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_defaults",
    "title": "You dont need lodash underscore: Defaults",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_is-array-buffer",
    "title": "You dont need lodash underscore: Is array buffer",
    "timeToFix": 5
  },
  {
    "parameters": [],
    "patternId": "you-dont-need-lodash-underscore_head",
    "title": "You dont need lodash underscore: Head",
    "timeToFix": 5
  }
]
